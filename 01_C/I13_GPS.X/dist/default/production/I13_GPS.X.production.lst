

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Apr 18 11:27:25 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1717
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    57                           	dabs	1,0x620,48
    58                           	dabs	1,0x5A0,80
    59                           	dabs	1,0x520,80
    60                           	dabs	1,0x4A0,80
    61                           	dabs	1,0x464,12
    62                           	dabs	1,0x22C4,0,_uartBuffer
    63                           	dabs	1,0x7E,2
    64  0000                     
    65                           ; Version 1.41
    66                           ; Generated 25/01/2017 GMT
    67                           ; 
    68                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC16F1717 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  009F                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0110                     	;# 
   153  0111                     	;# 
   154  0112                     	;# 
   155  0113                     	;# 
   156  0114                     	;# 
   157  0115                     	;# 
   158  0116                     	;# 
   159  0117                     	;# 
   160  0118                     	;# 
   161  0119                     	;# 
   162  011A                     	;# 
   163  011B                     	;# 
   164  011B                     	;# 
   165  011C                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  018E                     	;# 
   169  018F                     	;# 
   170  0190                     	;# 
   171  0191                     	;# 
   172  0191                     	;# 
   173  0192                     	;# 
   174  0193                     	;# 
   175  0193                     	;# 
   176  0194                     	;# 
   177  0195                     	;# 
   178  0196                     	;# 
   179  0197                     	;# 
   180  0199                     	;# 
   181  0199                     	;# 
   182  0199                     	;# 
   183  019A                     	;# 
   184  019A                     	;# 
   185  019A                     	;# 
   186  019B                     	;# 
   187  019B                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019C                     	;# 
   192  019C                     	;# 
   193  019C                     	;# 
   194  019D                     	;# 
   195  019D                     	;# 
   196  019D                     	;# 
   197  019E                     	;# 
   198  019E                     	;# 
   199  019E                     	;# 
   200  019F                     	;# 
   201  019F                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  020C                     	;# 
   206  020D                     	;# 
   207  020E                     	;# 
   208  020F                     	;# 
   209  0210                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  028C                     	;# 
   227  028D                     	;# 
   228  028E                     	;# 
   229  028F                     	;# 
   230  0290                     	;# 
   231  0291                     	;# 
   232  0291                     	;# 
   233  0292                     	;# 
   234  0293                     	;# 
   235  0293                     	;# 
   236  0298                     	;# 
   237  0298                     	;# 
   238  0299                     	;# 
   239  029A                     	;# 
   240  029A                     	;# 
   241  029E                     	;# 
   242  030C                     	;# 
   243  030D                     	;# 
   244  030E                     	;# 
   245  030F                     	;# 
   246  0310                     	;# 
   247  038C                     	;# 
   248  038D                     	;# 
   249  038E                     	;# 
   250  038F                     	;# 
   251  0390                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0394                     	;# 
   256  0395                     	;# 
   257  0396                     	;# 
   258  0397                     	;# 
   259  0398                     	;# 
   260  0399                     	;# 
   261  039D                     	;# 
   262  039E                     	;# 
   263  039F                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  041C                     	;# 
   268  041D                     	;# 
   269  041E                     	;# 
   270  0498                     	;# 
   271  0498                     	;# 
   272  0499                     	;# 
   273  049A                     	;# 
   274  049B                     	;# 
   275  049B                     	;# 
   276  049C                     	;# 
   277  049D                     	;# 
   278  049E                     	;# 
   279  049F                     	;# 
   280  0511                     	;# 
   281  0515                     	;# 
   282  0617                     	;# 
   283  0618                     	;# 
   284  0619                     	;# 
   285  0619                     	;# 
   286  061A                     	;# 
   287  061B                     	;# 
   288  061C                     	;# 
   289  061C                     	;# 
   290  0691                     	;# 
   291  0692                     	;# 
   292  0693                     	;# 
   293  0694                     	;# 
   294  0695                     	;# 
   295  0696                     	;# 
   296  0697                     	;# 
   297  0698                     	;# 
   298  0699                     	;# 
   299  069A                     	;# 
   300  069B                     	;# 
   301  069C                     	;# 
   302  069D                     	;# 
   303  069E                     	;# 
   304  069F                     	;# 
   305  0E0F                     	;# 
   306  0E10                     	;# 
   307  0E11                     	;# 
   308  0E12                     	;# 
   309  0E13                     	;# 
   310  0E14                     	;# 
   311  0E15                     	;# 
   312  0E17                     	;# 
   313  0E20                     	;# 
   314  0E21                     	;# 
   315  0E22                     	;# 
   316  0E24                     	;# 
   317  0E25                     	;# 
   318  0E28                     	;# 
   319  0E29                     	;# 
   320  0E2A                     	;# 
   321  0E2B                     	;# 
   322  0E90                     	;# 
   323  0E91                     	;# 
   324  0E92                     	;# 
   325  0E93                     	;# 
   326  0E94                     	;# 
   327  0E95                     	;# 
   328  0E96                     	;# 
   329  0E97                     	;# 
   330  0E98                     	;# 
   331  0E99                     	;# 
   332  0E9A                     	;# 
   333  0E9B                     	;# 
   334  0E9C                     	;# 
   335  0E9D                     	;# 
   336  0E9E                     	;# 
   337  0E9F                     	;# 
   338  0EA0                     	;# 
   339  0EA1                     	;# 
   340  0EA2                     	;# 
   341  0EA3                     	;# 
   342  0EA4                     	;# 
   343  0EA5                     	;# 
   344  0EA6                     	;# 
   345  0EA7                     	;# 
   346  0EA8                     	;# 
   347  0EA9                     	;# 
   348  0EAA                     	;# 
   349  0EAB                     	;# 
   350  0EAC                     	;# 
   351  0EAD                     	;# 
   352  0EAE                     	;# 
   353  0EAF                     	;# 
   354  0EB0                     	;# 
   355  0EB1                     	;# 
   356  0EB2                     	;# 
   357  0F0F                     	;# 
   358  0F10                     	;# 
   359  0F11                     	;# 
   360  0F12                     	;# 
   361  0F13                     	;# 
   362  0F14                     	;# 
   363  0F15                     	;# 
   364  0F16                     	;# 
   365  0F17                     	;# 
   366  0F18                     	;# 
   367  0F19                     	;# 
   368  0F1A                     	;# 
   369  0F1B                     	;# 
   370  0F1C                     	;# 
   371  0F1D                     	;# 
   372  0F1E                     	;# 
   373  0F1F                     	;# 
   374  0F20                     	;# 
   375  0F21                     	;# 
   376  0F22                     	;# 
   377  0F23                     	;# 
   378  0F24                     	;# 
   379  0F25                     	;# 
   380  0F26                     	;# 
   381  0F27                     	;# 
   382  0F28                     	;# 
   383  0F29                     	;# 
   384  0F2A                     	;# 
   385  0F2B                     	;# 
   386  0F2C                     	;# 
   387  0F2D                     	;# 
   388  0F2E                     	;# 
   389  0F2F                     	;# 
   390  0F30                     	;# 
   391  0F31                     	;# 
   392  0F32                     	;# 
   393  0F33                     	;# 
   394  0F34                     	;# 
   395  0F35                     	;# 
   396  0F36                     	;# 
   397  0F37                     	;# 
   398  0FE4                     	;# 
   399  0FE5                     	;# 
   400  0FE6                     	;# 
   401  0FE7                     	;# 
   402  0FE8                     	;# 
   403  0FE9                     	;# 
   404  0FEA                     	;# 
   405  0FEB                     	;# 
   406  0FED                     	;# 
   407  0FEE                     	;# 
   408  0FEF                     	;# 
   409  0000                     	;# 
   410  0001                     	;# 
   411  0002                     	;# 
   412  0003                     	;# 
   413  0004                     	;# 
   414  0005                     	;# 
   415  0006                     	;# 
   416  0007                     	;# 
   417  0008                     	;# 
   418  0009                     	;# 
   419  000A                     	;# 
   420  000B                     	;# 
   421  000C                     	;# 
   422  000D                     	;# 
   423  000E                     	;# 
   424  000F                     	;# 
   425  0010                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0015                     	;# 
   430  0016                     	;# 
   431  0016                     	;# 
   432  0017                     	;# 
   433  0018                     	;# 
   434  0019                     	;# 
   435  001A                     	;# 
   436  001B                     	;# 
   437  001C                     	;# 
   438  008C                     	;# 
   439  008D                     	;# 
   440  008E                     	;# 
   441  008F                     	;# 
   442  0090                     	;# 
   443  0091                     	;# 
   444  0092                     	;# 
   445  0093                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009A                     	;# 
   452  009B                     	;# 
   453  009B                     	;# 
   454  009C                     	;# 
   455  009D                     	;# 
   456  009E                     	;# 
   457  009F                     	;# 
   458  010C                     	;# 
   459  010D                     	;# 
   460  010E                     	;# 
   461  010F                     	;# 
   462  0110                     	;# 
   463  0111                     	;# 
   464  0112                     	;# 
   465  0113                     	;# 
   466  0114                     	;# 
   467  0115                     	;# 
   468  0116                     	;# 
   469  0117                     	;# 
   470  0118                     	;# 
   471  0119                     	;# 
   472  011A                     	;# 
   473  011B                     	;# 
   474  011B                     	;# 
   475  011C                     	;# 
   476  018C                     	;# 
   477  018D                     	;# 
   478  018E                     	;# 
   479  018F                     	;# 
   480  0190                     	;# 
   481  0191                     	;# 
   482  0191                     	;# 
   483  0192                     	;# 
   484  0193                     	;# 
   485  0193                     	;# 
   486  0194                     	;# 
   487  0195                     	;# 
   488  0196                     	;# 
   489  0197                     	;# 
   490  0199                     	;# 
   491  0199                     	;# 
   492  0199                     	;# 
   493  019A                     	;# 
   494  019A                     	;# 
   495  019A                     	;# 
   496  019B                     	;# 
   497  019B                     	;# 
   498  019B                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019C                     	;# 
   502  019C                     	;# 
   503  019C                     	;# 
   504  019D                     	;# 
   505  019D                     	;# 
   506  019D                     	;# 
   507  019E                     	;# 
   508  019E                     	;# 
   509  019E                     	;# 
   510  019F                     	;# 
   511  019F                     	;# 
   512  019F                     	;# 
   513  019F                     	;# 
   514  019F                     	;# 
   515  020C                     	;# 
   516  020D                     	;# 
   517  020E                     	;# 
   518  020F                     	;# 
   519  0210                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  028C                     	;# 
   537  028D                     	;# 
   538  028E                     	;# 
   539  028F                     	;# 
   540  0290                     	;# 
   541  0291                     	;# 
   542  0291                     	;# 
   543  0292                     	;# 
   544  0293                     	;# 
   545  0293                     	;# 
   546  0298                     	;# 
   547  0298                     	;# 
   548  0299                     	;# 
   549  029A                     	;# 
   550  029A                     	;# 
   551  029E                     	;# 
   552  030C                     	;# 
   553  030D                     	;# 
   554  030E                     	;# 
   555  030F                     	;# 
   556  0310                     	;# 
   557  038C                     	;# 
   558  038D                     	;# 
   559  038E                     	;# 
   560  038F                     	;# 
   561  0390                     	;# 
   562  0391                     	;# 
   563  0392                     	;# 
   564  0393                     	;# 
   565  0394                     	;# 
   566  0395                     	;# 
   567  0396                     	;# 
   568  0397                     	;# 
   569  0398                     	;# 
   570  0399                     	;# 
   571  039D                     	;# 
   572  039E                     	;# 
   573  039F                     	;# 
   574  0415                     	;# 
   575  0416                     	;# 
   576  0417                     	;# 
   577  041C                     	;# 
   578  041D                     	;# 
   579  041E                     	;# 
   580  0498                     	;# 
   581  0498                     	;# 
   582  0499                     	;# 
   583  049A                     	;# 
   584  049B                     	;# 
   585  049B                     	;# 
   586  049C                     	;# 
   587  049D                     	;# 
   588  049E                     	;# 
   589  049F                     	;# 
   590  0511                     	;# 
   591  0515                     	;# 
   592  0617                     	;# 
   593  0618                     	;# 
   594  0619                     	;# 
   595  0619                     	;# 
   596  061A                     	;# 
   597  061B                     	;# 
   598  061C                     	;# 
   599  061C                     	;# 
   600  0691                     	;# 
   601  0692                     	;# 
   602  0693                     	;# 
   603  0694                     	;# 
   604  0695                     	;# 
   605  0696                     	;# 
   606  0697                     	;# 
   607  0698                     	;# 
   608  0699                     	;# 
   609  069A                     	;# 
   610  069B                     	;# 
   611  069C                     	;# 
   612  069D                     	;# 
   613  069E                     	;# 
   614  069F                     	;# 
   615  0E0F                     	;# 
   616  0E10                     	;# 
   617  0E11                     	;# 
   618  0E12                     	;# 
   619  0E13                     	;# 
   620  0E14                     	;# 
   621  0E15                     	;# 
   622  0E17                     	;# 
   623  0E20                     	;# 
   624  0E21                     	;# 
   625  0E22                     	;# 
   626  0E24                     	;# 
   627  0E25                     	;# 
   628  0E28                     	;# 
   629  0E29                     	;# 
   630  0E2A                     	;# 
   631  0E2B                     	;# 
   632  0E90                     	;# 
   633  0E91                     	;# 
   634  0E92                     	;# 
   635  0E93                     	;# 
   636  0E94                     	;# 
   637  0E95                     	;# 
   638  0E96                     	;# 
   639  0E97                     	;# 
   640  0E98                     	;# 
   641  0E99                     	;# 
   642  0E9A                     	;# 
   643  0E9B                     	;# 
   644  0E9C                     	;# 
   645  0E9D                     	;# 
   646  0E9E                     	;# 
   647  0E9F                     	;# 
   648  0EA0                     	;# 
   649  0EA1                     	;# 
   650  0EA2                     	;# 
   651  0EA3                     	;# 
   652  0EA4                     	;# 
   653  0EA5                     	;# 
   654  0EA6                     	;# 
   655  0EA7                     	;# 
   656  0EA8                     	;# 
   657  0EA9                     	;# 
   658  0EAA                     	;# 
   659  0EAB                     	;# 
   660  0EAC                     	;# 
   661  0EAD                     	;# 
   662  0EAE                     	;# 
   663  0EAF                     	;# 
   664  0EB0                     	;# 
   665  0EB1                     	;# 
   666  0EB2                     	;# 
   667  0F0F                     	;# 
   668  0F10                     	;# 
   669  0F11                     	;# 
   670  0F12                     	;# 
   671  0F13                     	;# 
   672  0F14                     	;# 
   673  0F15                     	;# 
   674  0F16                     	;# 
   675  0F17                     	;# 
   676  0F18                     	;# 
   677  0F19                     	;# 
   678  0F1A                     	;# 
   679  0F1B                     	;# 
   680  0F1C                     	;# 
   681  0F1D                     	;# 
   682  0F1E                     	;# 
   683  0F1F                     	;# 
   684  0F20                     	;# 
   685  0F21                     	;# 
   686  0F22                     	;# 
   687  0F23                     	;# 
   688  0F24                     	;# 
   689  0F25                     	;# 
   690  0F26                     	;# 
   691  0F27                     	;# 
   692  0F28                     	;# 
   693  0F29                     	;# 
   694  0F2A                     	;# 
   695  0F2B                     	;# 
   696  0F2C                     	;# 
   697  0F2D                     	;# 
   698  0F2E                     	;# 
   699  0F2F                     	;# 
   700  0F30                     	;# 
   701  0F31                     	;# 
   702  0F32                     	;# 
   703  0F33                     	;# 
   704  0F34                     	;# 
   705  0F35                     	;# 
   706  0F36                     	;# 
   707  0F37                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  000F                     	;# 
   735  0010                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0013                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  008F                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0093                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0098                     	;# 
   760  0099                     	;# 
   761  009A                     	;# 
   762  009B                     	;# 
   763  009B                     	;# 
   764  009C                     	;# 
   765  009D                     	;# 
   766  009E                     	;# 
   767  009F                     	;# 
   768  010C                     	;# 
   769  010D                     	;# 
   770  010E                     	;# 
   771  010F                     	;# 
   772  0110                     	;# 
   773  0111                     	;# 
   774  0112                     	;# 
   775  0113                     	;# 
   776  0114                     	;# 
   777  0115                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  0118                     	;# 
   781  0119                     	;# 
   782  011A                     	;# 
   783  011B                     	;# 
   784  011B                     	;# 
   785  011C                     	;# 
   786  018C                     	;# 
   787  018D                     	;# 
   788  018E                     	;# 
   789  018F                     	;# 
   790  0190                     	;# 
   791  0191                     	;# 
   792  0191                     	;# 
   793  0192                     	;# 
   794  0193                     	;# 
   795  0193                     	;# 
   796  0194                     	;# 
   797  0195                     	;# 
   798  0196                     	;# 
   799  0197                     	;# 
   800  0199                     	;# 
   801  0199                     	;# 
   802  0199                     	;# 
   803  019A                     	;# 
   804  019A                     	;# 
   805  019A                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019C                     	;# 
   813  019C                     	;# 
   814  019D                     	;# 
   815  019D                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019E                     	;# 
   819  019E                     	;# 
   820  019F                     	;# 
   821  019F                     	;# 
   822  019F                     	;# 
   823  019F                     	;# 
   824  019F                     	;# 
   825  020C                     	;# 
   826  020D                     	;# 
   827  020E                     	;# 
   828  020F                     	;# 
   829  0210                     	;# 
   830  0211                     	;# 
   831  0211                     	;# 
   832  0212                     	;# 
   833  0212                     	;# 
   834  0213                     	;# 
   835  0213                     	;# 
   836  0214                     	;# 
   837  0214                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0216                     	;# 
   843  0216                     	;# 
   844  0217                     	;# 
   845  0217                     	;# 
   846  028C                     	;# 
   847  028D                     	;# 
   848  028E                     	;# 
   849  028F                     	;# 
   850  0290                     	;# 
   851  0291                     	;# 
   852  0291                     	;# 
   853  0292                     	;# 
   854  0293                     	;# 
   855  0293                     	;# 
   856  0298                     	;# 
   857  0298                     	;# 
   858  0299                     	;# 
   859  029A                     	;# 
   860  029A                     	;# 
   861  029E                     	;# 
   862  030C                     	;# 
   863  030D                     	;# 
   864  030E                     	;# 
   865  030F                     	;# 
   866  0310                     	;# 
   867  038C                     	;# 
   868  038D                     	;# 
   869  038E                     	;# 
   870  038F                     	;# 
   871  0390                     	;# 
   872  0391                     	;# 
   873  0392                     	;# 
   874  0393                     	;# 
   875  0394                     	;# 
   876  0395                     	;# 
   877  0396                     	;# 
   878  0397                     	;# 
   879  0398                     	;# 
   880  0399                     	;# 
   881  039D                     	;# 
   882  039E                     	;# 
   883  039F                     	;# 
   884  0415                     	;# 
   885  0416                     	;# 
   886  0417                     	;# 
   887  041C                     	;# 
   888  041D                     	;# 
   889  041E                     	;# 
   890  0498                     	;# 
   891  0498                     	;# 
   892  0499                     	;# 
   893  049A                     	;# 
   894  049B                     	;# 
   895  049B                     	;# 
   896  049C                     	;# 
   897  049D                     	;# 
   898  049E                     	;# 
   899  049F                     	;# 
   900  0511                     	;# 
   901  0515                     	;# 
   902  0617                     	;# 
   903  0618                     	;# 
   904  0619                     	;# 
   905  0619                     	;# 
   906  061A                     	;# 
   907  061B                     	;# 
   908  061C                     	;# 
   909  061C                     	;# 
   910  0691                     	;# 
   911  0692                     	;# 
   912  0693                     	;# 
   913  0694                     	;# 
   914  0695                     	;# 
   915  0696                     	;# 
   916  0697                     	;# 
   917  0698                     	;# 
   918  0699                     	;# 
   919  069A                     	;# 
   920  069B                     	;# 
   921  069C                     	;# 
   922  069D                     	;# 
   923  069E                     	;# 
   924  069F                     	;# 
   925  0E0F                     	;# 
   926  0E10                     	;# 
   927  0E11                     	;# 
   928  0E12                     	;# 
   929  0E13                     	;# 
   930  0E14                     	;# 
   931  0E15                     	;# 
   932  0E17                     	;# 
   933  0E20                     	;# 
   934  0E21                     	;# 
   935  0E22                     	;# 
   936  0E24                     	;# 
   937  0E25                     	;# 
   938  0E28                     	;# 
   939  0E29                     	;# 
   940  0E2A                     	;# 
   941  0E2B                     	;# 
   942  0E90                     	;# 
   943  0E91                     	;# 
   944  0E92                     	;# 
   945  0E93                     	;# 
   946  0E94                     	;# 
   947  0E95                     	;# 
   948  0E96                     	;# 
   949  0E97                     	;# 
   950  0E98                     	;# 
   951  0E99                     	;# 
   952  0E9A                     	;# 
   953  0E9B                     	;# 
   954  0E9C                     	;# 
   955  0E9D                     	;# 
   956  0E9E                     	;# 
   957  0E9F                     	;# 
   958  0EA0                     	;# 
   959  0EA1                     	;# 
   960  0EA2                     	;# 
   961  0EA3                     	;# 
   962  0EA4                     	;# 
   963  0EA5                     	;# 
   964  0EA6                     	;# 
   965  0EA7                     	;# 
   966  0EA8                     	;# 
   967  0EA9                     	;# 
   968  0EAA                     	;# 
   969  0EAB                     	;# 
   970  0EAC                     	;# 
   971  0EAD                     	;# 
   972  0EAE                     	;# 
   973  0EAF                     	;# 
   974  0EB0                     	;# 
   975  0EB1                     	;# 
   976  0EB2                     	;# 
   977  0F0F                     	;# 
   978  0F10                     	;# 
   979  0F11                     	;# 
   980  0F12                     	;# 
   981  0F13                     	;# 
   982  0F14                     	;# 
   983  0F15                     	;# 
   984  0F16                     	;# 
   985  0F17                     	;# 
   986  0F18                     	;# 
   987  0F19                     	;# 
   988  0F1A                     	;# 
   989  0F1B                     	;# 
   990  0F1C                     	;# 
   991  0F1D                     	;# 
   992  0F1E                     	;# 
   993  0F1F                     	;# 
   994  0F20                     	;# 
   995  0F21                     	;# 
   996  0F22                     	;# 
   997  0F23                     	;# 
   998  0F24                     	;# 
   999  0F25                     	;# 
  1000  0F26                     	;# 
  1001  0F27                     	;# 
  1002  0F28                     	;# 
  1003  0F29                     	;# 
  1004  0F2A                     	;# 
  1005  0F2B                     	;# 
  1006  0F2C                     	;# 
  1007  0F2D                     	;# 
  1008  0F2E                     	;# 
  1009  0F2F                     	;# 
  1010  0F30                     	;# 
  1011  0F31                     	;# 
  1012  0F32                     	;# 
  1013  0F33                     	;# 
  1014  0F34                     	;# 
  1015  0F35                     	;# 
  1016  0F36                     	;# 
  1017  0F37                     	;# 
  1018  0FE4                     	;# 
  1019  0FE5                     	;# 
  1020  0FE6                     	;# 
  1021  0FE7                     	;# 
  1022  0FE8                     	;# 
  1023  0FE9                     	;# 
  1024  0FEA                     	;# 
  1025  0FEB                     	;# 
  1026  0FED                     	;# 
  1027  0FEE                     	;# 
  1028  0FEF                     	;# 
  1029  0000                     	;# 
  1030  0001                     	;# 
  1031  0002                     	;# 
  1032  0003                     	;# 
  1033  0004                     	;# 
  1034  0005                     	;# 
  1035  0006                     	;# 
  1036  0007                     	;# 
  1037  0008                     	;# 
  1038  0009                     	;# 
  1039  000A                     	;# 
  1040  000B                     	;# 
  1041  000C                     	;# 
  1042  000D                     	;# 
  1043  000E                     	;# 
  1044  000F                     	;# 
  1045  0010                     	;# 
  1046  0011                     	;# 
  1047  0012                     	;# 
  1048  0013                     	;# 
  1049  0015                     	;# 
  1050  0016                     	;# 
  1051  0016                     	;# 
  1052  0017                     	;# 
  1053  0018                     	;# 
  1054  0019                     	;# 
  1055  001A                     	;# 
  1056  001B                     	;# 
  1057  001C                     	;# 
  1058  008C                     	;# 
  1059  008D                     	;# 
  1060  008E                     	;# 
  1061  008F                     	;# 
  1062  0090                     	;# 
  1063  0091                     	;# 
  1064  0092                     	;# 
  1065  0093                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0097                     	;# 
  1069  0098                     	;# 
  1070  0099                     	;# 
  1071  009A                     	;# 
  1072  009B                     	;# 
  1073  009B                     	;# 
  1074  009C                     	;# 
  1075  009D                     	;# 
  1076  009E                     	;# 
  1077  009F                     	;# 
  1078  010C                     	;# 
  1079  010D                     	;# 
  1080  010E                     	;# 
  1081  010F                     	;# 
  1082  0110                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011A                     	;# 
  1093  011B                     	;# 
  1094  011B                     	;# 
  1095  011C                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  018F                     	;# 
  1100  0190                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0194                     	;# 
  1107  0195                     	;# 
  1108  0196                     	;# 
  1109  0197                     	;# 
  1110  0199                     	;# 
  1111  0199                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019A                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019D                     	;# 
  1126  019D                     	;# 
  1127  019E                     	;# 
  1128  019E                     	;# 
  1129  019E                     	;# 
  1130  019F                     	;# 
  1131  019F                     	;# 
  1132  019F                     	;# 
  1133  019F                     	;# 
  1134  019F                     	;# 
  1135  020C                     	;# 
  1136  020D                     	;# 
  1137  020E                     	;# 
  1138  020F                     	;# 
  1139  0210                     	;# 
  1140  0211                     	;# 
  1141  0211                     	;# 
  1142  0212                     	;# 
  1143  0212                     	;# 
  1144  0213                     	;# 
  1145  0213                     	;# 
  1146  0214                     	;# 
  1147  0214                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0215                     	;# 
  1151  0215                     	;# 
  1152  0216                     	;# 
  1153  0216                     	;# 
  1154  0217                     	;# 
  1155  0217                     	;# 
  1156  028C                     	;# 
  1157  028D                     	;# 
  1158  028E                     	;# 
  1159  028F                     	;# 
  1160  0290                     	;# 
  1161  0291                     	;# 
  1162  0291                     	;# 
  1163  0292                     	;# 
  1164  0293                     	;# 
  1165  0293                     	;# 
  1166  0298                     	;# 
  1167  0298                     	;# 
  1168  0299                     	;# 
  1169  029A                     	;# 
  1170  029A                     	;# 
  1171  029E                     	;# 
  1172  030C                     	;# 
  1173  030D                     	;# 
  1174  030E                     	;# 
  1175  030F                     	;# 
  1176  0310                     	;# 
  1177  038C                     	;# 
  1178  038D                     	;# 
  1179  038E                     	;# 
  1180  038F                     	;# 
  1181  0390                     	;# 
  1182  0391                     	;# 
  1183  0392                     	;# 
  1184  0393                     	;# 
  1185  0394                     	;# 
  1186  0395                     	;# 
  1187  0396                     	;# 
  1188  0397                     	;# 
  1189  0398                     	;# 
  1190  0399                     	;# 
  1191  039D                     	;# 
  1192  039E                     	;# 
  1193  039F                     	;# 
  1194  0415                     	;# 
  1195  0416                     	;# 
  1196  0417                     	;# 
  1197  041C                     	;# 
  1198  041D                     	;# 
  1199  041E                     	;# 
  1200  0498                     	;# 
  1201  0498                     	;# 
  1202  0499                     	;# 
  1203  049A                     	;# 
  1204  049B                     	;# 
  1205  049B                     	;# 
  1206  049C                     	;# 
  1207  049D                     	;# 
  1208  049E                     	;# 
  1209  049F                     	;# 
  1210  0511                     	;# 
  1211  0515                     	;# 
  1212  0617                     	;# 
  1213  0618                     	;# 
  1214  0619                     	;# 
  1215  0619                     	;# 
  1216  061A                     	;# 
  1217  061B                     	;# 
  1218  061C                     	;# 
  1219  061C                     	;# 
  1220  0691                     	;# 
  1221  0692                     	;# 
  1222  0693                     	;# 
  1223  0694                     	;# 
  1224  0695                     	;# 
  1225  0696                     	;# 
  1226  0697                     	;# 
  1227  0698                     	;# 
  1228  0699                     	;# 
  1229  069A                     	;# 
  1230  069B                     	;# 
  1231  069C                     	;# 
  1232  069D                     	;# 
  1233  069E                     	;# 
  1234  069F                     	;# 
  1235  0E0F                     	;# 
  1236  0E10                     	;# 
  1237  0E11                     	;# 
  1238  0E12                     	;# 
  1239  0E13                     	;# 
  1240  0E14                     	;# 
  1241  0E15                     	;# 
  1242  0E17                     	;# 
  1243  0E20                     	;# 
  1244  0E21                     	;# 
  1245  0E22                     	;# 
  1246  0E24                     	;# 
  1247  0E25                     	;# 
  1248  0E28                     	;# 
  1249  0E29                     	;# 
  1250  0E2A                     	;# 
  1251  0E2B                     	;# 
  1252  0E90                     	;# 
  1253  0E91                     	;# 
  1254  0E92                     	;# 
  1255  0E93                     	;# 
  1256  0E94                     	;# 
  1257  0E95                     	;# 
  1258  0E96                     	;# 
  1259  0E97                     	;# 
  1260  0E98                     	;# 
  1261  0E99                     	;# 
  1262  0E9A                     	;# 
  1263  0E9B                     	;# 
  1264  0E9C                     	;# 
  1265  0E9D                     	;# 
  1266  0E9E                     	;# 
  1267  0E9F                     	;# 
  1268  0EA0                     	;# 
  1269  0EA1                     	;# 
  1270  0EA2                     	;# 
  1271  0EA3                     	;# 
  1272  0EA4                     	;# 
  1273  0EA5                     	;# 
  1274  0EA6                     	;# 
  1275  0EA7                     	;# 
  1276  0EA8                     	;# 
  1277  0EA9                     	;# 
  1278  0EAA                     	;# 
  1279  0EAB                     	;# 
  1280  0EAC                     	;# 
  1281  0EAD                     	;# 
  1282  0EAE                     	;# 
  1283  0EAF                     	;# 
  1284  0EB0                     	;# 
  1285  0EB1                     	;# 
  1286  0EB2                     	;# 
  1287  0F0F                     	;# 
  1288  0F10                     	;# 
  1289  0F11                     	;# 
  1290  0F12                     	;# 
  1291  0F13                     	;# 
  1292  0F14                     	;# 
  1293  0F15                     	;# 
  1294  0F16                     	;# 
  1295  0F17                     	;# 
  1296  0F18                     	;# 
  1297  0F19                     	;# 
  1298  0F1A                     	;# 
  1299  0F1B                     	;# 
  1300  0F1C                     	;# 
  1301  0F1D                     	;# 
  1302  0F1E                     	;# 
  1303  0F1F                     	;# 
  1304  0F20                     	;# 
  1305  0F21                     	;# 
  1306  0F22                     	;# 
  1307  0F23                     	;# 
  1308  0F24                     	;# 
  1309  0F25                     	;# 
  1310  0F26                     	;# 
  1311  0F27                     	;# 
  1312  0F28                     	;# 
  1313  0F29                     	;# 
  1314  0F2A                     	;# 
  1315  0F2B                     	;# 
  1316  0F2C                     	;# 
  1317  0F2D                     	;# 
  1318  0F2E                     	;# 
  1319  0F2F                     	;# 
  1320  0F30                     	;# 
  1321  0F31                     	;# 
  1322  0F32                     	;# 
  1323  0F33                     	;# 
  1324  0F34                     	;# 
  1325  0F35                     	;# 
  1326  0F36                     	;# 
  1327  0F37                     	;# 
  1328  0FE4                     	;# 
  1329  0FE5                     	;# 
  1330  0FE6                     	;# 
  1331  0FE7                     	;# 
  1332  0FE8                     	;# 
  1333  0FE9                     	;# 
  1334  0FEA                     	;# 
  1335  0FEB                     	;# 
  1336  0FED                     	;# 
  1337  0FEE                     	;# 
  1338  0FEF                     	;_uartBuffer
  1339                           
  1340                           	psect	idataBANK0
  1341  0005                     __pidataBANK0:	
  1342                           
  1343                           ;initializer for _longitude
  1344  0005  34C1               	retlw	low (_lon| 0)
  1345                           
  1346                           	psect	idataBANK1
  1347  0004                     __pidataBANK1:	
  1348                           
  1349                           ;initializer for _latitude
  1350  0004  34C4               	retlw	low (_lat| 0)
  1351                           
  1352                           	psect	stringtext
  1353  1000                     __pstringtext:	
  1354  1000                     _dpowers:	
  1355  1000  3401               	retlw	1
  1356  1001  3400               	retlw	0
  1357  1002  3400               	retlw	0
  1358  1003  3400               	retlw	0
  1359  1004  340A               	retlw	10
  1360  1005  3400               	retlw	0
  1361  1006  3400               	retlw	0
  1362  1007  3400               	retlw	0
  1363  1008  3464               	retlw	100
  1364  1009  3400               	retlw	0
  1365  100A  3400               	retlw	0
  1366  100B  3400               	retlw	0
  1367  100C  34E8               	retlw	232
  1368  100D  3403               	retlw	3
  1369  100E  3400               	retlw	0
  1370  100F  3400               	retlw	0
  1371  1010  3410               	retlw	16
  1372  1011  3427               	retlw	39
  1373  1012  3400               	retlw	0
  1374  1013  3400               	retlw	0
  1375  1014  34A0               	retlw	160
  1376  1015  3486               	retlw	134
  1377  1016  3401               	retlw	1
  1378  1017  3400               	retlw	0
  1379  1018  3440               	retlw	64
  1380  1019  3442               	retlw	66
  1381  101A  340F               	retlw	15
  1382  101B  3400               	retlw	0
  1383  101C  3480               	retlw	128
  1384  101D  3496               	retlw	150
  1385  101E  3498               	retlw	152
  1386  101F  3400               	retlw	0
  1387  1020  3400               	retlw	0
  1388  1021  34E1               	retlw	225
  1389  1022  34F5               	retlw	245
  1390  1023  3405               	retlw	5
  1391  1024  3400               	retlw	0
  1392  1025  34CA               	retlw	202
  1393  1026  349A               	retlw	154
  1394  1027  343B               	retlw	59
  1395  1028                     __end_of_dpowers:	
  1396  000B                     _INTCONbits	set	11
  1397  000F                     _PORTD	set	15
  1398  0011                     _PIR1bits	set	17
  1399  007B                     _RD3	set	123
  1400  007A                     _RD2	set	122
  1401  007F                     _RD7	set	127
  1402  007E                     _RD6	set	126
  1403  007D                     _RD5	set	125
  1404  007C                     _RD4	set	124
  1405  0091                     _PIE1bits	set	145
  1406  008F                     _TRISD	set	143
  1407  008D                     _TRISBbits	set	141
  1408  0476                     _TRISC6	set	1142
  1409  0477                     _TRISC7	set	1143
  1410  04CF                     _SPLLEN	set	1231
  1411  04CE                     _IRCF3	set	1230
  1412  04CD                     _IRCF2	set	1229
  1413  04CC                     _IRCF1	set	1228
  1414  04CB                     _IRCF0	set	1227
  1415  04C9                     _SCS1	set	1225
  1416  04C8                     _SCS0	set	1224
  1417  018F                     _ANSELD	set	399
  1418  018D                     _ANSELBbits	set	397
  1419  019A                     _TX1REG	set	410
  1420  0199                     _RC1REG	set	409
  1421  019D                     _RC1STAbits	set	413
  1422  019B                     _SPBRG	set	411
  1423  0CF5                     _TXEN	set	3317
  1424  0CEC                     _CREN	set	3308
  1425  0CEF                     _SPEN	set	3311
  1426  0CF4                     _SYNC	set	3316
  1427  0CF2                     _BRGH	set	3314
  1428  0E24                     _RXPPSbits	set	3620
  1429  0E0F                     _PPSLOCKbits	set	3599
  1430  0E0F                     _PPSLOCK	set	3599
  1431  0E9A                     _RB2PPSbits	set	3738
  1432  1028                     STR_7:	
  1433  1028  3425               	retlw	37	;'%'
  1434  1029  346C               	retlw	108	;'l'
  1435  102A  3475               	retlw	117	;'u'
  1436  102B  342E               	retlw	46	;'.'
  1437  102C  3425               	retlw	37	;'%'
  1438  102D  3436               	retlw	54	;'6'
  1439  102E  342E               	retlw	46	;'.'
  1440  102F  3436               	retlw	54	;'6'
  1441  1030  346C               	retlw	108	;'l'
  1442  1031  3475               	retlw	117	;'u'
  1443  1032  3400               	retlw	0
  1444  1033                     STR_1:	
  1445  1033  3424               	retlw	36	;'$'
  1446  1034  3447               	retlw	71	;'G'
  1447  1035  3450               	retlw	80	;'P'
  1448  1036  3447               	retlw	71	;'G'
  1449  1037  344C               	retlw	76	;'L'
  1450  1038  344C               	retlw	76	;'L'
  1451  1039  3400               	retlw	0
  1452  103A                     STR_2:	
  1453  103A  342C               	retlw	44	;','
  1454  103B  3400               	retlw	0
  1455  103A                     
  1456                           ; #config settings
  1457  0000                     
  1458                           	psect	cinit
  1459  07DF                     start_initialization:	
  1460  07DF                     __initialization:		;BIGRAM
  1461                           
  1462                           ; Initialize objects allocated to BANK0
  1463  07DF  3180  2005  3187   	fcall	__pidataBANK0	;fetch initializer
  1464  07E2  00EF               	movwf	__pdataBANK0& (0+127)
  1465                           
  1466                           ; Initialize objects allocated to BANK1
  1467  07E3  0021               	movlb	1	; select bank1
  1468  07E4  3180  2004  3187   	fcall	__pidataBANK1	;fetch initializer
  1469  07E7  00CC               	movwf	__pdataBANK1& (0+127)
  1470                           
  1471                           ; Clear objects allocated to BIGRAM
  1472  07E8  30C4               	movlw	low (0+8900)
  1473  07E9  0084               	movwf	4
  1474  07EA  3022               	movlw	high (0+8900)
  1475  07EB  0085               	movwf	5
  1476  07EC  302C               	movlw	44
  1477  07ED  00FE               	movwf	btemp
  1478  07EE  3001               	movlw	1
  1479  07EF  00FF               	movwf	btemp+1
  1480  07F0  3188  2002  3187   	fcall	clear_ram0
  1481                           
  1482                           ; Clear objects allocated to BANK1
  1483  07F3  30A0               	movlw	low __pbssBANK1
  1484  07F4  0084               	movwf	4
  1485  07F5  3000               	movlw	high __pbssBANK1
  1486  07F6  0085               	movwf	5
  1487  07F7  3027               	movlw	39
  1488  07F8  00FE               	movwf	btemp
  1489  07F9  3000               	movlw	0
  1490  07FA  00FF               	movwf	btemp+1
  1491  07FB  3188  2002         	fcall	clear_ram0
  1492  07FD                     end_of_initialization:	
  1493                           ;End of C runtime variable initialization code
  1494                           
  1495  07FD                     __end_of__initialization:	
  1496  07FD  0020               	movlb	0
  1497  07FE  318B  2BF9         	ljmp	_main	;jump to C main() function
  1498                           
  1499                           	psect	dataBANK0
  1500  006F                     __pdataBANK0:	
  1501  006F                     _longitude:	
  1502  006F                     	ds	1
  1503                           
  1504                           	psect	bssBANK1
  1505  00A0                     __pbssBANK1:	
  1506  00A0                     _terminator:	
  1507  00A0                     	ds	2
  1508  00A2                     _i:	
  1509  00A2                     	ds	2
  1510  00A4                     _data:	
  1511  00A4                     	ds	2
  1512  00A6                     _d:	
  1513  00A6                     	ds	1
  1514  00A7                     _c:	
  1515  00A7                     	ds	1
  1516  00A8                     ftoa@buf:	
  1517  00A8                     	ds	17
  1518  00B9                     _conversionString:	
  1519  00B9                     	ds	8
  1520  00C1                     _lon:	
  1521  00C1                     	ds	3
  1522  00C4                     _lat:	
  1523  00C4                     	ds	3
  1524                           
  1525                           	psect	dataBANK1
  1526  00CC                     __pdataBANK1:	
  1527  00CC                     _latitude:	
  1528  00CC                     	ds	1
  1529                           
  1530                           	psect	clrtext
  1531  0802                     clear_ram0:	
  1532                           ;	Called with FSR0 containing the base address, and
  1533                           ;	btemp/btemp+1 has the size to clear
  1534                           
  1535  0802  0064               	clrwdt	;clear the watchdog before getting into this loop
  1536  0803                     clrloop0:	
  1537  0803  0180               	clrf	0	;clear RAM location pointed to by FSR
  1538  0804  3101               	addfsr 0,1
  1539  0805  3001               	movlw	1
  1540  0806  02FE               	subwf	126,f
  1541  0807  3000               	movlw	0
  1542  0808  3BFF               	subwfb	127,f
  1543  0809  087F               	movf	127,w
  1544  080A  047E               	iorwf	126,w
  1545  080B  1903               	btfsc	3,2
  1546  080C  3400               	retlw	0	;all done for this memory range, return
  1547  080D  2803               	goto	clrloop0	;have we reached the end yet?
  1548                           
  1549                           	psect	cstackBANK1
  1550  00C7                     __pcstackBANK1:	
  1551  00C7                     Lcd_Write_Float@status:	
  1552                           
  1553                           ; 2 bytes @ 0x0
  1554  00C7                     	ds	2
  1555  00C9                     Lcd_Write_Float@buf11:	
  1556                           
  1557                           ; 1 bytes @ 0x2
  1558  00C9                     	ds	1
  1559  00CA                     ??_main:	
  1560                           
  1561                           ; 1 bytes @ 0x3
  1562  00CA                     	ds	2
  1563                           
  1564                           	psect	cstackCOMMON
  1565  0070                     __pcstackCOMMON:	
  1566  0070                     ?_isdigit:	
  1567  0070                     ?_isspace:	
  1568                           ; 1 bit 
  1569                           
  1570  0070                     ?___ftge:	
  1571                           ; 1 bit 
  1572                           
  1573  0070                     ?_read_gps:	
  1574                           ; 1 bit 
  1575                           
  1576  0070                     ?_memset:	
  1577                           ; 1 bytes @ 0x0
  1578                           
  1579  0070                     ??_isdigit:	
  1580                           ; 1 bytes @ 0x0
  1581                           
  1582  0070                     ??_isspace:	
  1583                           ; 1 bytes @ 0x0
  1584                           
  1585  0070                     ?_internal_16:	
  1586                           ; 1 bytes @ 0x0
  1587                           
  1588  0070                     ??_internal_16:	
  1589                           ; 1 bytes @ 0x0
  1590                           
  1591  0070                     ?_EUSART_Read:	
  1592                           ; 1 bytes @ 0x0
  1593                           
  1594  0070                     ??_EUSART_Read:	
  1595                           ; 1 bytes @ 0x0
  1596                           
  1597  0070                     ?_EUSART_Read_Char:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600  0070                     ?_Lcd_Port:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  0070                     ??_Lcd_Port:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0070                     ?_Lcd_Cmd:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_Lcd_Clear:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ?_Lcd_Init:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_Lcd_Write_Char:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_Lcd_Write_String:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_initMain:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     ??_initMain:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ?_main:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ?___bmul:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_strlen:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_strchr:	
  1637                           ; 2 bytes @ 0x0
  1638                           
  1639  0070                     ?___wmul:	
  1640                           ; 2 bytes @ 0x0
  1641                           
  1642  0070                     ?___ftpack:	
  1643                           ; 2 bytes @ 0x0
  1644                           
  1645  0070                     ?___ftneg:	
  1646                           ; 3 bytes @ 0x0
  1647                           
  1648  0070                     ?___lmul:	
  1649                           ; 3 bytes @ 0x0
  1650                           
  1651  0070                     ?___aldiv:	
  1652                           ; 4 bytes @ 0x0
  1653                           
  1654  0070                     ?___lldiv:	
  1655                           ; 4 bytes @ 0x0
  1656                           
  1657  0070                     Lcd_Port@a:	
  1658                           ; 4 bytes @ 0x0
  1659                           
  1660  0070                     ___bmul@multiplicand:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     _isdigit$591:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     _isspace$594:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0070                     EUSART_Read_Char@Output:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672  0070                     ___wmul@multiplier:	
  1673                           ; 2 bytes @ 0x0
  1674                           
  1675  0070                     memset@c:	
  1676                           ; 2 bytes @ 0x0
  1677                           
  1678  0070                     strchr@ptr:	
  1679                           ; 2 bytes @ 0x0
  1680                           
  1681  0070                     strlen@s:	
  1682                           ; 2 bytes @ 0x0
  1683                           
  1684  0070                     ___ftpack@arg:	
  1685                           ; 2 bytes @ 0x0
  1686                           
  1687  0070                     ___ftge@ff1:	
  1688                           ; 3 bytes @ 0x0
  1689                           
  1690  0070                     ___ftneg@f1:	
  1691                           ; 3 bytes @ 0x0
  1692                           
  1693  0070                     ___lmul@multiplier:	
  1694                           ; 3 bytes @ 0x0
  1695                           
  1696  0070                     ___aldiv@divisor:	
  1697                           ; 4 bytes @ 0x0
  1698                           
  1699  0070                     ___lldiv@divisor:	
  1700                           ; 4 bytes @ 0x0
  1701                           
  1702                           
  1703                           ; 4 bytes @ 0x0
  1704  0070                     	ds	1
  1705  0071                     ??_Lcd_Cmd:	
  1706  0071                     ??_Lcd_Write_Char:	
  1707                           ; 1 bytes @ 0x1
  1708                           
  1709  0071                     ??___bmul:	
  1710                           ; 1 bytes @ 0x1
  1711                           
  1712  0071                     isdigit@c:	
  1713                           ; 1 bytes @ 0x1
  1714                           
  1715  0071                     isspace@c:	
  1716                           ; 1 bytes @ 0x1
  1717                           
  1718                           
  1719                           ; 1 bytes @ 0x1
  1720  0071                     	ds	1
  1721  0072                     ??_strlen:	
  1722  0072                     ??_EUSART_Read_Char:	
  1723                           ; 1 bytes @ 0x2
  1724                           
  1725  0072                     Lcd_Cmd@a:	
  1726                           ; 1 bytes @ 0x2
  1727                           
  1728  0072                     Lcd_Write_Char@temp:	
  1729                           ; 1 bytes @ 0x2
  1730                           
  1731  0072                     ___bmul@product:	
  1732                           ; 1 bytes @ 0x2
  1733                           
  1734  0072                     ___wmul@multiplicand:	
  1735                           ; 1 bytes @ 0x2
  1736                           
  1737  0072                     memset@n:	
  1738                           ; 2 bytes @ 0x2
  1739                           
  1740  0072                     strchr@chr:	
  1741                           ; 2 bytes @ 0x2
  1742                           
  1743                           
  1744                           ; 2 bytes @ 0x2
  1745  0072                     	ds	1
  1746  0073                     ??_Lcd_Clear:	
  1747  0073                     ?_Lcd_Set_Cursor:	
  1748                           ; 1 bytes @ 0x3
  1749                           
  1750  0073                     ??_Lcd_Init:	
  1751                           ; 1 bytes @ 0x3
  1752                           
  1753  0073                     ??___ftneg:	
  1754                           ; 1 bytes @ 0x3
  1755                           
  1756  0073                     Lcd_Set_Cursor@b:	
  1757                           ; 1 bytes @ 0x3
  1758                           
  1759  0073                     Lcd_Write_Char@y:	
  1760                           ; 1 bytes @ 0x3
  1761                           
  1762  0073                     ___bmul@multiplier:	
  1763                           ; 1 bytes @ 0x3
  1764                           
  1765  0073                     ___ftpack@exp:	
  1766                           ; 1 bytes @ 0x3
  1767                           
  1768  0073                     ___ftge@ff2:	
  1769                           ; 1 bytes @ 0x3
  1770                           
  1771                           
  1772                           ; 3 bytes @ 0x3
  1773  0073                     	ds	1
  1774  0074                     ??_memset:	
  1775  0074                     ??_strchr:	
  1776                           ; 1 bytes @ 0x4
  1777                           
  1778  0074                     ??_Lcd_Set_Cursor:	
  1779                           ; 1 bytes @ 0x4
  1780                           
  1781  0074                     ??___wmul:	
  1782                           ; 1 bytes @ 0x4
  1783                           
  1784  0074                     Lcd_Write_Char@a:	
  1785                           ; 1 bytes @ 0x4
  1786                           
  1787  0074                     ___ftpack@sign:	
  1788                           ; 1 bytes @ 0x4
  1789                           
  1790  0074                     ___wmul@product:	
  1791                           ; 1 bytes @ 0x4
  1792                           
  1793  0074                     strlen@cp:	
  1794                           ; 2 bytes @ 0x4
  1795                           
  1796  0074                     ___lmul@multiplicand:	
  1797                           ; 2 bytes @ 0x4
  1798                           
  1799  0074                     ___aldiv@dividend:	
  1800                           ; 4 bytes @ 0x4
  1801                           
  1802  0074                     ___lldiv@dividend:	
  1803                           ; 4 bytes @ 0x4
  1804                           
  1805                           
  1806                           ; 4 bytes @ 0x4
  1807  0074                     	ds	1
  1808  0075                     ??___ftpack:	
  1809  0075                     ??_Lcd_Write_String:	
  1810                           ; 1 bytes @ 0x5
  1811                           
  1812  0075                     memset@p:	
  1813                           ; 1 bytes @ 0x5
  1814                           
  1815                           
  1816                           ; 1 bytes @ 0x5
  1817  0075                     	ds	1
  1818  0076                     ??___ftge:	
  1819  0076                     ?_strncmp:	
  1820                           ; 1 bytes @ 0x6
  1821                           
  1822  0076                     Lcd_Set_Cursor@a:	
  1823                           ; 2 bytes @ 0x6
  1824                           
  1825  0076                     memset@p1:	
  1826                           ; 1 bytes @ 0x6
  1827                           
  1828  0076                     Lcd_Write_String@i:	
  1829                           ; 1 bytes @ 0x6
  1830                           
  1831  0076                     strncmp@s1:	
  1832                           ; 2 bytes @ 0x6
  1833                           
  1834                           
  1835                           ; 2 bytes @ 0x6
  1836  0076                     	ds	1
  1837  0077                     Lcd_Set_Cursor@z:	
  1838                           
  1839                           ; 1 bytes @ 0x7
  1840  0077                     	ds	1
  1841  0078                     ??___lmul:	
  1842  0078                     ??___aldiv:	
  1843                           ; 1 bytes @ 0x8
  1844                           
  1845  0078                     ??___lldiv:	
  1846                           ; 1 bytes @ 0x8
  1847                           
  1848  0078                     ?___altoft:	
  1849                           ; 1 bytes @ 0x8
  1850                           
  1851  0078                     ?___ftdiv:	
  1852                           ; 3 bytes @ 0x8
  1853                           
  1854  0078                     ?___ftmul:	
  1855                           ; 3 bytes @ 0x8
  1856                           
  1857  0078                     ?___lltoft:	
  1858                           ; 3 bytes @ 0x8
  1859                           
  1860  0078                     Lcd_Set_Cursor@y:	
  1861                           ; 3 bytes @ 0x8
  1862                           
  1863  0078                     Lcd_Write_String@a:	
  1864                           ; 1 bytes @ 0x8
  1865                           
  1866  0078                     strncmp@s2:	
  1867                           ; 1 bytes @ 0x8
  1868                           
  1869  0078                     ___ftdiv@f2:	
  1870                           ; 2 bytes @ 0x8
  1871                           
  1872  0078                     ___ftmul@f1:	
  1873                           ; 3 bytes @ 0x8
  1874                           
  1875  0078                     ___lmul@product:	
  1876                           ; 3 bytes @ 0x8
  1877                           
  1878  0078                     ___altoft@c:	
  1879                           ; 4 bytes @ 0x8
  1880                           
  1881  0078                     ___lltoft@c:	
  1882                           ; 4 bytes @ 0x8
  1883                           
  1884                           
  1885                           ; 4 bytes @ 0x8
  1886  0078                     	ds	1
  1887  0079                     Lcd_Set_Cursor@temp:	
  1888  0079                     EUSART_Initialize@x:	
  1889                           ; 1 bytes @ 0x9
  1890                           
  1891  0079                     ___lldiv@quotient:	
  1892                           ; 2 bytes @ 0x9
  1893                           
  1894                           
  1895                           ; 4 bytes @ 0x9
  1896  0079                     	ds	1
  1897  007A                     strncmp@len:	
  1898                           
  1899                           ; 2 bytes @ 0xA
  1900  007A                     	ds	1
  1901  007B                     ___ftdiv@f1:	
  1902  007B                     ___ftmul@f2:	
  1903                           ; 3 bytes @ 0xB
  1904                           
  1905                           
  1906                           ; 3 bytes @ 0xB
  1907  007B                     	ds	1
  1908  007C                     ??_strncmp:	
  1909  007C                     ??___altoft:	
  1910                           ; 1 bytes @ 0xC
  1911                           
  1912  007C                     ??___lltoft:	
  1913                           ; 1 bytes @ 0xC
  1914                           
  1915                           
  1916                           ; 1 bytes @ 0xC
  1917  007C                     	ds	1
  1918  007D                     ___lldiv@counter:	
  1919  007D                     ___lltoft@exp:	
  1920                           ; 1 bytes @ 0xD
  1921                           
  1922                           
  1923                           ; 1 bytes @ 0xD
  1924  007D                     	ds	1
  1925  007E                     ??_atof:	
  1926  007E                     ??___ftsub:	
  1927                           ; 1 bytes @ 0xE
  1928                           
  1929                           
  1930                           	psect	cstackBANK0
  1931  0020                     __pcstackBANK0:	
  1932                           ; 1 bytes @ 0xE
  1933                           
  1934  0020                     ??___ftdiv:	
  1935  0020                     ??___ftmul:	
  1936                           ; 1 bytes @ 0x0
  1937                           
  1938  0020                     ?_strstr:	
  1939                           ; 1 bytes @ 0x0
  1940                           
  1941  0020                     ?___llmod:	
  1942                           ; 2 bytes @ 0x0
  1943                           
  1944  0020                     ___aldiv@counter:	
  1945                           ; 4 bytes @ 0x0
  1946                           
  1947  0020                     ___altoft@exp:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0020                     strstr@s1:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0020                     ___llmod@divisor:	
  1954                           ; 2 bytes @ 0x0
  1955                           
  1956                           
  1957                           ; 4 bytes @ 0x0
  1958  0020                     	ds	1
  1959  0021                     ___aldiv@sign:	
  1960  0021                     ___altoft@sign:	
  1961                           ; 1 bytes @ 0x1
  1962                           
  1963                           
  1964                           ; 1 bytes @ 0x1
  1965  0021                     	ds	1
  1966  0022                     strstr@s2:	
  1967  0022                     ___aldiv@quotient:	
  1968                           ; 2 bytes @ 0x2
  1969                           
  1970                           
  1971                           ; 4 bytes @ 0x2
  1972  0022                     	ds	2
  1973  0024                     ??_strstr:	
  1974  0024                     ___ftdiv@cntr:	
  1975                           ; 1 bytes @ 0x4
  1976                           
  1977  0024                     ___ftmul@exp:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980  0024                     ___llmod@dividend:	
  1981                           ; 1 bytes @ 0x4
  1982                           
  1983                           
  1984                           ; 4 bytes @ 0x4
  1985  0024                     	ds	1
  1986  0025                     ___ftdiv@f3:	
  1987  0025                     ___ftmul@f3_as_product:	
  1988                           ; 3 bytes @ 0x5
  1989                           
  1990                           
  1991                           ; 3 bytes @ 0x5
  1992  0025                     	ds	1
  1993  0026                     ?_EUSART_Initialize:	
  1994  0026                     EUSART_Initialize@baudrate:	
  1995                           ; 1 bytes @ 0x6
  1996                           
  1997                           
  1998                           ; 4 bytes @ 0x6
  1999  0026                     	ds	2
  2000  0028                     ??___llmod:	
  2001  0028                     ___ftdiv@exp:	
  2002                           ; 1 bytes @ 0x8
  2003                           
  2004  0028                     ___ftmul@cntr:	
  2005                           ; 1 bytes @ 0x8
  2006                           
  2007                           
  2008                           ; 1 bytes @ 0x8
  2009  0028                     	ds	1
  2010  0029                     ___ftdiv@sign:	
  2011  0029                     ___ftmul@sign:	
  2012                           ; 1 bytes @ 0x9
  2013                           
  2014  0029                     ___llmod@counter:	
  2015                           ; 1 bytes @ 0x9
  2016                           
  2017                           
  2018                           ; 1 bytes @ 0x9
  2019  0029                     	ds	1
  2020  002A                     ??_EUSART_Initialize:	
  2021  002A                     ?_sprintf:	
  2022                           ; 1 bytes @ 0xA
  2023                           
  2024  002A                     ?_strtod:	
  2025                           ; 2 bytes @ 0xA
  2026                           
  2027  002A                     ?___fttol:	
  2028                           ; 3 bytes @ 0xA
  2029                           
  2030  002A                     sprintf@f:	
  2031                           ; 4 bytes @ 0xA
  2032                           
  2033  002A                     strtod@s:	
  2034                           ; 2 bytes @ 0xA
  2035                           
  2036  002A                     ___fttol@f1:	
  2037                           ; 2 bytes @ 0xA
  2038                           
  2039                           
  2040                           ; 3 bytes @ 0xA
  2041  002A                     	ds	2
  2042  002C                     strtod@res:	
  2043                           
  2044                           ; 1 bytes @ 0xC
  2045  002C                     	ds	1
  2046  002D                     ??_strtod:	
  2047                           
  2048                           ; 1 bytes @ 0xD
  2049  002D                     	ds	1
  2050  002E                     ??___fttol:	
  2051                           
  2052                           ; 1 bytes @ 0xE
  2053  002E                     	ds	3
  2054  0031                     _strtod$512:	
  2055                           
  2056                           ; 3 bytes @ 0x11
  2057  0031                     	ds	1
  2058  0032                     ___fttol@sign1:	
  2059                           
  2060                           ; 1 bytes @ 0x12
  2061  0032                     	ds	1
  2062  0033                     ___fttol@lval:	
  2063                           
  2064                           ; 4 bytes @ 0x13
  2065  0033                     	ds	1
  2066  0034                     ??_sprintf:	
  2067  0034                     _strtod$513:	
  2068                           ; 1 bytes @ 0x14
  2069                           
  2070                           
  2071                           ; 3 bytes @ 0x14
  2072  0034                     	ds	3
  2073  0037                     ___fttol@exp1:	
  2074  0037                     _strtod$514:	
  2075                           ; 1 bytes @ 0x17
  2076                           
  2077                           
  2078                           ; 3 bytes @ 0x17
  2079  0037                     	ds	3
  2080  003A                     sprintf@flag:	
  2081  003A                     _strtod$515:	
  2082                           ; 1 bytes @ 0x1A
  2083                           
  2084                           
  2085                           ; 3 bytes @ 0x1A
  2086  003A                     	ds	1
  2087  003B                     sprintf@ap:	
  2088                           
  2089                           ; 1 bytes @ 0x1B
  2090  003B                     	ds	1
  2091  003C                     sprintf@val:	
  2092                           
  2093                           ; 4 bytes @ 0x1C
  2094  003C                     	ds	1
  2095  003D                     _strtod$511:	
  2096                           
  2097                           ; 2 bytes @ 0x1D
  2098  003D                     	ds	2
  2099  003F                     strtod@eexp:	
  2100                           
  2101                           ; 1 bytes @ 0x1F
  2102  003F                     	ds	1
  2103  0040                     sprintf@sp:	
  2104  0040                     strtod@flags:	
  2105                           ; 1 bytes @ 0x20
  2106                           
  2107                           
  2108                           ; 1 bytes @ 0x20
  2109  0040                     	ds	1
  2110  0041                     strtod@expon:	
  2111  0041                     sprintf@width:	
  2112                           ; 1 bytes @ 0x21
  2113                           
  2114                           
  2115                           ; 2 bytes @ 0x21
  2116  0041                     	ds	1
  2117  0042                     strtod@_u:	
  2118                           
  2119                           ; 4 bytes @ 0x22
  2120  0042                     	ds	1
  2121  0043                     sprintf@prec:	
  2122                           
  2123                           ; 2 bytes @ 0x23
  2124  0043                     	ds	2
  2125  0045                     sprintf@c:	
  2126                           
  2127                           ; 1 bytes @ 0x25
  2128  0045                     	ds	1
  2129  0046                     ?_atof:	
  2130  0046                     atof@s:	
  2131                           ; 3 bytes @ 0x26
  2132                           
  2133                           
  2134                           ; 2 bytes @ 0x26
  2135  0046                     	ds	3
  2136  0049                     ?___ftadd:	
  2137  0049                     ___ftadd@f1:	
  2138                           ; 3 bytes @ 0x29
  2139                           
  2140                           
  2141                           ; 3 bytes @ 0x29
  2142  0049                     	ds	3
  2143  004C                     ___ftadd@f2:	
  2144                           
  2145                           ; 3 bytes @ 0x2C
  2146  004C                     	ds	3
  2147  004F                     ??___ftadd:	
  2148                           
  2149                           ; 1 bytes @ 0x2F
  2150  004F                     	ds	4
  2151  0053                     ___ftadd@sign:	
  2152                           
  2153                           ; 1 bytes @ 0x33
  2154  0053                     	ds	1
  2155  0054                     ___ftadd@exp2:	
  2156                           
  2157                           ; 1 bytes @ 0x34
  2158  0054                     	ds	1
  2159  0055                     ___ftadd@exp1:	
  2160                           
  2161                           ; 1 bytes @ 0x35
  2162  0055                     	ds	1
  2163  0056                     ??_read_gps:	
  2164  0056                     ?___ftsub:	
  2165                           ; 1 bytes @ 0x36
  2166                           
  2167  0056                     ___ftsub@f2:	
  2168                           ; 3 bytes @ 0x36
  2169                           
  2170                           
  2171                           ; 3 bytes @ 0x36
  2172  0056                     	ds	3
  2173  0059                     ___ftsub@f1:	
  2174                           
  2175                           ; 3 bytes @ 0x39
  2176  0059                     	ds	1
  2177  005A                     _read_gps$870:	
  2178                           
  2179                           ; 3 bytes @ 0x3A
  2180  005A                     	ds	2
  2181  005C                     ?_ftoa:	
  2182  005C                     ftoa@f:	
  2183                           ; 1 bytes @ 0x3C
  2184                           
  2185                           
  2186                           ; 3 bytes @ 0x3C
  2187  005C                     	ds	3
  2188  005F                     ftoa@status:	
  2189                           
  2190                           ; 1 bytes @ 0x3F
  2191  005F                     	ds	1
  2192  0060                     ??_ftoa:	
  2193                           
  2194                           ; 1 bytes @ 0x40
  2195  0060                     	ds	1
  2196  0061                     ftoa@rem:	
  2197                           
  2198                           ; 4 bytes @ 0x41
  2199  0061                     	ds	4
  2200  0065                     ftoa@l:	
  2201                           
  2202                           ; 4 bytes @ 0x45
  2203  0065                     	ds	4
  2204  0069                     ftoa@cp:	
  2205                           
  2206                           ; 1 bytes @ 0x49
  2207  0069                     	ds	1
  2208  006A                     ?_Lcd_Write_Float:	
  2209  006A                     Lcd_Write_Float@f:	
  2210                           ; 1 bytes @ 0x4A
  2211                           
  2212                           
  2213                           ; 3 bytes @ 0x4A
  2214  006A                     	ds	3
  2215  006D                     ??_Lcd_Write_Float:	
  2216                           
  2217                           ; 1 bytes @ 0x4D
  2218  006D                     	ds	2
  2219                           
  2220                           	psect	maintext
  2221  0BF9                     __pmaintext:	
  2222 ;;
  2223 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2224 ;;
  2225 ;; *************** function _main *****************
  2226 ;; Defined at:
  2227 ;;		line 114 in file "Main.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;		None
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : B1F/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2243 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2244 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2245 ;;Total ram usage:        2 bytes
  2246 ;; Hardware stack levels required when called:    5
  2247 ;; This function calls:
  2248 ;;		_EUSART_Initialize
  2249 ;;		_Lcd_Clear
  2250 ;;		_Lcd_Init
  2251 ;;		_Lcd_Set_Cursor
  2252 ;;		_Lcd_Write_Float
  2253 ;;		_initMain
  2254 ;;		_read_gps
  2255 ;; This function is called by:
  2256 ;;		Startup code after reset
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           
  2261                           ;psect for function _main
  2262  0BF9                     _main:	
  2263                           
  2264                           ;Main.c: 115: initMain();
  2265                           
  2266                           ;incstack = 0
  2267                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2268  0BF9  3189  215F  318B   	fcall	_initMain
  2269                           
  2270                           ;Main.c: 116: Lcd_Init();
  2271  0BFC  318A  229B  318B   	fcall	_Lcd_Init
  2272                           
  2273                           ;Main.c: 117: Lcd_Clear();
  2274  0BFF  3197  27D1  318B   	fcall	_Lcd_Clear
  2275                           
  2276                           ;Main.c: 120: EUSART_Initialize(9600);
  2277  0C02  3000               	movlw	0
  2278  0C03  0020               	movlb	0	; select bank0
  2279  0C04  00A9               	movwf	EUSART_Initialize@baudrate+3
  2280  0C05  3000               	movlw	0
  2281  0C06  00A8               	movwf	EUSART_Initialize@baudrate+2
  2282  0C07  3025               	movlw	37
  2283  0C08  00A7               	movwf	EUSART_Initialize@baudrate+1
  2284  0C09  3080               	movlw	128
  2285  0C0A  00A6               	movwf	EUSART_Initialize@baudrate
  2286  0C0B  318D  25FF  318B   	fcall	_EUSART_Initialize
  2287                           
  2288                           ;Main.c: 123: _delay((unsigned long)((100)*(16000000/4000.0)));
  2289  0C0E  3003               	movlw	3
  2290  0C0F  0021               	movlb	1	; select bank1
  2291  0C10  00CB               	movwf	(??_main^(0+128)+1)
  2292  0C11  3008               	movlw	8
  2293  0C12  00CA               	movwf	??_main^(0+128)
  2294  0C13  3077               	movlw	119
  2295  0C14                     u4177:	
  2296  0C14  0B89               	decfsz	9,f
  2297  0C15  2C14               	goto	u4177
  2298  0C16  0BCA               	decfsz	??_main^(0+128),f
  2299  0C17  2C14               	goto	u4177
  2300  0C18  0BCB               	decfsz	(??_main^(0+128)+1),f
  2301  0C19  2C14               	goto	u4177
  2302  0C1A                     l3161:	
  2303                           ;Main.c: 126: while(1){
  2304                           
  2305                           
  2306                           ;Main.c: 128: Lcd_Set_Cursor(1,1);
  2307  0C1A  01F3               	clrf	Lcd_Set_Cursor@b
  2308  0C1B  0AF3               	incf	Lcd_Set_Cursor@b,f
  2309  0C1C  3001               	movlw	1
  2310  0C1D  318A  225B  318B   	fcall	_Lcd_Set_Cursor
  2311                           
  2312                           ;Main.c: 130: read_gps();
  2313  0C20  3183  233F  318B   	fcall	_read_gps
  2314                           
  2315                           ;Main.c: 133: Lcd_Write_Float(*latitude);
  2316  0C23  0021               	movlb	1	; select bank1
  2317  0C24  084C               	movf	_latitude^(0+128),w
  2318  0C25  0086               	movwf	6
  2319  0C26  0187               	clrf	7
  2320  0C27  3F40               	moviw [0]fsr1
  2321  0C28  0020               	movlb	0	; select bank0
  2322  0C29  00EA               	movwf	Lcd_Write_Float@f
  2323  0C2A  3F41               	moviw [1]fsr1
  2324  0C2B  00EB               	movwf	Lcd_Write_Float@f+1
  2325  0C2C  3F42               	moviw [2]fsr1
  2326  0C2D  00EC               	movwf	Lcd_Write_Float@f+2
  2327  0C2E  3188  2063  318B   	fcall	_Lcd_Write_Float
  2328                           
  2329                           ;Main.c: 135: Lcd_Set_Cursor(2,1);
  2330  0C31  01F3               	clrf	Lcd_Set_Cursor@b
  2331  0C32  0AF3               	incf	Lcd_Set_Cursor@b,f
  2332  0C33  3002               	movlw	2
  2333  0C34  318A  225B  318B   	fcall	_Lcd_Set_Cursor
  2334                           
  2335                           ;Main.c: 138: Lcd_Write_Float(*longitude);
  2336  0C37  0020               	movlb	0	; select bank0
  2337  0C38  086F               	movf	_longitude,w
  2338  0C39  0086               	movwf	6
  2339  0C3A  0187               	clrf	7
  2340  0C3B  3F40               	moviw [0]fsr1
  2341  0C3C  00EA               	movwf	Lcd_Write_Float@f
  2342  0C3D  3F41               	moviw [1]fsr1
  2343  0C3E  00EB               	movwf	Lcd_Write_Float@f+1
  2344  0C3F  3F42               	moviw [2]fsr1
  2345  0C40  00EC               	movwf	Lcd_Write_Float@f+2
  2346  0C41  3188  2063  318B   	fcall	_Lcd_Write_Float
  2347                           
  2348                           ;Main.c: 140: _delay((unsigned long)((2000)*(16000000/4000.0)));
  2349  0C44  3029               	movlw	41
  2350  0C45  0021               	movlb	1	; select bank1
  2351  0C46  00CB               	movwf	(??_main^(0+128)+1)
  2352  0C47  3096               	movlw	150
  2353  0C48  00CA               	movwf	??_main^(0+128)
  2354  0C49  307F               	movlw	127
  2355  0C4A                     u4187:	
  2356  0C4A  0B89               	decfsz	9,f
  2357  0C4B  2C4A               	goto	u4187
  2358  0C4C  0BCA               	decfsz	??_main^(0+128),f
  2359  0C4D  2C4A               	goto	u4187
  2360  0C4E  0BCB               	decfsz	(??_main^(0+128)+1),f
  2361  0C4F  2C4A               	goto	u4187
  2362                           
  2363                           ;Main.c: 141: Lcd_Clear();
  2364  0C50  3197  27D1  318B   	fcall	_Lcd_Clear
  2365  0C53  2C1A               	goto	l3161
  2366  0C54                     __end_of_main:	
  2367                           ;Main.c: 142: }
  2368                           ;Main.c: 145: return;
  2369                           
  2370                           
  2371                           	psect	text1
  2372  033F                     __ptext1:	
  2373 ;; *************** function _read_gps *****************
  2374 ;; Defined at:
  2375 ;;		line 160 in file "Main.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      void 
  2382 ;; Registers used:
  2383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2390 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2391 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2392 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2393 ;;Total ram usage:        7 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    4
  2396 ;; This function calls:
  2397 ;;		_EUSART_Read_Char
  2398 ;;		___ftadd
  2399 ;;		___ftdiv
  2400 ;;		___ftmul
  2401 ;;		_atof
  2402 ;;		_memset
  2403 ;;		_strstr
  2404 ;; This function is called by:
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           
  2410                           ;psect for function _read_gps
  2411  033F                     _read_gps:	
  2412                           
  2413                           ;Main.c: 163: for(i=0; i<sizeof(uartBuffer)-1; i++)
  2414                           
  2415                           ;incstack = 0
  2416                           ; Regs used in _read_gps: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2417  033F  0021               	movlb	1	; select bank1
  2418  0340  01A2               	clrf	_i^(0+128)
  2419  0341  01A3               	clrf	(_i+1)^(0+128)
  2420  0342  3001               	movlw	1
  2421  0343  0223               	subwf	(_i+1)^(0+128),w
  2422  0344  302B               	movlw	43
  2423  0345  1903               	skipnz
  2424  0346  0222               	subwf	_i^(0+128),w
  2425  0347  1803               	btfsc	3,0
  2426  0348  2B7A               	goto	l3057
  2427  0349                     l3049:	
  2428                           
  2429                           ;Main.c: 164: {
  2430                           ;Main.c: 165: d = EUSART_Read_Char(c);
  2431  0349  0827               	movf	_c^(0+128),w	;volatile
  2432  034A  0020               	movlb	0	; select bank0
  2433  034B  00D6               	movwf	??_read_gps
  2434  034C  01D7               	clrf	??_read_gps+1
  2435  034D  0856               	movf	??_read_gps,w
  2436  034E  00F0               	movwf	EUSART_Read_Char@Output
  2437  034F  0857               	movf	??_read_gps+1,w
  2438  0350  00F1               	movwf	EUSART_Read_Char@Output+1
  2439  0351  3197  27EA  3183   	fcall	_EUSART_Read_Char
  2440  0354  0020               	movlb	0	; select bank0
  2441  0355  00D8               	movwf	??_read_gps+2
  2442  0356  0858               	movf	??_read_gps+2,w
  2443  0357  0021               	movlb	1	; select bank1
  2444  0358  00A6               	movwf	_d^(0+128)	;volatile
  2445                           
  2446                           ;Main.c: 166: uartBuffer[i] = d;
  2447  0359  30C4               	movlw	196
  2448  035A  0020               	movlb	0	; select bank0
  2449  035B  00D6               	movwf	??_read_gps
  2450  035C  3022               	movlw	34
  2451  035D  00D7               	movwf	??_read_gps+1
  2452  035E  0021               	movlb	1	; select bank1
  2453  035F  0822               	movf	_i^(0+128),w
  2454  0360  0020               	movlb	0	; select bank0
  2455  0361  0756               	addwf	??_read_gps,w
  2456  0362  00D8               	movwf	??_read_gps+2
  2457  0363  0021               	movlb	1	; select bank1
  2458  0364  0823               	movf	(_i+1)^(0+128),w
  2459  0365  0020               	movlb	0	; select bank0
  2460  0366  3D57               	addwfc	??_read_gps+1,w
  2461  0367  00D9               	movwf	??_read_gps+3
  2462  0368  0858               	movf	??_read_gps+2,w
  2463  0369  0086               	movwf	6
  2464  036A  0859               	movf	??_read_gps+3,w
  2465  036B  0087               	movwf	7
  2466  036C  0021               	movlb	1	; select bank1
  2467  036D  0826               	movf	_d^(0+128),w	;volatile
  2468  036E  0081               	movwf	1
  2469  036F  3001               	movlw	1
  2470  0370  07A2               	addwf	_i^(0+128),f
  2471  0371  3000               	movlw	0
  2472  0372  3DA3               	addwfc	(_i+1)^(0+128),f
  2473  0373  3001               	movlw	1
  2474  0374  0223               	subwf	(_i+1)^(0+128),w
  2475  0375  302B               	movlw	43
  2476  0376  1903               	skipnz
  2477  0377  0222               	subwf	_i^(0+128),w
  2478  0378  1C03               	skipc
  2479  0379  2B49               	goto	l3049
  2480  037A                     l3057:	
  2481                           
  2482                           ;Main.c: 167: }
  2483                           ;Main.c: 170: uartBuffer[sizeof(uartBuffer)-1] = '\0';
  2484  037A  30EF               	movlw	239
  2485  037B  0086               	movwf	6
  2486  037C  3023               	movlw	35
  2487  037D  0087               	movwf	7
  2488  037E  0181               	clrf	1
  2489                           
  2490                           ;Main.c: 174: data = strstr(uartBuffer, "$GPGLL");
  2491  037F  30C4               	movlw	196
  2492  0380  0020               	movlb	0	; select bank0
  2493  0381  00A0               	movwf	strstr@s1
  2494  0382  3022               	movlw	34
  2495  0383  00A1               	movwf	strstr@s1+1
  2496  0384  3033               	movlw	low (STR_1| (0+32768))
  2497  0385  00A2               	movwf	strstr@s2
  2498  0386  3090               	movlw	high (STR_1| (0+32768))
  2499  0387  00A3               	movwf	strstr@s2+1
  2500  0388  318B  2362  3183   	fcall	_strstr
  2501  038B  0020               	movlb	0	; select bank0
  2502  038C  0821               	movf	?_strstr+1,w
  2503  038D  0021               	movlb	1	; select bank1
  2504  038E  00A5               	movwf	(_data+1)^(0+128)
  2505  038F  0020               	movlb	0	; select bank0
  2506  0390  0820               	movf	?_strstr,w
  2507  0391  0021               	movlb	1	; select bank1
  2508  0392  00A4               	movwf	_data^(0+128)
  2509                           
  2510                           ;Main.c: 177: if(data == (0))
  2511  0393  0824               	movf	_data^(0+128),w
  2512  0394  0425               	iorwf	(_data+1)^(0+128),w
  2513  0395  1903               	btfsc	3,2
  2514  0396  0008               	return
  2515                           
  2516                           ;Main.c: 180: }
  2517                           ;Main.c: 183: terminator = strstr(data,",");
  2518                           
  2519                           ;Main.c: 178: {
  2520                           ;Main.c: 179: return;
  2521  0397  0825               	movf	(_data+1)^(0+128),w
  2522  0398  0020               	movlb	0	; select bank0
  2523  0399  00A1               	movwf	strstr@s1+1
  2524  039A  0021               	movlb	1	; select bank1
  2525  039B  0824               	movf	_data^(0+128),w
  2526  039C  0020               	movlb	0	; select bank0
  2527  039D  00A0               	movwf	strstr@s1
  2528  039E  303A               	movlw	low (STR_2| (0+32768))
  2529  039F  00A2               	movwf	strstr@s2
  2530  03A0  3090               	movlw	high (STR_2| (0+32768))
  2531  03A1  00A3               	movwf	strstr@s2+1
  2532  03A2  318B  2362  3183   	fcall	_strstr
  2533  03A5  0020               	movlb	0	; select bank0
  2534  03A6  0821               	movf	?_strstr+1,w
  2535  03A7  0021               	movlb	1	; select bank1
  2536  03A8  00A1               	movwf	(_terminator+1)^(0+128)
  2537  03A9  0020               	movlb	0	; select bank0
  2538  03AA  0820               	movf	?_strstr,w
  2539  03AB  0021               	movlb	1	; select bank1
  2540  03AC  00A0               	movwf	_terminator^(0+128)
  2541                           
  2542                           ;Main.c: 187: if(terminator == (0))
  2543  03AD  0820               	movf	_terminator^(0+128),w
  2544  03AE  0421               	iorwf	(_terminator+1)^(0+128),w
  2545  03AF  1903               	btfsc	3,2
  2546  03B0  0008               	return
  2547                           
  2548                           ;Main.c: 190: }
  2549                           ;Main.c: 195: if(data[7] == ',')
  2550                           
  2551                           ;Main.c: 188: {
  2552                           ;Main.c: 189: return;
  2553  03B1  0824               	movf	_data^(0+128),w
  2554  03B2  0086               	movwf	6
  2555  03B3  0825               	movf	(_data+1)^(0+128),w
  2556  03B4  0087               	movwf	7
  2557  03B5  3147               	addfsr 1,7
  2558  03B6  302C               	movlw	44
  2559  03B7  0601               	xorwf	1,w
  2560  03B8  1903               	btfsc	3,2
  2561  03B9  0008               	return
  2562                           
  2563                           ;Main.c: 198: }
  2564                           ;Main.c: 206: data = terminator+1;
  2565                           
  2566                           ;Main.c: 196: {
  2567                           ;Main.c: 197: return;
  2568  03BA  0820               	movf	_terminator^(0+128),w
  2569  03BB  3E01               	addlw	1
  2570  03BC  00A4               	movwf	_data^(0+128)
  2571  03BD  3000               	movlw	0
  2572  03BE  3D21               	addwfc	(_terminator+1)^(0+128),w
  2573  03BF  00A5               	movwf	(_data+1)^(0+128)
  2574                           
  2575                           ;Main.c: 208: terminator = strstr(data,",");
  2576  03C0  0825               	movf	(_data+1)^(0+128),w
  2577  03C1  0020               	movlb	0	; select bank0
  2578  03C2  00A1               	movwf	strstr@s1+1
  2579  03C3  0021               	movlb	1	; select bank1
  2580  03C4  0824               	movf	_data^(0+128),w
  2581  03C5  0020               	movlb	0	; select bank0
  2582  03C6  00A0               	movwf	strstr@s1
  2583  03C7  303A               	movlw	low (STR_2| (0+32768))
  2584  03C8  00A2               	movwf	strstr@s2
  2585  03C9  3090               	movlw	high (STR_2| (0+32768))
  2586  03CA  00A3               	movwf	strstr@s2+1
  2587  03CB  318B  2362  3183   	fcall	_strstr
  2588  03CE  0020               	movlb	0	; select bank0
  2589  03CF  0821               	movf	?_strstr+1,w
  2590  03D0  0021               	movlb	1	; select bank1
  2591  03D1  00A1               	movwf	(_terminator+1)^(0+128)
  2592  03D2  0020               	movlb	0	; select bank0
  2593  03D3  0820               	movf	?_strstr,w
  2594  03D4  0021               	movlb	1	; select bank1
  2595  03D5  00A0               	movwf	_terminator^(0+128)
  2596                           
  2597                           ;Main.c: 210: if(terminator == (0))
  2598  03D6  0820               	movf	_terminator^(0+128),w
  2599  03D7  0421               	iorwf	(_terminator+1)^(0+128),w
  2600  03D8  1903               	btfsc	3,2
  2601  03D9  0008               	return
  2602                           
  2603                           ;Main.c: 213: }
  2604                           ;Main.c: 215: memset(conversionString,0,sizeof(conversionString));
  2605                           
  2606                           ;Main.c: 211: {
  2607                           ;Main.c: 212: return;
  2608  03DA  3000               	movlw	0
  2609  03DB  00F0               	movwf	memset@c
  2610  03DC  00F1               	movwf	memset@c+1
  2611  03DD  3008               	movlw	8
  2612  03DE  00F2               	movwf	memset@n
  2613  03DF  3000               	movlw	0
  2614  03E0  00F3               	movwf	memset@n+1
  2615  03E1  30B9               	movlw	(low (_conversionString| 0))& (0+255)
  2616  03E2  3188  20AB  3183   	fcall	_memset
  2617                           
  2618                           ;Main.c: 216: __builtin_memcpy(conversionString,data,2);
  2619  03E5  30B9               	movlw	low (_conversionString| 0)
  2620  03E6  0086               	movwf	6
  2621  03E7  0187               	clrf	7
  2622  03E8  0021               	movlb	1	; select bank1
  2623  03E9  0824               	movf	_data^(0+128),w
  2624  03EA  0084               	movwf	4
  2625  03EB  0825               	movf	(_data+1)^(0+128),w
  2626  03EC  0085               	movwf	5
  2627  03ED  3002               	movlw	2
  2628  03EE  0020               	movlb	0	; select bank0
  2629  03EF  00D6               	movwf	??_read_gps
  2630  03F0                     u409m0:	
  2631  03F0  0012               	moviw fsr0++
  2632  03F1  001E               	movwi fsr1++
  2633  03F2  0BD6               	decfsz	??_read_gps,f
  2634  03F3  2BF0               	goto	u409m0
  2635                           
  2636                           ;Main.c: 217: *latitude = atof(conversionString);
  2637  03F4  30B9               	movlw	low _conversionString
  2638  03F5  0020               	movlb	0	; select bank0
  2639  03F6  00C6               	movwf	atof@s
  2640  03F7  3000               	movlw	high _conversionString
  2641  03F8  00C7               	movwf	atof@s+1
  2642  03F9  3188  201C  3183   	fcall	_atof
  2643  03FC  0021               	movlb	1	; select bank1
  2644  03FD  084C               	movf	_latitude^(0+128),w
  2645  03FE  0086               	movwf	6
  2646  03FF  0187               	clrf	7
  2647  0400  0020               	movlb	0	; select bank0
  2648  0401  0846               	movf	?_atof,w
  2649  0402  3FC0               	movwi [0]fsr1
  2650  0403  0847               	movf	?_atof+1,w
  2651  0404  3FC1               	movwi [1]fsr1
  2652  0405  0848               	movf	?_atof+2,w
  2653  0406  3FC2               	movwi [2]fsr1
  2654                           
  2655                           ;Main.c: 219: data += 2;
  2656  0407  3002               	movlw	2
  2657  0408  0021               	movlb	1	; select bank1
  2658  0409  07A4               	addwf	_data^(0+128),f
  2659  040A  3000               	movlw	0
  2660  040B  3DA5               	addwfc	(_data+1)^(0+128),f
  2661                           
  2662                           ;Main.c: 220: *terminator = '\0';
  2663  040C  0820               	movf	_terminator^(0+128),w
  2664  040D  0086               	movwf	6
  2665  040E  0821               	movf	(_terminator+1)^(0+128),w
  2666  040F  0087               	movwf	7
  2667  0410  0181               	clrf	1
  2668                           
  2669                           ;Main.c: 221: *latitude += (atof(data)/60);
  2670  0411  0825               	movf	(_data+1)^(0+128),w
  2671  0412  0020               	movlb	0	; select bank0
  2672  0413  00C7               	movwf	atof@s+1
  2673  0414  0021               	movlb	1	; select bank1
  2674  0415  0824               	movf	_data^(0+128),w
  2675  0416  0020               	movlb	0	; select bank0
  2676  0417  00C6               	movwf	atof@s
  2677  0418  3188  201C  3183   	fcall	_atof
  2678  041B  0020               	movlb	0	; select bank0
  2679  041C  0846               	movf	?_atof,w
  2680  041D  00DA               	movwf	_read_gps$870
  2681  041E  0847               	movf	?_atof+1,w
  2682  041F  00DB               	movwf	_read_gps$870+1
  2683  0420  0848               	movf	?_atof+2,w
  2684  0421  00DC               	movwf	_read_gps$870+2
  2685                           
  2686                           ;Main.c: 221: *latitude += (atof(data)/60);
  2687  0422  085A               	movf	_read_gps$870,w
  2688  0423  00FB               	movwf	___ftdiv@f1
  2689  0424  085B               	movf	_read_gps$870+1,w
  2690  0425  00FC               	movwf	___ftdiv@f1+1
  2691  0426  085C               	movf	_read_gps$870+2,w
  2692  0427  00FD               	movwf	___ftdiv@f1+2
  2693  0428  3000               	movlw	0
  2694  0429  00F8               	movwf	___ftdiv@f2
  2695  042A  3070               	movlw	112
  2696  042B  00F9               	movwf	___ftdiv@f2+1
  2697  042C  3042               	movlw	66
  2698  042D  00FA               	movwf	___ftdiv@f2+2
  2699  042E  318E  26A5  3183   	fcall	___ftdiv
  2700  0431  0878               	movf	?___ftdiv,w
  2701  0432  0020               	movlb	0	; select bank0
  2702  0433  00C9               	movwf	___ftadd@f1
  2703  0434  0879               	movf	?___ftdiv+1,w
  2704  0435  00CA               	movwf	___ftadd@f1+1
  2705  0436  087A               	movf	?___ftdiv+2,w
  2706  0437  00CB               	movwf	___ftadd@f1+2
  2707  0438  0021               	movlb	1	; select bank1
  2708  0439  084C               	movf	_latitude^(0+128),w
  2709  043A  0086               	movwf	6
  2710  043B  0187               	clrf	7
  2711  043C  3F40               	moviw [0]fsr1
  2712  043D  0020               	movlb	0	; select bank0
  2713  043E  00CC               	movwf	___ftadd@f2
  2714  043F  3F41               	moviw [1]fsr1
  2715  0440  00CD               	movwf	___ftadd@f2+1
  2716  0441  3F42               	moviw [2]fsr1
  2717  0442  00CE               	movwf	___ftadd@f2+2
  2718  0443  3180  206A  3183   	fcall	___ftadd
  2719  0446  0021               	movlb	1	; select bank1
  2720  0447  084C               	movf	_latitude^(0+128),w
  2721  0448  0086               	movwf	6
  2722  0449  0187               	clrf	7
  2723  044A  0020               	movlb	0	; select bank0
  2724  044B  0849               	movf	?___ftadd,w
  2725  044C  3FC0               	movwi [0]fsr1
  2726  044D  084A               	movf	?___ftadd+1,w
  2727  044E  3FC1               	movwi [1]fsr1
  2728  044F  084B               	movf	?___ftadd+2,w
  2729  0450  3FC2               	movwi [2]fsr1
  2730                           
  2731                           ;Main.c: 223: data = terminator+1;
  2732  0451  0021               	movlb	1	; select bank1
  2733  0452  0820               	movf	_terminator^(0+128),w
  2734  0453  3E01               	addlw	1
  2735  0454  00A4               	movwf	_data^(0+128)
  2736  0455  3000               	movlw	0
  2737  0456  3D21               	addwfc	(_terminator+1)^(0+128),w
  2738  0457  00A5               	movwf	(_data+1)^(0+128)
  2739                           
  2740                           ;Main.c: 224: terminator = strstr(data,",");
  2741  0458  0825               	movf	(_data+1)^(0+128),w
  2742  0459  0020               	movlb	0	; select bank0
  2743  045A  00A1               	movwf	strstr@s1+1
  2744  045B  0021               	movlb	1	; select bank1
  2745  045C  0824               	movf	_data^(0+128),w
  2746  045D  0020               	movlb	0	; select bank0
  2747  045E  00A0               	movwf	strstr@s1
  2748  045F  303A               	movlw	low (STR_2| (0+32768))
  2749  0460  00A2               	movwf	strstr@s2
  2750  0461  3090               	movlw	high (STR_2| (0+32768))
  2751  0462  00A3               	movwf	strstr@s2+1
  2752  0463  318B  2362  3183   	fcall	_strstr
  2753  0466  0020               	movlb	0	; select bank0
  2754  0467  0821               	movf	?_strstr+1,w
  2755  0468  0021               	movlb	1	; select bank1
  2756  0469  00A1               	movwf	(_terminator+1)^(0+128)
  2757  046A  0020               	movlb	0	; select bank0
  2758  046B  0820               	movf	?_strstr,w
  2759  046C  0021               	movlb	1	; select bank1
  2760  046D  00A0               	movwf	_terminator^(0+128)
  2761                           
  2762                           ;Main.c: 225: if(terminator == (0))
  2763  046E  0820               	movf	_terminator^(0+128),w
  2764  046F  0421               	iorwf	(_terminator+1)^(0+128),w
  2765  0470  1903               	btfsc	3,2
  2766  0471  0008               	return
  2767                           
  2768                           ;Main.c: 228: }
  2769                           ;Main.c: 229: if(*data == 'S')
  2770                           
  2771                           ;Main.c: 226: {
  2772                           ;Main.c: 227: return;
  2773  0472  0824               	movf	_data^(0+128),w
  2774  0473  0086               	movwf	6
  2775  0474  0825               	movf	(_data+1)^(0+128),w
  2776  0475  0087               	movwf	7
  2777  0476  3053               	movlw	83
  2778  0477  0601               	xorwf	1,w
  2779  0478  1D03               	btfss	3,2
  2780  0479  2C96               	goto	l3109
  2781                           
  2782                           ;Main.c: 230: {
  2783                           ;Main.c: 231: *latitude *= -1;
  2784  047A  3000               	movlw	0
  2785  047B  00F8               	movwf	___ftmul@f1
  2786  047C  3080               	movlw	128
  2787  047D  00F9               	movwf	___ftmul@f1+1
  2788  047E  30BF               	movlw	191
  2789  047F  00FA               	movwf	___ftmul@f1+2
  2790  0480  084C               	movf	_latitude^(0+128),w
  2791  0481  0086               	movwf	6
  2792  0482  0187               	clrf	7
  2793  0483  3F40               	moviw [0]fsr1
  2794  0484  00FB               	movwf	___ftmul@f2
  2795  0485  3F41               	moviw [1]fsr1
  2796  0486  00FC               	movwf	___ftmul@f2+1
  2797  0487  3F42               	moviw [2]fsr1
  2798  0488  00FD               	movwf	___ftmul@f2+2
  2799  0489  318F  274D  3183   	fcall	___ftmul
  2800  048C  0021               	movlb	1	; select bank1
  2801  048D  084C               	movf	_latitude^(0+128),w
  2802  048E  0086               	movwf	6
  2803  048F  0187               	clrf	7
  2804  0490  0878               	movf	?___ftmul,w
  2805  0491  3FC0               	movwi [0]fsr1
  2806  0492  0879               	movf	?___ftmul+1,w
  2807  0493  3FC1               	movwi [1]fsr1
  2808  0494  087A               	movf	?___ftmul+2,w
  2809  0495  3FC2               	movwi [2]fsr1
  2810  0496                     l3109:	
  2811                           
  2812                           ;Main.c: 232: }
  2813                           ;Main.c: 234: data = terminator+1;
  2814  0496  0820               	movf	_terminator^(0+128),w
  2815  0497  3E01               	addlw	1
  2816  0498  00A4               	movwf	_data^(0+128)
  2817  0499  3000               	movlw	0
  2818  049A  3D21               	addwfc	(_terminator+1)^(0+128),w
  2819  049B  00A5               	movwf	(_data+1)^(0+128)
  2820                           
  2821                           ;Main.c: 235: terminator = strstr(data,",");
  2822  049C  0825               	movf	(_data+1)^(0+128),w
  2823  049D  0020               	movlb	0	; select bank0
  2824  049E  00A1               	movwf	strstr@s1+1
  2825  049F  0021               	movlb	1	; select bank1
  2826  04A0  0824               	movf	_data^(0+128),w
  2827  04A1  0020               	movlb	0	; select bank0
  2828  04A2  00A0               	movwf	strstr@s1
  2829  04A3  303A               	movlw	low (STR_2| (0+32768))
  2830  04A4  00A2               	movwf	strstr@s2
  2831  04A5  3090               	movlw	high (STR_2| (0+32768))
  2832  04A6  00A3               	movwf	strstr@s2+1
  2833  04A7  318B  2362  3183   	fcall	_strstr
  2834  04AA  0020               	movlb	0	; select bank0
  2835  04AB  0821               	movf	?_strstr+1,w
  2836  04AC  0021               	movlb	1	; select bank1
  2837  04AD  00A1               	movwf	(_terminator+1)^(0+128)
  2838  04AE  0020               	movlb	0	; select bank0
  2839  04AF  0820               	movf	?_strstr,w
  2840  04B0  0021               	movlb	1	; select bank1
  2841  04B1  00A0               	movwf	_terminator^(0+128)
  2842                           
  2843                           ;Main.c: 236: if(terminator == (0))
  2844  04B2  0820               	movf	_terminator^(0+128),w
  2845  04B3  0421               	iorwf	(_terminator+1)^(0+128),w
  2846  04B4  1903               	btfsc	3,2
  2847  04B5  0008               	return
  2848                           
  2849                           ;Main.c: 239: }
  2850                           ;Main.c: 240: memset(conversionString,0,sizeof(conversionString));
  2851                           
  2852                           ;Main.c: 237: {
  2853                           ;Main.c: 238: return;
  2854  04B6  3000               	movlw	0
  2855  04B7  00F0               	movwf	memset@c
  2856  04B8  00F1               	movwf	memset@c+1
  2857  04B9  3008               	movlw	8
  2858  04BA  00F2               	movwf	memset@n
  2859  04BB  3000               	movlw	0
  2860  04BC  00F3               	movwf	memset@n+1
  2861  04BD  30B9               	movlw	(low (_conversionString| 0))& (0+255)
  2862  04BE  3188  20AB  3183   	fcall	_memset
  2863                           
  2864                           ;Main.c: 241: __builtin_memcpy(conversionString,data,3);
  2865  04C1  30B9               	movlw	low (_conversionString| 0)
  2866  04C2  0086               	movwf	6
  2867  04C3  0187               	clrf	7
  2868  04C4  0021               	movlb	1	; select bank1
  2869  04C5  0824               	movf	_data^(0+128),w
  2870  04C6  0084               	movwf	4
  2871  04C7  0825               	movf	(_data+1)^(0+128),w
  2872  04C8  0085               	movwf	5
  2873  04C9  3003               	movlw	3
  2874  04CA  0020               	movlb	0	; select bank0
  2875  04CB  00D6               	movwf	??_read_gps
  2876  04CC                     u413m0:	
  2877  04CC  0012               	moviw fsr0++
  2878  04CD  001E               	movwi fsr1++
  2879  04CE  0BD6               	decfsz	??_read_gps,f
  2880  04CF  2CCC               	goto	u413m0
  2881                           
  2882                           ;Main.c: 242: *longitude = atof(conversionString);
  2883  04D0  30B9               	movlw	low _conversionString
  2884  04D1  0020               	movlb	0	; select bank0
  2885  04D2  00C6               	movwf	atof@s
  2886  04D3  3000               	movlw	high _conversionString
  2887  04D4  00C7               	movwf	atof@s+1
  2888  04D5  3188  201C  3183   	fcall	_atof
  2889  04D8  0020               	movlb	0	; select bank0
  2890  04D9  086F               	movf	_longitude,w
  2891  04DA  0086               	movwf	6
  2892  04DB  0187               	clrf	7
  2893  04DC  0846               	movf	?_atof,w
  2894  04DD  3FC0               	movwi [0]fsr1
  2895  04DE  0847               	movf	?_atof+1,w
  2896  04DF  3FC1               	movwi [1]fsr1
  2897  04E0  0848               	movf	?_atof+2,w
  2898  04E1  3FC2               	movwi [2]fsr1
  2899                           
  2900                           ;Main.c: 244: data += 3;
  2901  04E2  3003               	movlw	3
  2902  04E3  0021               	movlb	1	; select bank1
  2903  04E4  07A4               	addwf	_data^(0+128),f
  2904  04E5  3000               	movlw	0
  2905  04E6  3DA5               	addwfc	(_data+1)^(0+128),f
  2906                           
  2907                           ;Main.c: 245: *terminator = '\0';
  2908  04E7  0820               	movf	_terminator^(0+128),w
  2909  04E8  0086               	movwf	6
  2910  04E9  0821               	movf	(_terminator+1)^(0+128),w
  2911  04EA  0087               	movwf	7
  2912  04EB  0181               	clrf	1
  2913                           
  2914                           ;Main.c: 246: *longitude += (atof(data)/60);
  2915  04EC  0825               	movf	(_data+1)^(0+128),w
  2916  04ED  0020               	movlb	0	; select bank0
  2917  04EE  00C7               	movwf	atof@s+1
  2918  04EF  0021               	movlb	1	; select bank1
  2919  04F0  0824               	movf	_data^(0+128),w
  2920  04F1  0020               	movlb	0	; select bank0
  2921  04F2  00C6               	movwf	atof@s
  2922  04F3  3188  201C  3183   	fcall	_atof
  2923  04F6  0020               	movlb	0	; select bank0
  2924  04F7  0846               	movf	?_atof,w
  2925  04F8  00DA               	movwf	_read_gps$870
  2926  04F9  0847               	movf	?_atof+1,w
  2927  04FA  00DB               	movwf	_read_gps$870+1
  2928  04FB  0848               	movf	?_atof+2,w
  2929  04FC  00DC               	movwf	_read_gps$870+2
  2930                           
  2931                           ;Main.c: 246: *longitude += (atof(data)/60);
  2932  04FD  085A               	movf	_read_gps$870,w
  2933  04FE  00FB               	movwf	___ftdiv@f1
  2934  04FF  085B               	movf	_read_gps$870+1,w
  2935  0500  00FC               	movwf	___ftdiv@f1+1
  2936  0501  085C               	movf	_read_gps$870+2,w
  2937  0502  00FD               	movwf	___ftdiv@f1+2
  2938  0503  3000               	movlw	0
  2939  0504  00F8               	movwf	___ftdiv@f2
  2940  0505  3070               	movlw	112
  2941  0506  00F9               	movwf	___ftdiv@f2+1
  2942  0507  3042               	movlw	66
  2943  0508  00FA               	movwf	___ftdiv@f2+2
  2944  0509  318E  26A5  3183   	fcall	___ftdiv
  2945  050C  0878               	movf	?___ftdiv,w
  2946  050D  0020               	movlb	0	; select bank0
  2947  050E  00C9               	movwf	___ftadd@f1
  2948  050F  0879               	movf	?___ftdiv+1,w
  2949  0510  00CA               	movwf	___ftadd@f1+1
  2950  0511  087A               	movf	?___ftdiv+2,w
  2951  0512  00CB               	movwf	___ftadd@f1+2
  2952  0513  086F               	movf	_longitude,w
  2953  0514  0086               	movwf	6
  2954  0515  0187               	clrf	7
  2955  0516  3F40               	moviw [0]fsr1
  2956  0517  00CC               	movwf	___ftadd@f2
  2957  0518  3F41               	moviw [1]fsr1
  2958  0519  00CD               	movwf	___ftadd@f2+1
  2959  051A  3F42               	moviw [2]fsr1
  2960  051B  00CE               	movwf	___ftadd@f2+2
  2961  051C  3180  206A  3183   	fcall	___ftadd
  2962  051F  0020               	movlb	0	; select bank0
  2963  0520  086F               	movf	_longitude,w
  2964  0521  0086               	movwf	6
  2965  0522  0187               	clrf	7
  2966  0523  0849               	movf	?___ftadd,w
  2967  0524  3FC0               	movwi [0]fsr1
  2968  0525  084A               	movf	?___ftadd+1,w
  2969  0526  3FC1               	movwi [1]fsr1
  2970  0527  084B               	movf	?___ftadd+2,w
  2971  0528  3FC2               	movwi [2]fsr1
  2972                           
  2973                           ;Main.c: 248: data = terminator+1;
  2974  0529  0021               	movlb	1	; select bank1
  2975  052A  0820               	movf	_terminator^(0+128),w
  2976  052B  3E01               	addlw	1
  2977  052C  00A4               	movwf	_data^(0+128)
  2978  052D  3000               	movlw	0
  2979  052E  3D21               	addwfc	(_terminator+1)^(0+128),w
  2980  052F  00A5               	movwf	(_data+1)^(0+128)
  2981                           
  2982                           ;Main.c: 249: terminator = strstr(data,",");
  2983  0530  0825               	movf	(_data+1)^(0+128),w
  2984  0531  0020               	movlb	0	; select bank0
  2985  0532  00A1               	movwf	strstr@s1+1
  2986  0533  0021               	movlb	1	; select bank1
  2987  0534  0824               	movf	_data^(0+128),w
  2988  0535  0020               	movlb	0	; select bank0
  2989  0536  00A0               	movwf	strstr@s1
  2990  0537  303A               	movlw	low (STR_2| (0+32768))
  2991  0538  00A2               	movwf	strstr@s2
  2992  0539  3090               	movlw	high (STR_2| (0+32768))
  2993  053A  00A3               	movwf	strstr@s2+1
  2994  053B  318B  2362  3183   	fcall	_strstr
  2995  053E  0020               	movlb	0	; select bank0
  2996  053F  0821               	movf	?_strstr+1,w
  2997  0540  0021               	movlb	1	; select bank1
  2998  0541  00A1               	movwf	(_terminator+1)^(0+128)
  2999  0542  0020               	movlb	0	; select bank0
  3000  0543  0820               	movf	?_strstr,w
  3001  0544  0021               	movlb	1	; select bank1
  3002  0545  00A0               	movwf	_terminator^(0+128)
  3003                           
  3004                           ;Main.c: 250: if(terminator == (0))
  3005  0546  0820               	movf	_terminator^(0+128),w
  3006  0547  0421               	iorwf	(_terminator+1)^(0+128),w
  3007  0548  1903               	btfsc	3,2
  3008  0549  0008               	return
  3009                           
  3010                           ;Main.c: 253: }
  3011                           ;Main.c: 254: if(*data == 'W')
  3012                           
  3013                           ;Main.c: 251: {
  3014                           ;Main.c: 252: return;
  3015  054A  0824               	movf	_data^(0+128),w
  3016  054B  0086               	movwf	6
  3017  054C  0825               	movf	(_data+1)^(0+128),w
  3018  054D  0087               	movwf	7
  3019  054E  3057               	movlw	87
  3020  054F  0601               	xorwf	1,w
  3021  0550  1D03               	btfss	3,2
  3022  0551  0008               	return
  3023                           
  3024                           ;Main.c: 255: {
  3025                           ;Main.c: 256: *longitude *= -1;
  3026  0552  3000               	movlw	0
  3027  0553  00F8               	movwf	___ftmul@f1
  3028  0554  3080               	movlw	128
  3029  0555  00F9               	movwf	___ftmul@f1+1
  3030  0556  30BF               	movlw	191
  3031  0557  00FA               	movwf	___ftmul@f1+2
  3032  0558  0020               	movlb	0	; select bank0
  3033  0559  086F               	movf	_longitude,w
  3034  055A  0086               	movwf	6
  3035  055B  0187               	clrf	7
  3036  055C  3F40               	moviw [0]fsr1
  3037  055D  00FB               	movwf	___ftmul@f2
  3038  055E  3F41               	moviw [1]fsr1
  3039  055F  00FC               	movwf	___ftmul@f2+1
  3040  0560  3F42               	moviw [2]fsr1
  3041  0561  00FD               	movwf	___ftmul@f2+2
  3042  0562  318F  274D         	fcall	___ftmul
  3043  0564  0020               	movlb	0	; select bank0
  3044  0565  086F               	movf	_longitude,w
  3045  0566  0086               	movwf	6
  3046  0567  0187               	clrf	7
  3047  0568  0878               	movf	?___ftmul,w
  3048  0569  3FC0               	movwi [0]fsr1
  3049  056A  0879               	movf	?___ftmul+1,w
  3050  056B  3FC1               	movwi [1]fsr1
  3051  056C  087A               	movf	?___ftmul+2,w
  3052  056D  3FC2               	movwi [2]fsr1
  3053  056E  0008               	return
  3054  056F                     __end_of_read_gps:	
  3055                           
  3056                           	psect	text2
  3057  0B62                     __ptext2:	
  3058 ;; *************** function _strstr *****************
  3059 ;; Defined at:
  3060 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3063 ;;		 -> NULL(0), uartBuffer(300), 
  3064 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3065 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  3066 ;;		 -> STR_2(2), STR_1(7), 
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  2    0[BANK0 ] PTR unsigned char 
  3071 ;; Registers used:
  3072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3082 ;;Total ram usage:        6 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    1
  3085 ;; This function calls:
  3086 ;;		_strchr
  3087 ;;		_strlen
  3088 ;;		_strncmp
  3089 ;; This function is called by:
  3090 ;;		_read_gps
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _strstr
  3096  0B62                     _strstr:	
  3097                           
  3098                           ;incstack = 0
  3099                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3100  0B62  2B98               	goto	l2883
  3101  0B63                     l2877:	
  3102  0B63  0020               	movlb	0	; select bank0
  3103  0B64  0821               	movf	strstr@s1+1,w
  3104  0B65  00F7               	movwf	strncmp@s1+1
  3105  0B66  0820               	movf	strstr@s1,w
  3106  0B67  00F6               	movwf	strncmp@s1
  3107  0B68  0823               	movf	strstr@s2+1,w
  3108  0B69  00F9               	movwf	strncmp@s2+1
  3109  0B6A  0822               	movf	strstr@s2,w
  3110  0B6B  00F8               	movwf	strncmp@s2
  3111  0B6C  0823               	movf	strstr@s2+1,w
  3112  0B6D  00F1               	movwf	strlen@s+1
  3113  0B6E  0822               	movf	strstr@s2,w
  3114  0B6F  00F0               	movwf	strlen@s
  3115  0B70  3189  2119  318B   	fcall	_strlen
  3116  0B73  0871               	movf	?_strlen+1,w
  3117  0B74  00FB               	movwf	strncmp@len+1
  3118  0B75  0870               	movf	?_strlen,w
  3119  0B76  00FA               	movwf	strncmp@len
  3120  0B77  318A  22DD  318B   	fcall	_strncmp
  3121  0B7A  0876               	movf	?_strncmp,w
  3122  0B7B  0477               	iorwf	?_strncmp+1,w
  3123  0B7C  1903               	btfsc	3,2
  3124  0B7D  0008               	return
  3125  0B7E  0020               	movlb	0	; select bank0
  3126  0B7F  0820               	movf	strstr@s1,w
  3127  0B80  3E01               	addlw	1
  3128  0B81  00F0               	movwf	strchr@ptr
  3129  0B82  3000               	movlw	0
  3130  0B83  3D21               	addwfc	strstr@s1+1,w
  3131  0B84  00F1               	movwf	strchr@ptr+1
  3132  0B85  0822               	movf	strstr@s2,w
  3133  0B86  0084               	movwf	4
  3134  0B87  0823               	movf	strstr@s2+1,w
  3135  0B88  0085               	movwf	5
  3136  0B89  0800               	movf	0,w	;code access
  3137  0B8A  00A4               	movwf	??_strstr
  3138  0B8B  01A5               	clrf	??_strstr+1
  3139  0B8C  0824               	movf	??_strstr,w
  3140  0B8D  00F2               	movwf	strchr@chr
  3141  0B8E  0825               	movf	??_strstr+1,w
  3142  0B8F  00F3               	movwf	strchr@chr+1
  3143  0B90  3188  2092  318B   	fcall	_strchr
  3144  0B93  0871               	movf	?_strchr+1,w
  3145  0B94  0020               	movlb	0	; select bank0
  3146  0B95  00A1               	movwf	strstr@s1+1
  3147  0B96  0870               	movf	?_strchr,w
  3148  0B97  00A0               	movwf	strstr@s1
  3149  0B98                     l2883:	
  3150  0B98  0020               	movlb	0	; select bank0
  3151  0B99  0820               	movf	strstr@s1,w
  3152  0B9A  0421               	iorwf	strstr@s1+1,w
  3153  0B9B  1903               	btfsc	3,2
  3154  0B9C  2BA4               	goto	l2887
  3155  0B9D  0820               	movf	strstr@s1,w
  3156  0B9E  0086               	movwf	6
  3157  0B9F  0821               	movf	strstr@s1+1,w
  3158  0BA0  0087               	movwf	7
  3159  0BA1  0801               	movf	1,w
  3160  0BA2  1D03               	btfss	3,2
  3161  0BA3  2B63               	goto	l2877
  3162  0BA4                     l2887:	
  3163  0BA4  01A0               	clrf	?_strstr
  3164  0BA5  01A1               	clrf	?_strstr+1
  3165  0BA6  0008               	return
  3166  0BA7                     __end_of_strstr:	
  3167                           
  3168                           	psect	text3
  3169  0ADD                     __ptext3:	
  3170 ;; *************** function _strncmp *****************
  3171 ;; Defined at:
  3172 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  s1              2    6[COMMON] PTR const unsigned char 
  3175 ;;		 -> NULL(0), uartBuffer(300), 
  3176 ;;  s2              2    8[COMMON] PTR const unsigned char 
  3177 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  3178 ;;		 -> STR_2(2), STR_1(7), 
  3179 ;;  len             2   10[COMMON] unsigned int 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;		None
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  2    6[COMMON] int 
  3184 ;; Registers used:
  3185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3191 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3193 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3194 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3195 ;;Total ram usage:        8 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_strstr
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function _strncmp
  3206  0ADD                     _strncmp:	
  3207  0ADD                     l2811:	
  3208                           ;incstack = 0
  3209                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3210                           
  3211  0ADD  3001               	movlw	1
  3212  0ADE  02FA               	subwf	strncmp@len,f
  3213  0ADF  3000               	movlw	0
  3214  0AE0  3BFB               	subwfb	strncmp@len+1,f
  3215  0AE1  0A7A               	incf	strncmp@len,w
  3216  0AE2  1903               	btfsc	3,2
  3217  0AE3  0A7B               	incf	strncmp@len+1,w
  3218  0AE4  1903               	btfsc	3,2
  3219  0AE5  2B1C               	goto	l2813
  3220  0AE6  0876               	movf	strncmp@s1,w
  3221  0AE7  0086               	movwf	6
  3222  0AE8  0877               	movf	strncmp@s1+1,w
  3223  0AE9  0087               	movwf	7
  3224  0AEA  0801               	movf	1,w
  3225  0AEB  1903               	btfsc	3,2
  3226  0AEC  2AFB               	goto	l2805
  3227  0AED  0878               	movf	strncmp@s2,w
  3228  0AEE  0084               	movwf	4
  3229  0AEF  0879               	movf	strncmp@s2+1,w
  3230  0AF0  0085               	movwf	5
  3231  0AF1  0800               	movf	0,w	;code access
  3232  0AF2  00FC               	movwf	??_strncmp
  3233  0AF3  0876               	movf	strncmp@s1,w
  3234  0AF4  0086               	movwf	6
  3235  0AF5  0877               	movf	strncmp@s1+1,w
  3236  0AF6  0087               	movwf	7
  3237  0AF7  0801               	movf	1,w
  3238  0AF8  067C               	xorwf	??_strncmp,w
  3239  0AF9  1903               	skipnz
  3240  0AFA  2B13               	goto	l2809
  3241  0AFB                     l2805:	
  3242  0AFB  0878               	movf	strncmp@s2,w
  3243  0AFC  0084               	movwf	4
  3244  0AFD  0879               	movf	strncmp@s2+1,w
  3245  0AFE  0085               	movwf	5
  3246  0AFF  0800               	movf	0,w	;code access
  3247  0B00  00FC               	movwf	??_strncmp
  3248  0B01  01FD               	clrf	??_strncmp+1
  3249  0B02  09FC               	comf	??_strncmp,f
  3250  0B03  09FD               	comf	??_strncmp+1,f
  3251  0B04  0AFC               	incf	??_strncmp,f
  3252  0B05  1903               	skipnz
  3253  0B06  0AFD               	incf	??_strncmp+1,f
  3254  0B07  0876               	movf	strncmp@s1,w
  3255  0B08  0086               	movwf	6
  3256  0B09  0877               	movf	strncmp@s1+1,w
  3257  0B0A  0087               	movwf	7
  3258  0B0B  0801               	movf	1,w
  3259  0B0C  077C               	addwf	??_strncmp,w
  3260  0B0D  00F6               	movwf	?_strncmp
  3261  0B0E  087D               	movf	??_strncmp+1,w
  3262  0B0F  1803               	skipnc
  3263  0B10  0A7D               	incf	??_strncmp+1,w
  3264  0B11  00F7               	movwf	?_strncmp+1
  3265  0B12  0008               	return
  3266  0B13                     l2809:	
  3267  0B13  3001               	movlw	1
  3268  0B14  07F6               	addwf	strncmp@s1,f
  3269  0B15  3000               	movlw	0
  3270  0B16  3DF7               	addwfc	strncmp@s1+1,f
  3271  0B17  3001               	movlw	1
  3272  0B18  07F8               	addwf	strncmp@s2,f
  3273  0B19  3000               	movlw	0
  3274  0B1A  3DF9               	addwfc	strncmp@s2+1,f
  3275  0B1B  2ADD               	goto	l2811
  3276  0B1C                     l2813:	
  3277  0B1C  01F6               	clrf	?_strncmp
  3278  0B1D  01F7               	clrf	?_strncmp+1
  3279  0B1E  0008               	return
  3280  0B1F                     __end_of_strncmp:	
  3281                           
  3282                           	psect	text4
  3283  0919                     __ptext4:	
  3284 ;; *************** function _strlen *****************
  3285 ;; Defined at:
  3286 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  s               2    0[COMMON] PTR const unsigned char 
  3289 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  3290 ;;		 -> STR_2(2), STR_1(7), 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  cp              2    4[COMMON] PTR const unsigned char 
  3293 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  3294 ;;		 -> STR_2(2), STR_1(7), 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  2    0[COMMON] unsigned int 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3304 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3306 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3307 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3308 ;;Total ram usage:        6 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_strstr
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function _strlen
  3319  0919                     _strlen:	
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  3323  0919  0871               	movf	strlen@s+1,w
  3324  091A  00F5               	movwf	strlen@cp+1
  3325  091B  0870               	movf	strlen@s,w
  3326  091C  00F4               	movwf	strlen@cp
  3327  091D                     l2793:	
  3328  091D  0874               	movf	strlen@cp,w
  3329  091E  0084               	movwf	4
  3330  091F  0875               	movf	strlen@cp+1,w
  3331  0920  0085               	movwf	5
  3332  0921  0012               	moviw fsr0++
  3333  0922  1903               	btfsc	3,2
  3334  0923  2929               	goto	l2795
  3335  0924  3001               	movlw	1
  3336  0925  07F4               	addwf	strlen@cp,f
  3337  0926  3000               	movlw	0
  3338  0927  3DF5               	addwfc	strlen@cp+1,f
  3339  0928  291D               	goto	l2793
  3340  0929                     l2795:	
  3341  0929  0970               	comf	strlen@s,w
  3342  092A  00F2               	movwf	??_strlen
  3343  092B  0971               	comf	strlen@s+1,w
  3344  092C  00F3               	movwf	??_strlen+1
  3345  092D  0AF2               	incf	??_strlen,f
  3346  092E  1903               	skipnz
  3347  092F  0AF3               	incf	??_strlen+1,f
  3348  0930  0874               	movf	strlen@cp,w
  3349  0931  0772               	addwf	??_strlen,w
  3350  0932  00F0               	movwf	?_strlen
  3351  0933  0875               	movf	strlen@cp+1,w
  3352  0934  3D73               	addwfc	??_strlen+1,w
  3353  0935  00F1               	movwf	?_strlen+1
  3354  0936  0008               	return
  3355  0937                     __end_of_strlen:	
  3356                           
  3357                           	psect	text5
  3358  0892                     __ptext5:	
  3359 ;; *************** function _strchr *****************
  3360 ;; Defined at:
  3361 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  ptr             2    0[COMMON] PTR const unsigned char 
  3364 ;;		 -> NULL(0), uartBuffer(300), 
  3365 ;;  chr             2    2[COMMON] int 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  2    0[COMMON] PTR unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3377 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3379 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;Total ram usage:        6 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_strstr
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           
  3391                           ;psect for function _strchr
  3392  0892                     _strchr:	
  3393  0892                     l801:	
  3394                           ;incstack = 0
  3395                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  3396                           
  3397  0892  0870               	movf	strchr@ptr,w
  3398  0893  0086               	movwf	6
  3399  0894  0871               	movf	strchr@ptr+1,w
  3400  0895  0087               	movwf	7
  3401  0896  0801               	movf	1,w
  3402  0897  0672               	xorwf	strchr@chr,w
  3403  0898  1903               	btfsc	3,2
  3404  0899  0008               	return
  3405  089A  0871               	movf	strchr@ptr+1,w
  3406  089B  00F5               	movwf	??_strchr+1
  3407  089C  0870               	movf	strchr@ptr,w
  3408  089D  00F4               	movwf	??_strchr
  3409  089E  0AF0               	incf	strchr@ptr,f
  3410  089F  1903               	skipnz
  3411  08A0  0AF1               	incf	strchr@ptr+1,f
  3412  08A1  0874               	movf	??_strchr,w
  3413  08A2  0086               	movwf	6
  3414  08A3  0875               	movf	??_strchr+1,w
  3415  08A4  0087               	movwf	7
  3416  08A5  0801               	movf	1,w
  3417  08A6  1D03               	btfss	3,2
  3418  08A7  2892               	goto	l801
  3419  08A8  01F0               	clrf	?_strchr
  3420  08A9  01F1               	clrf	?_strchr+1
  3421  08AA  0008               	return
  3422  08AB                     __end_of_strchr:	
  3423                           
  3424                           	psect	text6
  3425  08AB                     __ptext6:	
  3426 ;; *************** function _memset *****************
  3427 ;; Defined at:
  3428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  p1              1    wreg     PTR void 
  3431 ;;		 -> conversionString(8), 
  3432 ;;  c               2    0[COMMON] int 
  3433 ;;  n               2    2[COMMON] unsigned int 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  p1              1    6[COMMON] PTR void 
  3436 ;;		 -> conversionString(8), 
  3437 ;;  p               1    5[COMMON] PTR unsigned char 
  3438 ;;		 -> conversionString(8), 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      PTR void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3448 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;Total ram usage:        7 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_read_gps
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function _memset
  3463  08AB                     _memset:	
  3464                           
  3465                           ;incstack = 0
  3466                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  3467                           ;memset@p1 stored from wreg
  3468  08AB  00F6               	movwf	memset@p1
  3469  08AC  0876               	movf	memset@p1,w
  3470  08AD  00F4               	movwf	??_memset
  3471  08AE  0874               	movf	??_memset,w
  3472  08AF  00F5               	movwf	memset@p
  3473  08B0                     l2897:	
  3474  08B0  3001               	movlw	1
  3475  08B1  02F2               	subwf	memset@n,f
  3476  08B2  3000               	movlw	0
  3477  08B3  3BF3               	subwfb	memset@n+1,f
  3478  08B4  0A72               	incf	memset@n,w
  3479  08B5  1903               	btfsc	3,2
  3480  08B6  0A73               	incf	memset@n+1,w
  3481  08B7  1903               	btfsc	3,2
  3482  08B8  0008               	return
  3483  08B9  0870               	movf	memset@c,w
  3484  08BA  00F4               	movwf	??_memset
  3485  08BB  0875               	movf	memset@p,w
  3486  08BC  0086               	movwf	6
  3487  08BD  0187               	clrf	7
  3488  08BE  0874               	movf	??_memset,w
  3489  08BF  0081               	movwf	1
  3490  08C0  3001               	movlw	1
  3491  08C1  00F4               	movwf	??_memset
  3492  08C2  0874               	movf	??_memset,w
  3493  08C3  07F5               	addwf	memset@p,f
  3494  08C4  28B0               	goto	l2897
  3495  08C5                     __end_of_memset:	
  3496                           ;	Return value of _memset is never used
  3497                           
  3498                           
  3499                           	psect	text7
  3500  081C                     __ptext7:	
  3501 ;; *************** function _atof *****************
  3502 ;; Defined at:
  3503 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atof.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  s               2   38[BANK0 ] PTR const unsigned char 
  3506 ;;		 -> conversionString(8), NULL(0), uartBuffer(300), 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;		None
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  3   38[BANK0 ] PTR const unsigned char 
  3511 ;; Registers used:
  3512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3518 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3521 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3522 ;;Total ram usage:        3 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    3
  3525 ;; This function calls:
  3526 ;;		_strtod
  3527 ;; This function is called by:
  3528 ;;		_read_gps
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           
  3533                           ;psect for function _atof
  3534  081C                     _atof:	
  3535                           
  3536                           ;incstack = 0
  3537                           ; Regs used in _atof: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3538  081C  0020               	movlb	0	; select bank0
  3539  081D  0847               	movf	atof@s+1,w
  3540  081E  00AB               	movwf	strtod@s+1
  3541  081F  0846               	movf	atof@s,w
  3542  0820  00AA               	movwf	strtod@s
  3543  0821  01AC               	clrf	strtod@res
  3544  0822  3185  256F         	fcall	_strtod
  3545  0824  0020               	movlb	0	; select bank0
  3546  0825  082A               	movf	?_strtod,w
  3547  0826  00C6               	movwf	?_atof
  3548  0827  082B               	movf	?_strtod+1,w
  3549  0828  00C7               	movwf	?_atof+1
  3550  0829  082C               	movf	?_strtod+2,w
  3551  082A  00C8               	movwf	?_atof+2
  3552  082B  0008               	return
  3553  082C                     __end_of_atof:	
  3554                           
  3555                           	psect	text8
  3556  056F                     __ptext8:	
  3557 ;; *************** function _strtod *****************
  3558 ;; Defined at:
  3559 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atof.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  s               2   10[BANK0 ] PTR const unsigned char 
  3562 ;;		 -> conversionString(8), NULL(0), uartBuffer(300), 
  3563 ;;  res             1   12[BANK0 ] PTR PTR const unsigned c
  3564 ;;		 -> NULL(0), 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  _u              4   34[BANK0 ] struct .
  3567 ;;  expon           1   33[BANK0 ] char 
  3568 ;;  flags           1   32[BANK0 ] unsigned char 
  3569 ;;  eexp            1   31[BANK0 ] char 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  3   10[BANK0 ] char 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3579 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3580 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3581 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3582 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3583 ;;Total ram usage:       28 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    2
  3586 ;; This function calls:
  3587 ;;		___altoft
  3588 ;;		___bmul
  3589 ;;		___ftdiv
  3590 ;;		___ftge
  3591 ;;		___ftmul
  3592 ;;		___ftneg
  3593 ;;		___lmul
  3594 ;;		_isdigit
  3595 ;;		_isspace
  3596 ;; This function is called by:
  3597 ;;		_atof
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           
  3602                           ;psect for function _strtod
  3603  056F                     _strtod:	
  3604                           
  3605                           ;incstack = 0
  3606                           ; Regs used in _strtod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3607  056F  0020               	movlb	0	; select bank0
  3608  0570  082C               	movf	strtod@res,w
  3609  0571  1903               	btfsc	3,2
  3610  0572  2D7A               	goto	l2541
  3611  0573  082C               	movf	strtod@res,w
  3612  0574  0086               	movwf	6
  3613  0575  0187               	clrf	7
  3614  0576  082A               	movf	strtod@s,w
  3615  0577  3FC0               	movwi [0]fsr1
  3616  0578  082B               	movf	strtod@s+1,w
  3617  0579  3FC1               	movwi [1]fsr1
  3618  057A                     l2541:	
  3619  057A  082A               	movf	strtod@s,w
  3620  057B  0086               	movwf	6
  3621  057C  082B               	movf	strtod@s+1,w
  3622  057D  0087               	movwf	7
  3623  057E  0801               	movf	1,w
  3624  057F  00BF               	movwf	strtod@eexp
  3625  0580  3188  203D  3185   	fcall	_isspace
  3626  0583  1C03               	btfss	3,0
  3627  0584  2D8B               	goto	l2543
  3628  0585  3001               	movlw	1
  3629  0586  0020               	movlb	0	; select bank0
  3630  0587  07AA               	addwf	strtod@s,f
  3631  0588  3000               	movlw	0
  3632  0589  3DAB               	addwfc	strtod@s+1,f
  3633  058A  2D7A               	goto	l2541
  3634  058B                     l2543:	
  3635  058B  0020               	movlb	0	; select bank0
  3636  058C  01C0               	clrf	strtod@flags
  3637  058D  302D               	movlw	45
  3638  058E  063F               	xorwf	strtod@eexp,w
  3639  058F  1D03               	btfss	3,2
  3640  0590  2D94               	goto	l2551
  3641  0591  01C0               	clrf	strtod@flags
  3642  0592  0AC0               	incf	strtod@flags,f
  3643  0593  2D98               	goto	l2553
  3644  0594                     l2551:	
  3645  0594  302B               	movlw	43
  3646  0595  063F               	xorwf	strtod@eexp,w
  3647  0596  1D03               	btfss	3,2
  3648  0597  2D9C               	goto	l2555
  3649  0598                     l2553:	
  3650  0598  3001               	movlw	1
  3651  0599  07AA               	addwf	strtod@s,f
  3652  059A  3000               	movlw	0
  3653  059B  3DAB               	addwfc	strtod@s+1,f
  3654  059C                     l2555:	
  3655  059C  01BF               	clrf	strtod@eexp
  3656  059D  3000               	movlw	0
  3657  059E  00C5               	movwf	strtod@_u+3
  3658  059F  3000               	movlw	0
  3659  05A0  00C4               	movwf	strtod@_u+2
  3660  05A1  3000               	movlw	0
  3661  05A2  00C3               	movwf	strtod@_u+1
  3662  05A3  3000               	movlw	0
  3663  05A4  00C2               	movwf	strtod@_u
  3664  05A5  01C1               	clrf	strtod@expon
  3665  05A6  2DB4               	goto	l2559
  3666  05A7                     l2561:	
  3667  05A7  082A               	movf	strtod@s,w
  3668  05A8  0086               	movwf	6
  3669  05A9  082B               	movf	strtod@s+1,w
  3670  05AA  0087               	movwf	7
  3671  05AB  302E               	movlw	46
  3672  05AC  0601               	xorwf	1,w
  3673  05AD  1D03               	btfss	3,2
  3674  05AE  2DB6               	goto	l2567
  3675  05AF  1640               	bsf	strtod@flags,4
  3676  05B0                     L1:	
  3677  05B0  3001               	movlw	1
  3678  05B1  07AA               	addwf	strtod@s,f
  3679  05B2  3000               	movlw	0
  3680  05B3  3DAB               	addwfc	strtod@s+1,f
  3681  05B4                     l2559:	
  3682  05B4  1E40               	btfss	strtod@flags,4
  3683  05B5  2DA7               	goto	l2561
  3684  05B6                     l2567:	
  3685  05B6  082A               	movf	strtod@s,w
  3686  05B7  0086               	movwf	6
  3687  05B8  082B               	movf	strtod@s+1,w
  3688  05B9  0087               	movwf	7
  3689  05BA  0801               	movf	1,w
  3690  05BB  3188  200E  3185   	fcall	_isdigit
  3691  05BE  1C03               	btfss	3,0
  3692  05BF  2E19               	goto	l2589
  3693  05C0  0020               	movlb	0	; select bank0
  3694  05C1  14C0               	bsf	strtod@flags,1
  3695  05C2  3005               	movlw	5
  3696  05C3  00BD               	movwf	_strtod$511
  3697  05C4  3000               	movlw	0
  3698  05C5  00BE               	movwf	_strtod$511+1
  3699  05C6  083F               	movf	strtod@eexp,w
  3700  05C7  00AD               	movwf	??_strtod
  3701  05C8  01AE               	clrf	??_strtod+1
  3702  05C9  1BAD               	btfsc	??_strtod,7
  3703  05CA  03AE               	decf	??_strtod+1,f
  3704  05CB  083D               	movf	_strtod$511,w
  3705  05CC  3E03               	addlw	3
  3706  05CD  00AF               	movwf	??_strtod+2
  3707  05CE  3000               	movlw	0
  3708  05CF  3D3E               	addwfc	_strtod$511+1,w
  3709  05D0  00B0               	movwf	??_strtod+3
  3710  05D1  082E               	movf	??_strtod+1,w
  3711  05D2  0630               	xorwf	??_strtod+3,w
  3712  05D3  1D03               	skipz
  3713  05D4  2DD7               	goto	u3325
  3714  05D5  082D               	movf	??_strtod,w
  3715  05D6  062F               	xorwf	??_strtod+2,w
  3716  05D7                     u3325:	
  3717  05D7  1903               	skipnz
  3718  05D8  2E12               	goto	l434
  3719  05D9  1E40               	btfss	strtod@flags,4
  3720  05DA  2DDF               	goto	l439
  3721  05DB  30FF               	movlw	255
  3722  05DC  00AD               	movwf	??_strtod
  3723  05DD  082D               	movf	??_strtod,w
  3724  05DE  07C1               	addwf	strtod@expon,f
  3725  05DF                     l439:	
  3726  05DF  3001               	movlw	1
  3727  05E0  00AD               	movwf	??_strtod
  3728  05E1  082D               	movf	??_strtod,w
  3729  05E2  07BF               	addwf	strtod@eexp,f
  3730  05E3  3000               	movlw	0
  3731  05E4  00F3               	movwf	___lmul@multiplier+3
  3732  05E5  3000               	movlw	0
  3733  05E6  00F2               	movwf	___lmul@multiplier+2
  3734  05E7  3000               	movlw	0
  3735  05E8  00F1               	movwf	___lmul@multiplier+1
  3736  05E9  300A               	movlw	10
  3737  05EA  00F0               	movwf	___lmul@multiplier
  3738  05EB  0845               	movf	strtod@_u+3,w
  3739  05EC  00F7               	movwf	___lmul@multiplicand+3
  3740  05ED  0844               	movf	strtod@_u+2,w
  3741  05EE  00F6               	movwf	___lmul@multiplicand+2
  3742  05EF  0843               	movf	strtod@_u+1,w
  3743  05F0  00F5               	movwf	___lmul@multiplicand+1
  3744  05F1  0842               	movf	strtod@_u,w
  3745  05F2  00F4               	movwf	___lmul@multiplicand
  3746  05F3  3189  21B5  3185   	fcall	___lmul
  3747  05F6  0873               	movf	?___lmul+3,w
  3748  05F7  0020               	movlb	0	; select bank0
  3749  05F8  00C5               	movwf	strtod@_u+3
  3750  05F9  0872               	movf	?___lmul+2,w
  3751  05FA  00C4               	movwf	strtod@_u+2
  3752  05FB  0871               	movf	?___lmul+1,w
  3753  05FC  00C3               	movwf	strtod@_u+1
  3754  05FD  0870               	movf	?___lmul,w
  3755  05FE  00C2               	movwf	strtod@_u
  3756  05FF  082A               	movf	strtod@s,w
  3757  0600  0086               	movwf	6
  3758  0601  082B               	movf	strtod@s+1,w
  3759  0602  0087               	movwf	7
  3760  0603  0801               	movf	1,w
  3761  0604  3ED0               	addlw	208
  3762  0605  00AD               	movwf	??_strtod
  3763  0606  01AE               	clrf	??_strtod+1
  3764  0607  01AF               	clrf	??_strtod+2
  3765  0608  01B0               	clrf	??_strtod+3
  3766  0609  082D               	movf	??_strtod,w
  3767  060A  07C2               	addwf	strtod@_u,f
  3768  060B  082E               	movf	??_strtod+1,w
  3769  060C  3DC3               	addwfc	strtod@_u+1,f
  3770  060D  082F               	movf	??_strtod+2,w
  3771  060E  3DC4               	addwfc	strtod@_u+2,f
  3772  060F  0830               	movf	??_strtod+3,w
  3773  0610  3DC5               	addwfc	strtod@_u+3,f
  3774  0611  2DB0               	goto	L1
  3775  0612                     l434:	
  3776  0612  1A40               	btfsc	strtod@flags,4
  3777  0613  2DB0               	goto	L1
  3778  0614  3001               	movlw	1
  3779  0615  00AD               	movwf	??_strtod
  3780  0616  082D               	movf	??_strtod,w
  3781  0617  07C1               	addwf	strtod@expon,f
  3782  0618  2DB0               	goto	L1
  3783  0619                     l2589:	
  3784  0619  0020               	movlb	0	; select bank0
  3785  061A  01BF               	clrf	strtod@eexp
  3786  061B  082A               	movf	strtod@s,w
  3787  061C  0086               	movwf	6
  3788  061D  082B               	movf	strtod@s+1,w
  3789  061E  0087               	movwf	7
  3790  061F  3065               	movlw	101
  3791  0620  0601               	xorwf	1,w
  3792  0621  1903               	btfsc	3,2
  3793  0622  2E2B               	goto	l2595
  3794  0623  082A               	movf	strtod@s,w
  3795  0624  0086               	movwf	6
  3796  0625  082B               	movf	strtod@s+1,w
  3797  0626  0087               	movwf	7
  3798  0627  3045               	movlw	69
  3799  0628  0601               	xorwf	1,w
  3800  0629  1D03               	btfss	3,2
  3801  062A  2EA8               	goto	l2629
  3802  062B                     l2595:	
  3803  062B  3001               	movlw	1
  3804  062C  07AA               	addwf	strtod@s,f
  3805  062D  3000               	movlw	0
  3806  062E  3DAB               	addwfc	strtod@s+1,f
  3807  062F  082A               	movf	strtod@s,w
  3808  0630  0086               	movwf	6
  3809  0631  082B               	movf	strtod@s+1,w
  3810  0632  0087               	movwf	7
  3811  0633  302D               	movlw	45
  3812  0634  0601               	xorwf	1,w
  3813  0635  1D03               	btfss	3,2
  3814  0636  2E39               	goto	l2601
  3815  0637  15C0               	bsf	strtod@flags,3
  3816  0638  2E41               	goto	l2605
  3817  0639                     l2601:	
  3818  0639  082A               	movf	strtod@s,w
  3819  063A  0086               	movwf	6
  3820  063B  082B               	movf	strtod@s+1,w
  3821  063C  0087               	movwf	7
  3822  063D  302B               	movlw	43
  3823  063E  0601               	xorwf	1,w
  3824  063F  1D03               	btfss	3,2
  3825  0640  2E45               	goto	l2607
  3826  0641                     l2605:	
  3827  0641  3001               	movlw	1
  3828  0642  07AA               	addwf	strtod@s,f
  3829  0643  3000               	movlw	0
  3830  0644  3DAB               	addwfc	strtod@s+1,f
  3831  0645                     l2607:	
  3832  0645  082A               	movf	strtod@s,w
  3833  0646  0086               	movwf	6
  3834  0647  082B               	movf	strtod@s+1,w
  3835  0648  0087               	movwf	7
  3836  0649  3030               	movlw	48
  3837  064A  0601               	xorwf	1,w
  3838  064B  1903               	btfsc	3,2
  3839  064C  2E41               	goto	l2605
  3840  064D  082A               	movf	strtod@s,w
  3841  064E  0086               	movwf	6
  3842  064F  082B               	movf	strtod@s+1,w
  3843  0650  0087               	movwf	7
  3844  0651  0801               	movf	1,w
  3845  0652  3188  200E  3185   	fcall	_isdigit
  3846  0655  1C03               	btfss	3,0
  3847  0656  2EA3               	goto	l2625
  3848  0657  0020               	movlb	0	; select bank0
  3849  0658  082A               	movf	strtod@s,w
  3850  0659  0086               	movwf	6
  3851  065A  082B               	movf	strtod@s+1,w
  3852  065B  0087               	movwf	7
  3853  065C  0801               	movf	1,w
  3854  065D  3ED0               	addlw	208
  3855  065E  00AD               	movwf	??_strtod
  3856  065F  082D               	movf	??_strtod,w
  3857  0660  00BF               	movwf	strtod@eexp
  3858  0661  3001               	movlw	1
  3859  0662  07AA               	addwf	strtod@s,f
  3860  0663  3000               	movlw	0
  3861  0664  3DAB               	addwfc	strtod@s+1,f
  3862  0665  082A               	movf	strtod@s,w
  3863  0666  0086               	movwf	6
  3864  0667  082B               	movf	strtod@s+1,w
  3865  0668  0087               	movwf	7
  3866  0669  0801               	movf	1,w
  3867  066A  3188  200E  3185   	fcall	_isdigit
  3868  066D  1C03               	btfss	3,0
  3869  066E  2EA3               	goto	l2625
  3870  066F  0020               	movlb	0	; select bank0
  3871  0670  082A               	movf	strtod@s,w
  3872  0671  0086               	movwf	6
  3873  0672  082B               	movf	strtod@s+1,w
  3874  0673  0087               	movwf	7
  3875  0674  300A               	movlw	10
  3876  0675  00AD               	movwf	??_strtod
  3877  0676  082D               	movf	??_strtod,w
  3878  0677  00F0               	movwf	___bmul@multiplicand
  3879  0678  083F               	movf	strtod@eexp,w
  3880  0679  3188  202C  3185   	fcall	___bmul
  3881  067C  0701               	addwf	1,w
  3882  067D  3ED0               	addlw	-48
  3883  067E  0020               	movlb	0	; select bank0
  3884  067F  00AE               	movwf	??_strtod+1
  3885  0680  082E               	movf	??_strtod+1,w
  3886  0681  00BF               	movwf	strtod@eexp
  3887  0682  3001               	movlw	1
  3888  0683  07AA               	addwf	strtod@s,f
  3889  0684  3000               	movlw	0
  3890  0685  3DAB               	addwfc	strtod@s+1,f
  3891  0686  082A               	movf	strtod@s,w
  3892  0687  0086               	movwf	6
  3893  0688  082B               	movf	strtod@s+1,w
  3894  0689  0087               	movwf	7
  3895  068A  0801               	movf	1,w
  3896  068B  3188  200E  3185   	fcall	_isdigit
  3897  068E  1C03               	btfss	3,0
  3898  068F  2EA3               	goto	l2625
  3899  0690  0020               	movlb	0	; select bank0
  3900  0691  082A               	movf	strtod@s,w
  3901  0692  0086               	movwf	6
  3902  0693  082B               	movf	strtod@s+1,w
  3903  0694  0087               	movwf	7
  3904  0695  300A               	movlw	10
  3905  0696  00AD               	movwf	??_strtod
  3906  0697  082D               	movf	??_strtod,w
  3907  0698  00F0               	movwf	___bmul@multiplicand
  3908  0699  083F               	movf	strtod@eexp,w
  3909  069A  3188  202C  3185   	fcall	___bmul
  3910  069D  0701               	addwf	1,w
  3911  069E  3ED0               	addlw	-48
  3912  069F  0020               	movlb	0	; select bank0
  3913  06A0  00AE               	movwf	??_strtod+1
  3914  06A1  082E               	movf	??_strtod+1,w
  3915  06A2  00BF               	movwf	strtod@eexp
  3916  06A3                     l2625:	
  3917  06A3  0020               	movlb	0	; select bank0
  3918  06A4  1DC0               	btfss	strtod@flags,3
  3919  06A5  2EA8               	goto	l2629
  3920  06A6  09BF               	comf	strtod@eexp,f
  3921  06A7  0ABF               	incf	strtod@eexp,f
  3922  06A8                     l2629:	
  3923  06A8  083F               	movf	strtod@eexp,w
  3924  06A9  00AD               	movwf	??_strtod
  3925  06AA  082D               	movf	??_strtod,w
  3926  06AB  07C1               	addwf	strtod@expon,f
  3927  06AC  082C               	movf	strtod@res,w
  3928  06AD  1D03               	btfss	3,2
  3929  06AE  1CC0               	btfss	strtod@flags,1
  3930  06AF  2EB7               	goto	l2637
  3931  06B0  082C               	movf	strtod@res,w
  3932  06B1  0086               	movwf	6
  3933  06B2  0187               	clrf	7
  3934  06B3  082A               	movf	strtod@s,w
  3935  06B4  3FC0               	movwi [0]fsr1
  3936  06B5  082B               	movf	strtod@s+1,w
  3937  06B6  3FC1               	movwi [1]fsr1
  3938  06B7                     l2637:	
  3939  06B7  0845               	movf	strtod@_u+3,w
  3940  06B8  00FB               	movwf	___altoft@c+3
  3941  06B9  0844               	movf	strtod@_u+2,w
  3942  06BA  00FA               	movwf	___altoft@c+2
  3943  06BB  0843               	movf	strtod@_u+1,w
  3944  06BC  00F9               	movwf	___altoft@c+1
  3945  06BD  0842               	movf	strtod@_u,w
  3946  06BE  00F8               	movwf	___altoft@c
  3947  06BF  318A  221F  3185   	fcall	___altoft
  3948  06C2  0878               	movf	?___altoft,w
  3949  06C3  0020               	movlb	0	; select bank0
  3950  06C4  00C2               	movwf	strtod@_u
  3951  06C5  0879               	movf	?___altoft+1,w
  3952  06C6  00C3               	movwf	strtod@_u+1
  3953  06C7  087A               	movf	?___altoft+2,w
  3954  06C8  00C4               	movwf	strtod@_u+2
  3955  06C9  0844               	movf	strtod@_u+2,w
  3956  06CA  0443               	iorwf	strtod@_u+1,w
  3957  06CB  0442               	iorwf	strtod@_u,w
  3958  06CC  1D03               	skipz
  3959  06CD  2ED5               	goto	l456
  3960  06CE  3000               	movlw	0
  3961  06CF  00AA               	movwf	?_strtod
  3962  06D0  3000               	movlw	0
  3963  06D1  00AB               	movwf	?_strtod+1
  3964  06D2  3000               	movlw	0
  3965  06D3  00AC               	movwf	?_strtod+2
  3966  06D4  0008               	return
  3967  06D5                     l456:	
  3968  06D5  1FC1               	btfss	strtod@expon,7
  3969  06D6  2F4D               	goto	l2683
  3970  06D7  09C1               	comf	strtod@expon,f
  3971  06D8  0AC1               	incf	strtod@expon,f
  3972  06D9                     l2651:	
  3973  06D9  0841               	movf	strtod@expon,w
  3974  06DA  3A80               	xorlw	128
  3975  06DB  3E76               	addlw	-138
  3976  06DC  1C03               	btfss	3,0
  3977  06DD  2F13               	goto	l2657
  3978  06DE  3003               	movlw	3
  3979  06DF  00F8               	movwf	___ftdiv@f2
  3980  06E0  3015               	movlw	21
  3981  06E1  00F9               	movwf	___ftdiv@f2+1
  3982  06E2  3050               	movlw	80
  3983  06E3  00FA               	movwf	___ftdiv@f2+2
  3984  06E4  0842               	movf	strtod@_u,w
  3985  06E5  00FB               	movwf	___ftdiv@f1
  3986  06E6  0843               	movf	strtod@_u+1,w
  3987  06E7  00FC               	movwf	___ftdiv@f1+1
  3988  06E8  0844               	movf	strtod@_u+2,w
  3989  06E9  00FD               	movwf	___ftdiv@f1+2
  3990  06EA  318E  26A5  3185   	fcall	___ftdiv
  3991  06ED  0878               	movf	?___ftdiv,w
  3992  06EE  0020               	movlb	0	; select bank0
  3993  06EF  00C2               	movwf	strtod@_u
  3994  06F0  0879               	movf	?___ftdiv+1,w
  3995  06F1  00C3               	movwf	strtod@_u+1
  3996  06F2  087A               	movf	?___ftdiv+2,w
  3997  06F3  00C4               	movwf	strtod@_u+2
  3998  06F4  30F6               	movlw	246
  3999  06F5  00AD               	movwf	??_strtod
  4000  06F6  082D               	movf	??_strtod,w
  4001  06F7  07C1               	addwf	strtod@expon,f
  4002  06F8  2ED9               	goto	l2651
  4003  06F9                     l2653:	
  4004  06F9  3000               	movlw	0
  4005  06FA  00F8               	movwf	___ftdiv@f2
  4006  06FB  3020               	movlw	32
  4007  06FC  00F9               	movwf	___ftdiv@f2+1
  4008  06FD  3041               	movlw	65
  4009  06FE  00FA               	movwf	___ftdiv@f2+2
  4010  06FF  0842               	movf	strtod@_u,w
  4011  0700  00FB               	movwf	___ftdiv@f1
  4012  0701  0843               	movf	strtod@_u+1,w
  4013  0702  00FC               	movwf	___ftdiv@f1+1
  4014  0703  0844               	movf	strtod@_u+2,w
  4015  0704  00FD               	movwf	___ftdiv@f1+2
  4016  0705  318E  26A5  3185   	fcall	___ftdiv
  4017  0708  0878               	movf	?___ftdiv,w
  4018  0709  0020               	movlb	0	; select bank0
  4019  070A  00C2               	movwf	strtod@_u
  4020  070B  0879               	movf	?___ftdiv+1,w
  4021  070C  00C3               	movwf	strtod@_u+1
  4022  070D  087A               	movf	?___ftdiv+2,w
  4023  070E  00C4               	movwf	strtod@_u+2
  4024  070F  30FF               	movlw	255
  4025  0710  00AD               	movwf	??_strtod
  4026  0711  082D               	movf	??_strtod,w
  4027  0712  07C1               	addwf	strtod@expon,f
  4028  0713                     l2657:	
  4029  0713  0841               	movf	strtod@expon,w
  4030  0714  1D03               	btfss	3,2
  4031  0715  2EF9               	goto	l2653
  4032  0716  3000               	movlw	0
  4033  0717  00B1               	movwf	_strtod$512
  4034  0718  3080               	movlw	128
  4035  0719  00B2               	movwf	_strtod$512+1
  4036  071A  3000               	movlw	0
  4037  071B  00B3               	movwf	_strtod$512+2
  4038  071C  0842               	movf	strtod@_u,w
  4039  071D  00F0               	movwf	___ftge@ff1
  4040  071E  0843               	movf	strtod@_u+1,w
  4041  071F  00F1               	movwf	___ftge@ff1+1
  4042  0720  0844               	movf	strtod@_u+2,w
  4043  0721  00F2               	movwf	___ftge@ff1+2
  4044  0722  0831               	movf	_strtod$512,w
  4045  0723  00F3               	movwf	___ftge@ff2
  4046  0724  0832               	movf	_strtod$512+1,w
  4047  0725  00F4               	movwf	___ftge@ff2+1
  4048  0726  0833               	movf	_strtod$512+2,w
  4049  0727  00F5               	movwf	___ftge@ff2+2
  4050  0728  3189  21E4  3185   	fcall	___ftge
  4051  072B  1803               	btfsc	3,0
  4052  072C  2FC6               	goto	l479
  4053  072D  0020               	movlb	0	; select bank0
  4054  072E  1C40               	btfss	strtod@flags,0
  4055  072F  2F46               	goto	l2679
  4056  0730  3000               	movlw	0
  4057  0731  00B4               	movwf	_strtod$513
  4058  0732  3080               	movlw	128
  4059  0733  00B5               	movwf	_strtod$513+1
  4060  0734  3000               	movlw	0
  4061  0735  00B6               	movwf	_strtod$513+2
  4062  0736  0834               	movf	_strtod$513,w
  4063  0737  00F0               	movwf	___ftneg@f1
  4064  0738  0835               	movf	_strtod$513+1,w
  4065  0739  00F1               	movwf	___ftneg@f1+1
  4066  073A  0836               	movf	_strtod$513+2,w
  4067  073B  00F2               	movwf	___ftneg@f1+2
  4068  073C  3197  27D9         	fcall	___ftneg
  4069  073E  0870               	movf	?___ftneg,w
  4070  073F  0020               	movlb	0	; select bank0
  4071  0740  00AA               	movwf	?_strtod
  4072  0741  0871               	movf	?___ftneg+1,w
  4073  0742  00AB               	movwf	?_strtod+1
  4074  0743  0872               	movf	?___ftneg+2,w
  4075  0744  00AC               	movwf	?_strtod+2
  4076  0745  0008               	return
  4077  0746                     l2679:	
  4078  0746  3000               	movlw	0
  4079  0747  00AA               	movwf	?_strtod
  4080  0748  3080               	movlw	128
  4081  0749  00AB               	movwf	?_strtod+1
  4082  074A  3000               	movlw	0
  4083  074B  00AC               	movwf	?_strtod+2
  4084  074C  0008               	return
  4085  074D                     l2683:	
  4086  074D  0841               	movf	strtod@expon,w
  4087  074E  3A80               	xorlw	128
  4088  074F  3E7F               	addlw	-129
  4089  0750  1803               	btfsc	3,0
  4090  0751  2F6D               	goto	l2691
  4091  0752  2FC6               	goto	l479
  4092  0753                     l2687:	
  4093  0753  3003               	movlw	3
  4094  0754  00F8               	movwf	___ftmul@f1
  4095  0755  3015               	movlw	21
  4096  0756  00F9               	movwf	___ftmul@f1+1
  4097  0757  3050               	movlw	80
  4098  0758  00FA               	movwf	___ftmul@f1+2
  4099  0759  0842               	movf	strtod@_u,w
  4100  075A  00FB               	movwf	___ftmul@f2
  4101  075B  0843               	movf	strtod@_u+1,w
  4102  075C  00FC               	movwf	___ftmul@f2+1
  4103  075D  0844               	movf	strtod@_u+2,w
  4104  075E  00FD               	movwf	___ftmul@f2+2
  4105  075F  318F  274D  3185   	fcall	___ftmul
  4106  0762  0878               	movf	?___ftmul,w
  4107  0763  0020               	movlb	0	; select bank0
  4108  0764  00C2               	movwf	strtod@_u
  4109  0765  0879               	movf	?___ftmul+1,w
  4110  0766  00C3               	movwf	strtod@_u+1
  4111  0767  087A               	movf	?___ftmul+2,w
  4112  0768  00C4               	movwf	strtod@_u+2
  4113  0769  30F6               	movlw	246
  4114  076A  00AD               	movwf	??_strtod
  4115  076B  082D               	movf	??_strtod,w
  4116  076C  07C1               	addwf	strtod@expon,f
  4117  076D                     l2691:	
  4118  076D  300A               	movlw	10
  4119  076E  0241               	subwf	strtod@expon,w
  4120  076F  1C03               	btfss	3,0
  4121  0770  2F8C               	goto	l2697
  4122  0771  2F53               	goto	l2687
  4123  0772                     l2693:	
  4124  0772  3000               	movlw	0
  4125  0773  00F8               	movwf	___ftmul@f1
  4126  0774  3020               	movlw	32
  4127  0775  00F9               	movwf	___ftmul@f1+1
  4128  0776  3041               	movlw	65
  4129  0777  00FA               	movwf	___ftmul@f1+2
  4130  0778  0842               	movf	strtod@_u,w
  4131  0779  00FB               	movwf	___ftmul@f2
  4132  077A  0843               	movf	strtod@_u+1,w
  4133  077B  00FC               	movwf	___ftmul@f2+1
  4134  077C  0844               	movf	strtod@_u+2,w
  4135  077D  00FD               	movwf	___ftmul@f2+2
  4136  077E  318F  274D  3185   	fcall	___ftmul
  4137  0781  0878               	movf	?___ftmul,w
  4138  0782  0020               	movlb	0	; select bank0
  4139  0783  00C2               	movwf	strtod@_u
  4140  0784  0879               	movf	?___ftmul+1,w
  4141  0785  00C3               	movwf	strtod@_u+1
  4142  0786  087A               	movf	?___ftmul+2,w
  4143  0787  00C4               	movwf	strtod@_u+2
  4144  0788  30FF               	movlw	255
  4145  0789  00AD               	movwf	??_strtod
  4146  078A  082D               	movf	??_strtod,w
  4147  078B  07C1               	addwf	strtod@expon,f
  4148  078C                     l2697:	
  4149  078C  0841               	movf	strtod@expon,w
  4150  078D  1D03               	btfss	3,2
  4151  078E  2F72               	goto	l2693
  4152  078F  30FF               	movlw	255
  4153  0790  00B7               	movwf	_strtod$514
  4154  0791  307F               	movlw	127
  4155  0792  00B8               	movwf	_strtod$514+1
  4156  0793  307F               	movlw	127
  4157  0794  00B9               	movwf	_strtod$514+2
  4158  0795  0837               	movf	_strtod$514,w
  4159  0796  00F0               	movwf	___ftge@ff1
  4160  0797  0838               	movf	_strtod$514+1,w
  4161  0798  00F1               	movwf	___ftge@ff1+1
  4162  0799  0839               	movf	_strtod$514+2,w
  4163  079A  00F2               	movwf	___ftge@ff1+2
  4164  079B  0842               	movf	strtod@_u,w
  4165  079C  00F3               	movwf	___ftge@ff2
  4166  079D  0843               	movf	strtod@_u+1,w
  4167  079E  00F4               	movwf	___ftge@ff2+1
  4168  079F  0844               	movf	strtod@_u+2,w
  4169  07A0  00F5               	movwf	___ftge@ff2+2
  4170  07A1  3189  21E4  3185   	fcall	___ftge
  4171  07A4  1803               	btfsc	3,0
  4172  07A5  2FC6               	goto	l479
  4173  07A6  0020               	movlb	0	; select bank0
  4174  07A7  1C40               	btfss	strtod@flags,0
  4175  07A8  2FBF               	goto	l2719
  4176  07A9  3000               	movlw	0
  4177  07AA  00BA               	movwf	_strtod$515
  4178  07AB  3080               	movlw	128
  4179  07AC  00BB               	movwf	_strtod$515+1
  4180  07AD  3000               	movlw	0
  4181  07AE  00BC               	movwf	_strtod$515+2
  4182  07AF  083A               	movf	_strtod$515,w
  4183  07B0  00F0               	movwf	___ftneg@f1
  4184  07B1  083B               	movf	_strtod$515+1,w
  4185  07B2  00F1               	movwf	___ftneg@f1+1
  4186  07B3  083C               	movf	_strtod$515+2,w
  4187  07B4  00F2               	movwf	___ftneg@f1+2
  4188  07B5  3197  27D9         	fcall	___ftneg
  4189  07B7  0870               	movf	?___ftneg,w
  4190  07B8  0020               	movlb	0	; select bank0
  4191  07B9  00AA               	movwf	?_strtod
  4192  07BA  0871               	movf	?___ftneg+1,w
  4193  07BB  00AB               	movwf	?_strtod+1
  4194  07BC  0872               	movf	?___ftneg+2,w
  4195  07BD  00AC               	movwf	?_strtod+2
  4196  07BE  0008               	return
  4197  07BF                     l2719:	
  4198  07BF  3000               	movlw	0
  4199  07C0  00AA               	movwf	?_strtod
  4200  07C1  3080               	movlw	128
  4201  07C2  00AB               	movwf	?_strtod+1
  4202  07C3  3000               	movlw	0
  4203  07C4  00AC               	movwf	?_strtod+2
  4204  07C5  0008               	return
  4205  07C6                     l479:	
  4206  07C6  0020               	movlb	0	; select bank0
  4207  07C7  1C40               	btfss	strtod@flags,0
  4208  07C8  2FD8               	goto	l2725
  4209  07C9  0842               	movf	strtod@_u,w
  4210  07CA  00F0               	movwf	___ftneg@f1
  4211  07CB  0843               	movf	strtod@_u+1,w
  4212  07CC  00F1               	movwf	___ftneg@f1+1
  4213  07CD  0844               	movf	strtod@_u+2,w
  4214  07CE  00F2               	movwf	___ftneg@f1+2
  4215  07CF  3197  27D9         	fcall	___ftneg
  4216  07D1  0870               	movf	?___ftneg,w
  4217  07D2  0020               	movlb	0	; select bank0
  4218  07D3  00C2               	movwf	strtod@_u
  4219  07D4  0871               	movf	?___ftneg+1,w
  4220  07D5  00C3               	movwf	strtod@_u+1
  4221  07D6  0872               	movf	?___ftneg+2,w
  4222  07D7  00C4               	movwf	strtod@_u+2
  4223  07D8                     l2725:	
  4224  07D8  0842               	movf	strtod@_u,w
  4225  07D9  00AA               	movwf	?_strtod
  4226  07DA  0843               	movf	strtod@_u+1,w
  4227  07DB  00AB               	movwf	?_strtod+1
  4228  07DC  0844               	movf	strtod@_u+2,w
  4229  07DD  00AC               	movwf	?_strtod+2
  4230  07DE  0008               	return
  4231  07DF                     __end_of_strtod:	
  4232                           
  4233                           	psect	text9
  4234  083D                     __ptext9:	
  4235 ;; *************** function _isspace *****************
  4236 ;; Defined at:
  4237 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isspace.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  c               1    wreg     unsigned char 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  c               1    1[COMMON] unsigned char 
  4242 ;; Return value:  Size  Location     Type
  4243 ;;		None               void
  4244 ;; Registers used:
  4245 ;;		wreg, status,2, status,0
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4252 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;Total ram usage:        2 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; This function calls:
  4258 ;;		Nothing
  4259 ;; This function is called by:
  4260 ;;		_strtod
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           
  4265                           ;psect for function _isspace
  4266  083D                     _isspace:	
  4267                           
  4268                           ;incstack = 0
  4269                           ; Regs used in _isspace: [wreg+status,2+status,0]
  4270                           ;isspace@c stored from wreg
  4271  083D  00F1               	movwf	isspace@c
  4272  083E  01F0               	clrf	_isspace$594
  4273  083F  0AF0               	incf	_isspace$594,f
  4274  0840  3020               	movlw	32
  4275  0841  0671               	xorwf	isspace@c,w
  4276  0842  1903               	btfsc	3,2
  4277  0843  284D               	goto	l2165
  4278  0844  300E               	movlw	14
  4279  0845  0271               	subwf	isspace@c,w
  4280  0846  1803               	skipnc
  4281  0847  284C               	goto	l2163
  4282  0848  3009               	movlw	9
  4283  0849  0271               	subwf	isspace@c,w
  4284  084A  1803               	skipnc
  4285  084B  284D               	goto	l2165
  4286  084C                     l2163:	
  4287  084C  01F0               	clrf	_isspace$594
  4288  084D                     l2165:	
  4289  084D  0C70               	rrf	_isspace$594,w
  4290  084E  0008               	return
  4291  084F                     __end_of_isspace:	
  4292                           
  4293                           	psect	text10
  4294  09B5                     __ptext10:	
  4295 ;; *************** function ___lmul *****************
  4296 ;; Defined at:
  4297 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  multiplier      4    0[COMMON] unsigned long 
  4300 ;;  multiplicand    4    4[COMMON] unsigned long 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  product         4    8[COMMON] unsigned long 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  4    0[COMMON] unsigned long 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4312 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;Total ram usage:       12 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; This function calls:
  4319 ;;		Nothing
  4320 ;; This function is called by:
  4321 ;;		_strtod
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           
  4326                           ;psect for function ___lmul
  4327  09B5                     ___lmul:	
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4331  09B5  3000               	movlw	0
  4332  09B6  00FB               	movwf	___lmul@product+3
  4333  09B7  3000               	movlw	0
  4334  09B8  00FA               	movwf	___lmul@product+2
  4335  09B9  3000               	movlw	0
  4336  09BA  00F9               	movwf	___lmul@product+1
  4337  09BB  3000               	movlw	0
  4338  09BC  00F8               	movwf	___lmul@product
  4339  09BD                     l2113:	
  4340  09BD  1C70               	btfss	___lmul@multiplier,0
  4341  09BE  29C7               	goto	l2117
  4342  09BF  0874               	movf	___lmul@multiplicand,w
  4343  09C0  07F8               	addwf	___lmul@product,f
  4344  09C1  0875               	movf	___lmul@multiplicand+1,w
  4345  09C2  3DF9               	addwfc	___lmul@product+1,f
  4346  09C3  0876               	movf	___lmul@multiplicand+2,w
  4347  09C4  3DFA               	addwfc	___lmul@product+2,f
  4348  09C5  0877               	movf	___lmul@multiplicand+3,w
  4349  09C6  3DFB               	addwfc	___lmul@product+3,f
  4350  09C7                     l2117:	
  4351  09C7  3001               	movlw	1
  4352  09C8                     u2335:	
  4353  09C8  35F4               	lslf	___lmul@multiplicand,f
  4354  09C9  0DF5               	rlf	___lmul@multiplicand+1,f
  4355  09CA  0DF6               	rlf	___lmul@multiplicand+2,f
  4356  09CB  0DF7               	rlf	___lmul@multiplicand+3,f
  4357  09CC  0B89               	decfsz	9,f
  4358  09CD  29C8               	goto	u2335
  4359  09CE  3001               	movlw	1
  4360  09CF                     u2345:	
  4361  09CF  36F3               	lsrf	___lmul@multiplier+3,f
  4362  09D0  0CF2               	rrf	___lmul@multiplier+2,f
  4363  09D1  0CF1               	rrf	___lmul@multiplier+1,f
  4364  09D2  0CF0               	rrf	___lmul@multiplier,f
  4365  09D3  0B89               	decfsz	9,f
  4366  09D4  29CF               	goto	u2345
  4367  09D5  0873               	movf	___lmul@multiplier+3,w
  4368  09D6  0472               	iorwf	___lmul@multiplier+2,w
  4369  09D7  0471               	iorwf	___lmul@multiplier+1,w
  4370  09D8  0470               	iorwf	___lmul@multiplier,w
  4371  09D9  1D03               	skipz
  4372  09DA  29BD               	goto	l2113
  4373  09DB  087B               	movf	___lmul@product+3,w
  4374  09DC  00F3               	movwf	?___lmul+3
  4375  09DD  087A               	movf	___lmul@product+2,w
  4376  09DE  00F2               	movwf	?___lmul+2
  4377  09DF  0879               	movf	___lmul@product+1,w
  4378  09E0  00F1               	movwf	?___lmul+1
  4379  09E1  0878               	movf	___lmul@product,w
  4380  09E2  00F0               	movwf	?___lmul
  4381  09E3  0008               	return
  4382  09E4                     __end_of___lmul:	
  4383                           
  4384                           	psect	text11
  4385  0EA5                     __ptext11:	
  4386 ;; *************** function ___ftdiv *****************
  4387 ;; Defined at:
  4388 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  f2              3    8[COMMON] float 
  4391 ;;  f1              3   11[COMMON] float 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  f3              3    5[BANK0 ] float 
  4394 ;;  sign            1    9[BANK0 ] unsigned char 
  4395 ;;  exp             1    8[BANK0 ] unsigned char 
  4396 ;;  cntr            1    4[BANK0 ] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  3    8[COMMON] float 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4406 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;Total ram usage:       16 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    1
  4413 ;; This function calls:
  4414 ;;		___ftpack
  4415 ;; This function is called by:
  4416 ;;		_read_gps
  4417 ;;		_strtod
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function ___ftdiv
  4423  0EA5                     ___ftdiv:	
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4427  0EA5  087B               	movf	___ftdiv@f1,w
  4428  0EA6  0020               	movlb	0	; select bank0
  4429  0EA7  00A0               	movwf	??___ftdiv
  4430  0EA8  087C               	movf	___ftdiv@f1+1,w
  4431  0EA9  00A1               	movwf	??___ftdiv+1
  4432  0EAA  087D               	movf	___ftdiv@f1+2,w
  4433  0EAB  00A2               	movwf	??___ftdiv+2
  4434  0EAC  1003               	clrc
  4435  0EAD  0D21               	rlf	??___ftdiv+1,w
  4436  0EAE  0D22               	rlf	??___ftdiv+2,w
  4437  0EAF  00A3               	movwf	??___ftdiv+3
  4438  0EB0  0823               	movf	??___ftdiv+3,w
  4439  0EB1  00A8               	movwf	___ftdiv@exp
  4440  0EB2  0828               	movf	___ftdiv@exp,w
  4441  0EB3  1D03               	btfss	3,2
  4442  0EB4  2EBC               	goto	l2245
  4443  0EB5  3000               	movlw	0
  4444  0EB6  00F8               	movwf	?___ftdiv
  4445  0EB7  3000               	movlw	0
  4446  0EB8  00F9               	movwf	?___ftdiv+1
  4447  0EB9  3000               	movlw	0
  4448  0EBA  00FA               	movwf	?___ftdiv+2
  4449  0EBB  0008               	return
  4450  0EBC                     l2245:	
  4451  0EBC  0878               	movf	___ftdiv@f2,w
  4452  0EBD  00A0               	movwf	??___ftdiv
  4453  0EBE  0879               	movf	___ftdiv@f2+1,w
  4454  0EBF  00A1               	movwf	??___ftdiv+1
  4455  0EC0  087A               	movf	___ftdiv@f2+2,w
  4456  0EC1  00A2               	movwf	??___ftdiv+2
  4457  0EC2  1003               	clrc
  4458  0EC3  0D21               	rlf	??___ftdiv+1,w
  4459  0EC4  0D22               	rlf	??___ftdiv+2,w
  4460  0EC5  00A3               	movwf	??___ftdiv+3
  4461  0EC6  0823               	movf	??___ftdiv+3,w
  4462  0EC7  00A9               	movwf	___ftdiv@sign
  4463  0EC8  0829               	movf	___ftdiv@sign,w
  4464  0EC9  1D03               	btfss	3,2
  4465  0ECA  2ED2               	goto	l2251
  4466  0ECB  3000               	movlw	0
  4467  0ECC  00F8               	movwf	?___ftdiv
  4468  0ECD  3000               	movlw	0
  4469  0ECE  00F9               	movwf	?___ftdiv+1
  4470  0ECF  3000               	movlw	0
  4471  0ED0  00FA               	movwf	?___ftdiv+2
  4472  0ED1  0008               	return
  4473  0ED2                     l2251:	
  4474  0ED2  3000               	movlw	0
  4475  0ED3  00A5               	movwf	___ftdiv@f3
  4476  0ED4  3000               	movlw	0
  4477  0ED5  00A6               	movwf	___ftdiv@f3+1
  4478  0ED6  3000               	movlw	0
  4479  0ED7  00A7               	movwf	___ftdiv@f3+2
  4480  0ED8  3089               	movlw	137
  4481  0ED9  0729               	addwf	___ftdiv@sign,w
  4482  0EDA  00A0               	movwf	??___ftdiv
  4483  0EDB  0820               	movf	??___ftdiv,w
  4484  0EDC  02A8               	subwf	___ftdiv@exp,f
  4485  0EDD  087B               	movf	___ftdiv@f1,w
  4486  0EDE  00A0               	movwf	??___ftdiv
  4487  0EDF  087C               	movf	___ftdiv@f1+1,w
  4488  0EE0  00A1               	movwf	??___ftdiv+1
  4489  0EE1  087D               	movf	___ftdiv@f1+2,w
  4490  0EE2  00A2               	movwf	??___ftdiv+2
  4491  0EE3  3010               	movlw	16
  4492  0EE4                     u2695:	
  4493  0EE4  36A2               	lsrf	??___ftdiv+2,f
  4494  0EE5  0CA1               	rrf	??___ftdiv+1,f
  4495  0EE6  0CA0               	rrf	??___ftdiv,f
  4496  0EE7  0B89               	decfsz	9,f
  4497  0EE8  2EE4               	goto	u2695
  4498  0EE9  0820               	movf	??___ftdiv,w
  4499  0EEA  00A3               	movwf	??___ftdiv+3
  4500  0EEB  0823               	movf	??___ftdiv+3,w
  4501  0EEC  00A9               	movwf	___ftdiv@sign
  4502  0EED  0878               	movf	___ftdiv@f2,w
  4503  0EEE  00A0               	movwf	??___ftdiv
  4504  0EEF  0879               	movf	___ftdiv@f2+1,w
  4505  0EF0  00A1               	movwf	??___ftdiv+1
  4506  0EF1  087A               	movf	___ftdiv@f2+2,w
  4507  0EF2  00A2               	movwf	??___ftdiv+2
  4508  0EF3  3010               	movlw	16
  4509  0EF4                     u2705:	
  4510  0EF4  36A2               	lsrf	??___ftdiv+2,f
  4511  0EF5  0CA1               	rrf	??___ftdiv+1,f
  4512  0EF6  0CA0               	rrf	??___ftdiv,f
  4513  0EF7  0B89               	decfsz	9,f
  4514  0EF8  2EF4               	goto	u2705
  4515  0EF9  0820               	movf	??___ftdiv,w
  4516  0EFA  00A3               	movwf	??___ftdiv+3
  4517  0EFB  0823               	movf	??___ftdiv+3,w
  4518  0EFC  06A9               	xorwf	___ftdiv@sign,f
  4519  0EFD  3080               	movlw	128
  4520  0EFE  00A0               	movwf	??___ftdiv
  4521  0EFF  0820               	movf	??___ftdiv,w
  4522  0F00  05A9               	andwf	___ftdiv@sign,f
  4523  0F01  17FC               	bsf	___ftdiv@f1+1,7
  4524  0F02  30FF               	movlw	255
  4525  0F03  05FB               	andwf	___ftdiv@f1,f
  4526  0F04  30FF               	movlw	255
  4527  0F05  05FC               	andwf	___ftdiv@f1+1,f
  4528  0F06  3000               	movlw	0
  4529  0F07  05FD               	andwf	___ftdiv@f1+2,f
  4530  0F08  17F9               	bsf	___ftdiv@f2+1,7
  4531  0F09  30FF               	movlw	255
  4532  0F0A  05F8               	andwf	___ftdiv@f2,f
  4533  0F0B  30FF               	movlw	255
  4534  0F0C  05F9               	andwf	___ftdiv@f2+1,f
  4535  0F0D  3000               	movlw	0
  4536  0F0E  05FA               	andwf	___ftdiv@f2+2,f
  4537  0F0F  3018               	movlw	24
  4538  0F10  00A0               	movwf	??___ftdiv
  4539  0F11  0820               	movf	??___ftdiv,w
  4540  0F12  00A4               	movwf	___ftdiv@cntr
  4541  0F13                     l2265:	
  4542  0F13  3001               	movlw	1
  4543  0F14                     u2715:	
  4544  0F14  35A5               	lslf	___ftdiv@f3,f
  4545  0F15  0DA6               	rlf	___ftdiv@f3+1,f
  4546  0F16  0DA7               	rlf	___ftdiv@f3+2,f
  4547  0F17  0B89               	decfsz	9,f
  4548  0F18  2F14               	goto	u2715
  4549  0F19  087A               	movf	___ftdiv@f2+2,w
  4550  0F1A  027D               	subwf	___ftdiv@f1+2,w
  4551  0F1B  1D03               	skipz
  4552  0F1C  2F23               	goto	u2725
  4553  0F1D  0879               	movf	___ftdiv@f2+1,w
  4554  0F1E  027C               	subwf	___ftdiv@f1+1,w
  4555  0F1F  1D03               	skipz
  4556  0F20  2F23               	goto	u2725
  4557  0F21  0878               	movf	___ftdiv@f2,w
  4558  0F22  027B               	subwf	___ftdiv@f1,w
  4559  0F23                     u2725:	
  4560  0F23  1C03               	skipc
  4561  0F24  2F2C               	goto	l2273
  4562  0F25  0878               	movf	___ftdiv@f2,w
  4563  0F26  02FB               	subwf	___ftdiv@f1,f
  4564  0F27  0879               	movf	___ftdiv@f2+1,w
  4565  0F28  3BFC               	subwfb	___ftdiv@f1+1,f
  4566  0F29  087A               	movf	___ftdiv@f2+2,w
  4567  0F2A  3BFD               	subwfb	___ftdiv@f1+2,f
  4568  0F2B  1425               	bsf	___ftdiv@f3,0
  4569  0F2C                     l2273:	
  4570  0F2C  3001               	movlw	1
  4571  0F2D                     u2735:	
  4572  0F2D  35FB               	lslf	___ftdiv@f1,f
  4573  0F2E  0DFC               	rlf	___ftdiv@f1+1,f
  4574  0F2F  0DFD               	rlf	___ftdiv@f1+2,f
  4575  0F30  0B89               	decfsz	9,f
  4576  0F31  2F2D               	goto	u2735
  4577  0F32  3001               	movlw	1
  4578  0F33  02A4               	subwf	___ftdiv@cntr,f
  4579  0F34  1D03               	btfss	3,2
  4580  0F35  2F13               	goto	l2265
  4581  0F36  0825               	movf	___ftdiv@f3,w
  4582  0F37  00F0               	movwf	___ftpack@arg
  4583  0F38  0826               	movf	___ftdiv@f3+1,w
  4584  0F39  00F1               	movwf	___ftpack@arg+1
  4585  0F3A  0827               	movf	___ftdiv@f3+2,w
  4586  0F3B  00F2               	movwf	___ftpack@arg+2
  4587  0F3C  0828               	movf	___ftdiv@exp,w
  4588  0F3D  00A0               	movwf	??___ftdiv
  4589  0F3E  0820               	movf	??___ftdiv,w
  4590  0F3F  00F3               	movwf	___ftpack@exp
  4591  0F40  0829               	movf	___ftdiv@sign,w
  4592  0F41  00A1               	movwf	??___ftdiv+1
  4593  0F42  0821               	movf	??___ftdiv+1,w
  4594  0F43  00F4               	movwf	___ftpack@sign
  4595  0F44  3180  2006         	fcall	___ftpack
  4596  0F46  0870               	movf	?___ftpack,w
  4597  0F47  00F8               	movwf	?___ftdiv
  4598  0F48  0871               	movf	?___ftpack+1,w
  4599  0F49  00F9               	movwf	?___ftdiv+1
  4600  0F4A  0872               	movf	?___ftpack+2,w
  4601  0F4B  00FA               	movwf	?___ftdiv+2
  4602  0F4C  0008               	return
  4603  0F4D                     __end_of___ftdiv:	
  4604                           
  4605                           	psect	text12
  4606  082C                     __ptext12:	
  4607 ;; *************** function ___bmul *****************
  4608 ;; Defined at:
  4609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  multiplier      1    wreg     unsigned char 
  4612 ;;  multiplicand    1    0[COMMON] unsigned char 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  multiplier      1    3[COMMON] unsigned char 
  4615 ;;  product         1    2[COMMON] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      unsigned char 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2, status,0
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4625 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;Total ram usage:        4 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_strtod
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           
  4639                           ;psect for function ___bmul
  4640  082C                     ___bmul:	
  4641                           
  4642                           ;incstack = 0
  4643                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4644                           ;___bmul@multiplier stored from wreg
  4645  082C  00F3               	movwf	___bmul@multiplier
  4646  082D  01F2               	clrf	___bmul@product
  4647  082E                     l2127:	
  4648  082E  1C73               	btfss	___bmul@multiplier,0
  4649  082F  2834               	goto	l2131
  4650  0830  0870               	movf	___bmul@multiplicand,w
  4651  0831  00F1               	movwf	??___bmul
  4652  0832  0871               	movf	??___bmul,w
  4653  0833  07F2               	addwf	___bmul@product,f
  4654  0834                     l2131:	
  4655  0834  1003               	clrc
  4656  0835  0DF0               	rlf	___bmul@multiplicand,f
  4657  0836  1003               	clrc
  4658  0837  0CF3               	rrf	___bmul@multiplier,f
  4659  0838  0873               	movf	___bmul@multiplier,w
  4660  0839  1D03               	btfss	3,2
  4661  083A  282E               	goto	l2127
  4662  083B  0872               	movf	___bmul@product,w
  4663  083C  0008               	return
  4664  083D                     __end_of___bmul:	
  4665                           
  4666                           	psect	text13
  4667  0A1F                     __ptext13:	
  4668 ;; *************** function ___altoft *****************
  4669 ;; Defined at:
  4670 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  c               4    8[COMMON] long 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  sign            1    1[BANK0 ] unsigned char 
  4675 ;;  exp             1    0[BANK0 ] unsigned char 
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  3    8[COMMON] float 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2, status,0, pclath, cstack
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4685 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;      Totals:         6       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;Total ram usage:        8 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    1
  4692 ;; This function calls:
  4693 ;;		___ftpack
  4694 ;; This function is called by:
  4695 ;;		_strtod
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function ___altoft
  4701  0A1F                     ___altoft:	
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  4705  0A1F  0020               	movlb	0	; select bank0
  4706  0A20  01A1               	clrf	___altoft@sign
  4707  0A21  308E               	movlw	142
  4708  0A22  00FC               	movwf	??___altoft
  4709  0A23  087C               	movf	??___altoft,w
  4710  0A24  00A0               	movwf	___altoft@exp
  4711  0A25  1FFB               	btfss	___altoft@c+3,7
  4712  0A26  2A34               	goto	l2149
  4713  0A27  09F8               	comf	___altoft@c,f
  4714  0A28  09F9               	comf	___altoft@c+1,f
  4715  0A29  09FA               	comf	___altoft@c+2,f
  4716  0A2A  09FB               	comf	___altoft@c+3,f
  4717  0A2B  0AF8               	incf	___altoft@c,f
  4718  0A2C  1903               	skipnz
  4719  0A2D  0AF9               	incf	___altoft@c+1,f
  4720  0A2E  1903               	skipnz
  4721  0A2F  0AFA               	incf	___altoft@c+2,f
  4722  0A30  1903               	skipnz
  4723  0A31  0AFB               	incf	___altoft@c+3,f
  4724  0A32  01A1               	clrf	___altoft@sign
  4725  0A33  0AA1               	incf	___altoft@sign,f
  4726  0A34                     l2149:	
  4727  0A34  30FF               	movlw	255
  4728  0A35  057B               	andwf	___altoft@c+3,w
  4729  0A36  1903               	btfsc	3,2
  4730  0A37  2A44               	goto	l2151
  4731  0A38  3001               	movlw	1
  4732  0A39                     u2395:	
  4733  0A39  36FB               	lsrf	___altoft@c+3,f
  4734  0A3A  0CFA               	rrf	___altoft@c+2,f
  4735  0A3B  0CF9               	rrf	___altoft@c+1,f
  4736  0A3C  0CF8               	rrf	___altoft@c,f
  4737  0A3D  0B89               	decfsz	9,f
  4738  0A3E  2A39               	goto	u2395
  4739  0A3F  3001               	movlw	1
  4740  0A40  00FC               	movwf	??___altoft
  4741  0A41  087C               	movf	??___altoft,w
  4742  0A42  07A0               	addwf	___altoft@exp,f
  4743  0A43  2A34               	goto	l2149
  4744  0A44                     l2151:	
  4745  0A44  0878               	movf	___altoft@c,w
  4746  0A45  00F0               	movwf	___ftpack@arg
  4747  0A46  0879               	movf	___altoft@c+1,w
  4748  0A47  00F1               	movwf	___ftpack@arg+1
  4749  0A48  087A               	movf	___altoft@c+2,w
  4750  0A49  00F2               	movwf	___ftpack@arg+2
  4751  0A4A  0820               	movf	___altoft@exp,w
  4752  0A4B  00FC               	movwf	??___altoft
  4753  0A4C  087C               	movf	??___altoft,w
  4754  0A4D  00F3               	movwf	___ftpack@exp
  4755  0A4E  0821               	movf	___altoft@sign,w
  4756  0A4F  00FD               	movwf	??___altoft+1
  4757  0A50  087D               	movf	??___altoft+1,w
  4758  0A51  00F4               	movwf	___ftpack@sign
  4759  0A52  3180  2006         	fcall	___ftpack
  4760  0A54  0870               	movf	?___ftpack,w
  4761  0A55  00F8               	movwf	?___altoft
  4762  0A56  0871               	movf	?___ftpack+1,w
  4763  0A57  00F9               	movwf	?___altoft+1
  4764  0A58  0872               	movf	?___ftpack+2,w
  4765  0A59  00FA               	movwf	?___altoft+2
  4766  0A5A  0008               	return
  4767  0A5B                     __end_of___altoft:	
  4768                           
  4769                           	psect	text14
  4770  17EA                     __ptext14:	
  4771 ;; *************** function _EUSART_Read_Char *****************
  4772 ;; Defined at:
  4773 ;;		line 114 in file "EUSART.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;  Output          2    0[COMMON] PTR unsigned char 
  4776 ;;		 -> RAM(4096), 
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      unsigned char 
  4781 ;; Registers used:
  4782 ;;		wreg, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;Total ram usage:        4 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    1
  4795 ;; This function calls:
  4796 ;;		_EUSART_Read
  4797 ;; This function is called by:
  4798 ;;		_read_gps
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function _EUSART_Read_Char
  4804  17EA                     _EUSART_Read_Char:	
  4805                           
  4806                           ;EUSART.c: 116: Output = EUSART_Read();
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _EUSART_Read_Char: [wreg+pclath+cstack]
  4810  17EA  3197  27F4         	fcall	_EUSART_Read
  4811  17EC  00F2               	movwf	??_EUSART_Read_Char
  4812  17ED  01F3               	clrf	??_EUSART_Read_Char+1
  4813  17EE  0872               	movf	??_EUSART_Read_Char,w
  4814  17EF  00F0               	movwf	EUSART_Read_Char@Output
  4815  17F0  0873               	movf	??_EUSART_Read_Char+1,w
  4816  17F1  00F1               	movwf	EUSART_Read_Char@Output+1
  4817                           
  4818                           ;EUSART.c: 117: return Output;
  4819  17F2  0870               	movf	EUSART_Read_Char@Output,w
  4820  17F3  0008               	return
  4821  17F4                     __end_of_EUSART_Read_Char:	
  4822                           
  4823                           	psect	text15
  4824  17F4                     __ptext15:	
  4825 ;; *************** function _EUSART_Read *****************
  4826 ;; Defined at:
  4827 ;;		line 68 in file "EUSART.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      unsigned char 
  4834 ;; Registers used:
  4835 ;;		wreg
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;Total ram usage:        0 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; This function calls:
  4848 ;;		Nothing
  4849 ;; This function is called by:
  4850 ;;		_EUSART_Read_Char
  4851 ;;		_EUSART_Read_Text
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function _EUSART_Read
  4857  17F4                     _EUSART_Read:	
  4858                           
  4859                           ;EUSART.c: 71: RC1STAbits.SREN = 1;
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _EUSART_Read: [wreg]
  4863  17F4  0023               	movlb	3	; select bank3
  4864  17F5  169D               	bsf	29,5	;volatile
  4865  17F6                     l67:	
  4866                           ;EUSART.c: 73: {
  4867                           
  4868                           ;EUSART.c: 72: while(!PIR1bits.RCIF)
  4869                           
  4870  17F6  0020               	movlb	0	; select bank0
  4871  17F7  1E91               	btfss	17,5	;volatile
  4872  17F8  2FF6               	goto	l67
  4873                           
  4874                           ;EUSART.c: 74: }
  4875                           ;EUSART.c: 77: if(1 == RC1STAbits.OERR)
  4876  17F9  0023               	movlb	3	; select bank3
  4877  17FA  1C9D               	btfss	29,1	;volatile
  4878  17FB  2FFE               	goto	l2407
  4879                           
  4880                           ;EUSART.c: 78: {
  4881                           ;EUSART.c: 81: RC1STAbits.SPEN = 0;
  4882  17FC  139D               	bcf	29,7	;volatile
  4883                           
  4884                           ;EUSART.c: 82: RC1STAbits.SPEN = 1;
  4885  17FD  179D               	bsf	29,7	;volatile
  4886  17FE                     l2407:	
  4887                           
  4888                           ;EUSART.c: 83: }
  4889                           ;EUSART.c: 85: return RC1REG;
  4890  17FE  0819               	movf	25,w	;volatile
  4891  17FF  0008               	return
  4892  1800                     __end_of_EUSART_Read:	
  4893                           
  4894                           	psect	text16
  4895  095F                     __ptext16:	
  4896 ;; *************** function _initMain *****************
  4897 ;; Defined at:
  4898 ;;		line 68 in file "Main.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;		None
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  1    wreg      void 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0, pclath, cstack
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;Total ram usage:        0 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; Hardware stack levels required when called:    1
  4919 ;; This function calls:
  4920 ;;		_internal_16
  4921 ;; This function is called by:
  4922 ;;		_main
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           
  4927                           ;psect for function _initMain
  4928  095F                     _initMain:	
  4929                           
  4930                           ;Main.c: 70: internal_16();
  4931                           
  4932                           ;incstack = 0
  4933                           ; Regs used in _initMain: [wreg+status,2+status,0+pclath+cstack]
  4934  095F  3197  27E1         	fcall	_internal_16
  4935                           
  4936                           ;Main.c: 74: TRISBbits.TRISB3 = 1;
  4937  0961  0021               	movlb	1	; select bank1
  4938  0962  158D               	bsf	13,3	;volatile
  4939                           
  4940                           ;Main.c: 75: ANSELBbits.ANSB3 = 0;
  4941  0963  0023               	movlb	3	; select bank3
  4942  0964  118D               	bcf	13,3	;volatile
  4943                           
  4944                           ;Main.c: 77: TRISBbits.TRISB2 = 0;
  4945  0965  0021               	movlb	1	; select bank1
  4946  0966  110D               	bcf	13,2	;volatile
  4947                           
  4948                           ;Main.c: 78: ANSELBbits.ANSB2 = 0;
  4949  0967  0023               	movlb	3	; select bank3
  4950  0968  110D               	bcf	13,2	;volatile
  4951                           
  4952                           ;Main.c: 80: TRISD = 0;
  4953  0969  0021               	movlb	1	; select bank1
  4954  096A  018F               	clrf	15	;volatile
  4955                           
  4956                           ;Main.c: 81: ANSELD = 0;
  4957  096B  0023               	movlb	3	; select bank3
  4958  096C  018F               	clrf	15	;volatile
  4959                           
  4960                           ;Main.c: 82: PORTD = 0;
  4961  096D  0020               	movlb	0	; select bank0
  4962  096E  018F               	clrf	15	;volatile
  4963                           
  4964                           ;Main.c: 87: PPSLOCK = 0x55;
  4965  096F  3055               	movlw	85
  4966  0970  003C               	movlb	28	; select bank28
  4967  0971  008F               	movwf	15	;volatile
  4968                           
  4969                           ;Main.c: 88: PPSLOCK = 0xAA;
  4970  0972  30AA               	movlw	170
  4971  0973  008F               	movwf	15	;volatile
  4972                           
  4973                           ;Main.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
  4974  0974  100F               	bcf	15,0	;volatile
  4975                           
  4976                           ;Main.c: 91: RB2PPSbits.RB2PPS = 0x14;
  4977  0975  003D               	movlb	29	; select bank29
  4978  0976  081A               	movf	26,w	;volatile
  4979  0977  39E0               	andlw	-32
  4980  0978  3814               	iorlw	20
  4981  0979  009A               	movwf	26	;volatile
  4982                           
  4983                           ;Main.c: 92: RXPPSbits.RXPPS = 0x0B;
  4984  097A  003C               	movlb	28	; select bank28
  4985  097B  0824               	movf	36,w	;volatile
  4986  097C  39E0               	andlw	-32
  4987  097D  380B               	iorlw	11
  4988  097E  00A4               	movwf	36	;volatile
  4989                           
  4990                           ;Main.c: 94: PPSLOCK = 0x55;
  4991  097F  3055               	movlw	85
  4992  0980  008F               	movwf	15	;volatile
  4993                           
  4994                           ;Main.c: 95: PPSLOCK = 0xAA;
  4995  0981  30AA               	movlw	170
  4996  0982  008F               	movwf	15	;volatile
  4997                           
  4998                           ;Main.c: 96: PPSLOCKbits.PPSLOCKED = 0x01;
  4999  0983  140F               	bsf	15,0	;volatile
  5000                           
  5001                           ;Main.c: 98: INTCONbits.GIE = 1;
  5002  0984  178B               	bsf	11,7	;volatile
  5003                           
  5004                           ;Main.c: 99: INTCONbits.PEIE = 1;
  5005  0985  170B               	bsf	11,6	;volatile
  5006                           
  5007                           ;Main.c: 102: PIE1bits.RCIE = 1;
  5008  0986  0021               	movlb	1	; select bank1
  5009  0987  1691               	bsf	17,5	;volatile
  5010  0988  0008               	return
  5011  0989                     __end_of_initMain:	
  5012                           
  5013                           	psect	text17
  5014  17E1                     __ptext17:	
  5015 ;; *************** function _internal_16 *****************
  5016 ;; Defined at:
  5017 ;;		line 56 in file "16F1717_Internal.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		None
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;Total ram usage:        0 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; This function calls:
  5038 ;;		Nothing
  5039 ;; This function is called by:
  5040 ;;		_initMain
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _internal_16
  5046  17E1                     _internal_16:	
  5047                           
  5048                           ;16F1717_Internal.c: 58: SCS0 = 0;
  5049                           
  5050                           ;incstack = 0
  5051                           ; Regs used in _internal_16: []
  5052  17E1  0021               	movlb	1	; select bank1
  5053  17E2  1019               	bcf	25,0	;volatile
  5054                           
  5055                           ;16F1717_Internal.c: 59: SCS1 = 0;
  5056  17E3  1099               	bcf	25,1	;volatile
  5057                           
  5058                           ;16F1717_Internal.c: 62: IRCF0 = 1;
  5059  17E4  1599               	bsf	25,3	;volatile
  5060                           
  5061                           ;16F1717_Internal.c: 63: IRCF1 = 1;
  5062  17E5  1619               	bsf	25,4	;volatile
  5063                           
  5064                           ;16F1717_Internal.c: 64: IRCF2 = 1;
  5065  17E6  1699               	bsf	25,5	;volatile
  5066                           
  5067                           ;16F1717_Internal.c: 65: IRCF3 = 1;
  5068  17E7  1719               	bsf	25,6	;volatile
  5069                           
  5070                           ;16F1717_Internal.c: 68: SPLLEN = 0;
  5071  17E8  1399               	bcf	25,7	;volatile
  5072  17E9  0008               	return
  5073  17EA                     __end_of_internal_16:	
  5074                           
  5075                           	psect	text18
  5076  0863                     __ptext18:	
  5077 ;; *************** function _Lcd_Write_Float *****************
  5078 ;; Defined at:
  5079 ;;		line 229 in file "LCD.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  f               3   74[BANK0 ] float 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  status          2    0[BANK1 ] int 
  5084 ;;  buf11           1    2[BANK1 ] PTR unsigned char 
  5085 ;;		 -> ftoa@buf(17), 
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5095 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Totals:         0       5       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;Total ram usage:        8 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    4
  5102 ;; This function calls:
  5103 ;;		_Lcd_Write_String
  5104 ;;		_ftoa
  5105 ;; This function is called by:
  5106 ;;		_main
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           
  5111                           ;psect for function _Lcd_Write_Float
  5112  0863                     _Lcd_Write_Float:	
  5113                           
  5114                           ;LCD.c: 231: char* buf11;
  5115                           ;LCD.c: 232: int status;
  5116                           ;LCD.c: 234: buf11 = ftoa(f, &status);
  5117                           
  5118                           ;incstack = 0
  5119                           ; Regs used in _Lcd_Write_Float: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5120  0863  0020               	movlb	0	; select bank0
  5121  0864  086A               	movf	Lcd_Write_Float@f,w
  5122  0865  00DC               	movwf	ftoa@f
  5123  0866  086B               	movf	Lcd_Write_Float@f+1,w
  5124  0867  00DD               	movwf	ftoa@f+1
  5125  0868  086C               	movf	Lcd_Write_Float@f+2,w
  5126  0869  00DE               	movwf	ftoa@f+2
  5127  086A  30C7               	movlw	(low (Lcd_Write_Float@status| 0))& (0+255)
  5128  086B  00ED               	movwf	??_Lcd_Write_Float
  5129  086C  086D               	movf	??_Lcd_Write_Float,w
  5130  086D  00DF               	movwf	ftoa@status
  5131  086E  318D  255D  3188   	fcall	_ftoa
  5132  0871  0020               	movlb	0	; select bank0
  5133  0872  00EE               	movwf	??_Lcd_Write_Float+1
  5134  0873  086E               	movf	??_Lcd_Write_Float+1,w
  5135  0874  0021               	movlb	1	; select bank1
  5136  0875  00C9               	movwf	Lcd_Write_Float@buf11^(0+128)
  5137                           
  5138                           ;LCD.c: 236: Lcd_Write_String(buf11);
  5139  0876  0849               	movf	Lcd_Write_Float@buf11^(0+128),w
  5140  0877  3188  20C5         	fcall	_Lcd_Write_String
  5141  0879  0008               	return
  5142  087A                     __end_of_Lcd_Write_Float:	
  5143                           
  5144                           	psect	text19
  5145  0D5D                     __ptext19:	
  5146 ;; *************** function _ftoa *****************
  5147 ;; Defined at:
  5148 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftoa.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  f               3   60[BANK0 ] float 
  5151 ;;  status          1   63[BANK0 ] PTR int 
  5152 ;;		 -> Lcd_Write_Float@status(2), 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  l               4   69[BANK0 ] unsigned long 
  5155 ;;  rem             4   65[BANK0 ] unsigned long 
  5156 ;;  cp              1   73[BANK0 ] PTR unsigned char 
  5157 ;;		 -> ftoa@buf(17), 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      PTR unsigned char 
  5160 ;; Registers used:
  5161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5167 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5171 ;;Total ram usage:       14 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    3
  5174 ;; This function calls:
  5175 ;;		___ftge
  5176 ;;		___ftmul
  5177 ;;		___ftneg
  5178 ;;		___ftsub
  5179 ;;		___fttol
  5180 ;;		___lltoft
  5181 ;;		_sprintf
  5182 ;; This function is called by:
  5183 ;;		_Lcd_Write_Float
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           
  5188                           ;psect for function _ftoa
  5189  0D5D                     _ftoa:	
  5190                           
  5191                           ;incstack = 0
  5192                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5193  0D5D  30A8               	movlw	(low (ftoa@buf| 0))& (0+255)
  5194  0D5E  0020               	movlb	0	; select bank0
  5195  0D5F  00E0               	movwf	??_ftoa
  5196  0D60  0860               	movf	??_ftoa,w
  5197  0D61  00E9               	movwf	ftoa@cp
  5198  0D62  085C               	movf	ftoa@f,w
  5199  0D63  00F0               	movwf	___ftge@ff1
  5200  0D64  085D               	movf	ftoa@f+1,w
  5201  0D65  00F1               	movwf	___ftge@ff1+1
  5202  0D66  085E               	movf	ftoa@f+2,w
  5203  0D67  00F2               	movwf	___ftge@ff1+2
  5204  0D68  3000               	movlw	0
  5205  0D69  00F3               	movwf	___ftge@ff2
  5206  0D6A  3000               	movlw	0
  5207  0D6B  00F4               	movwf	___ftge@ff2+1
  5208  0D6C  3000               	movlw	0
  5209  0D6D  00F5               	movwf	___ftge@ff2+2
  5210  0D6E  3189  21E4  318D   	fcall	___ftge
  5211  0D71  1803               	btfsc	3,0
  5212  0D72  2D8F               	goto	l2863
  5213  0D73  302D               	movlw	45
  5214  0D74  0020               	movlb	0	; select bank0
  5215  0D75  00E0               	movwf	??_ftoa
  5216  0D76  0869               	movf	ftoa@cp,w
  5217  0D77  0086               	movwf	6
  5218  0D78  0187               	clrf	7
  5219  0D79  0860               	movf	??_ftoa,w
  5220  0D7A  0081               	movwf	1
  5221  0D7B  3001               	movlw	1
  5222  0D7C  00E0               	movwf	??_ftoa
  5223  0D7D  0860               	movf	??_ftoa,w
  5224  0D7E  07E9               	addwf	ftoa@cp,f
  5225  0D7F  085C               	movf	ftoa@f,w
  5226  0D80  00F0               	movwf	___ftneg@f1
  5227  0D81  085D               	movf	ftoa@f+1,w
  5228  0D82  00F1               	movwf	___ftneg@f1+1
  5229  0D83  085E               	movf	ftoa@f+2,w
  5230  0D84  00F2               	movwf	___ftneg@f1+2
  5231  0D85  3197  27D9  318D   	fcall	___ftneg
  5232  0D88  0870               	movf	?___ftneg,w
  5233  0D89  0020               	movlb	0	; select bank0
  5234  0D8A  00DC               	movwf	ftoa@f
  5235  0D8B  0871               	movf	?___ftneg+1,w
  5236  0D8C  00DD               	movwf	ftoa@f+1
  5237  0D8D  0872               	movf	?___ftneg+2,w
  5238  0D8E  00DE               	movwf	ftoa@f+2
  5239  0D8F                     l2863:	
  5240  0D8F  0020               	movlb	0	; select bank0
  5241  0D90  085C               	movf	ftoa@f,w
  5242  0D91  00AA               	movwf	___fttol@f1
  5243  0D92  085D               	movf	ftoa@f+1,w
  5244  0D93  00AB               	movwf	___fttol@f1+1
  5245  0D94  085E               	movf	ftoa@f+2,w
  5246  0D95  00AC               	movwf	___fttol@f1+2
  5247  0D96  318C  24D6  318D   	fcall	___fttol
  5248  0D99  0020               	movlb	0	; select bank0
  5249  0D9A  082D               	movf	?___fttol+3,w
  5250  0D9B  00E8               	movwf	ftoa@l+3
  5251  0D9C  082C               	movf	?___fttol+2,w
  5252  0D9D  00E7               	movwf	ftoa@l+2
  5253  0D9E  082B               	movf	?___fttol+1,w
  5254  0D9F  00E6               	movwf	ftoa@l+1
  5255  0DA0  082A               	movf	?___fttol,w
  5256  0DA1  00E5               	movwf	ftoa@l
  5257  0DA2  0868               	movf	ftoa@l+3,w
  5258  0DA3  00FB               	movwf	___lltoft@c+3
  5259  0DA4  0867               	movf	ftoa@l+2,w
  5260  0DA5  00FA               	movwf	___lltoft@c+2
  5261  0DA6  0866               	movf	ftoa@l+1,w
  5262  0DA7  00F9               	movwf	___lltoft@c+1
  5263  0DA8  0865               	movf	ftoa@l,w
  5264  0DA9  00F8               	movwf	___lltoft@c
  5265  0DAA  3189  2137  318D   	fcall	___lltoft
  5266  0DAD  0878               	movf	?___lltoft,w
  5267  0DAE  0020               	movlb	0	; select bank0
  5268  0DAF  00D6               	movwf	___ftsub@f2
  5269  0DB0  0879               	movf	?___lltoft+1,w
  5270  0DB1  00D7               	movwf	___ftsub@f2+1
  5271  0DB2  087A               	movf	?___lltoft+2,w
  5272  0DB3  00D8               	movwf	___ftsub@f2+2
  5273  0DB4  085C               	movf	ftoa@f,w
  5274  0DB5  00D9               	movwf	___ftsub@f1
  5275  0DB6  085D               	movf	ftoa@f+1,w
  5276  0DB7  00DA               	movwf	___ftsub@f1+1
  5277  0DB8  085E               	movf	ftoa@f+2,w
  5278  0DB9  00DB               	movwf	___ftsub@f1+2
  5279  0DBA  3188  20FB  318D   	fcall	___ftsub
  5280  0DBD  0020               	movlb	0	; select bank0
  5281  0DBE  0856               	movf	?___ftsub,w
  5282  0DBF  00DC               	movwf	ftoa@f
  5283  0DC0  0857               	movf	?___ftsub+1,w
  5284  0DC1  00DD               	movwf	ftoa@f+1
  5285  0DC2  0858               	movf	?___ftsub+2,w
  5286  0DC3  00DE               	movwf	ftoa@f+2
  5287  0DC4  085C               	movf	ftoa@f,w
  5288  0DC5  00FB               	movwf	___ftmul@f2
  5289  0DC6  085D               	movf	ftoa@f+1,w
  5290  0DC7  00FC               	movwf	___ftmul@f2+1
  5291  0DC8  085E               	movf	ftoa@f+2,w
  5292  0DC9  00FD               	movwf	___ftmul@f2+2
  5293  0DCA  3024               	movlw	36
  5294  0DCB  00F8               	movwf	___ftmul@f1
  5295  0DCC  3074               	movlw	116
  5296  0DCD  00F9               	movwf	___ftmul@f1+1
  5297  0DCE  3049               	movlw	73
  5298  0DCF  00FA               	movwf	___ftmul@f1+2
  5299  0DD0  318F  274D  318D   	fcall	___ftmul
  5300  0DD3  0878               	movf	?___ftmul,w
  5301  0DD4  0020               	movlb	0	; select bank0
  5302  0DD5  00AA               	movwf	___fttol@f1
  5303  0DD6  0879               	movf	?___ftmul+1,w
  5304  0DD7  00AB               	movwf	___fttol@f1+1
  5305  0DD8  087A               	movf	?___ftmul+2,w
  5306  0DD9  00AC               	movwf	___fttol@f1+2
  5307  0DDA  318C  24D6  318D   	fcall	___fttol
  5308  0DDD  0020               	movlb	0	; select bank0
  5309  0DDE  082D               	movf	?___fttol+3,w
  5310  0DDF  00E4               	movwf	ftoa@rem+3
  5311  0DE0  082C               	movf	?___fttol+2,w
  5312  0DE1  00E3               	movwf	ftoa@rem+2
  5313  0DE2  082B               	movf	?___fttol+1,w
  5314  0DE3  00E2               	movwf	ftoa@rem+1
  5315  0DE4  082A               	movf	?___fttol,w
  5316  0DE5  00E1               	movwf	ftoa@rem
  5317  0DE6  3028               	movlw	low (STR_7| (0+32768))
  5318  0DE7  00AA               	movwf	sprintf@f
  5319  0DE8  3090               	movlw	high (STR_7| (0+32768))
  5320  0DE9  00AB               	movwf	sprintf@f+1
  5321  0DEA  0868               	movf	ftoa@l+3,w
  5322  0DEB  00AF               	movwf	?_sprintf+5
  5323  0DEC  0867               	movf	ftoa@l+2,w
  5324  0DED  00AE               	movwf	?_sprintf+4
  5325  0DEE  0866               	movf	ftoa@l+1,w
  5326  0DEF  00AD               	movwf	?_sprintf+3
  5327  0DF0  0865               	movf	ftoa@l,w
  5328  0DF1  00AC               	movwf	?_sprintf+2
  5329  0DF2  0864               	movf	ftoa@rem+3,w
  5330  0DF3  00B3               	movwf	?_sprintf+9
  5331  0DF4  0863               	movf	ftoa@rem+2,w
  5332  0DF5  00B2               	movwf	?_sprintf+8
  5333  0DF6  0862               	movf	ftoa@rem+1,w
  5334  0DF7  00B1               	movwf	?_sprintf+7
  5335  0DF8  0861               	movf	ftoa@rem,w
  5336  0DF9  00B0               	movwf	?_sprintf+6
  5337  0DFA  0869               	movf	ftoa@cp,w
  5338  0DFB  3181  2160         	fcall	_sprintf
  5339  0DFD  30A8               	movlw	(low (ftoa@buf| 0))& (0+255)
  5340  0DFE  0008               	return
  5341  0DFF                     __end_of_ftoa:	
  5342                           
  5343                           	psect	text20
  5344  0160                     __ptext20:	
  5345 ;; *************** function _sprintf *****************
  5346 ;; Defined at:
  5347 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;  sp              1    wreg     PTR unsigned char 
  5350 ;;		 -> ftoa@buf(17), 
  5351 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  5352 ;;		 -> STR_7(11), 
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;  sp              1   32[BANK0 ] PTR unsigned char 
  5355 ;;		 -> ftoa@buf(17), 
  5356 ;;  val             4   28[BANK0 ] unsigned long 
  5357 ;;  tmpval          4    0        struct .
  5358 ;;  prec            2   35[BANK0 ] int 
  5359 ;;  width           2   33[BANK0 ] int 
  5360 ;;  cp              2    0        PTR const unsigned char 
  5361 ;;  len             2    0        unsigned int 
  5362 ;;  c               1   37[BANK0 ] char 
  5363 ;;  ap              1   27[BANK0 ] PTR void [1]
  5364 ;;		 -> ?_sprintf(2), 
  5365 ;;  flag            1   26[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  2   10[BANK0 ] int 
  5368 ;; Registers used:
  5369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:       28 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    1
  5382 ;; This function calls:
  5383 ;;		___lldiv
  5384 ;;		___llmod
  5385 ;;		___wmul
  5386 ;;		_isdigit
  5387 ;; This function is called by:
  5388 ;;		_ftoa
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function _sprintf
  5394  0160                     _sprintf:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5398                           ;sprintf@sp stored from wreg
  5399  0160  0020               	movlb	0	; select bank0
  5400  0161  00C0               	movwf	sprintf@sp
  5401                           
  5402                           ;doprnt.c: 494: va_list ap;
  5403                           ;doprnt.c: 499: signed char c;
  5404                           ;doprnt.c: 501: int width;
  5405                           ;doprnt.c: 504: int prec;
  5406                           ;doprnt.c: 508: unsigned char flag;
  5407                           ;doprnt.c: 523: union {
  5408                           ;doprnt.c: 524: unsigned long vd;
  5409                           ;doprnt.c: 525: double integ;
  5410                           ;doprnt.c: 526: } tmpval;
  5411                           ;doprnt.c: 528: unsigned long val;
  5412                           ;doprnt.c: 529: unsigned len;
  5413                           ;doprnt.c: 530: const char * cp;
  5414                           ;doprnt.c: 533: *ap = __va_start();
  5415  0162  302C               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5416  0163  00B4               	movwf	??_sprintf
  5417  0164  0834               	movf	??_sprintf,w
  5418  0165  00BB               	movwf	sprintf@ap
  5419  0166                     l2529:	
  5420                           ;doprnt.c: 536: while(c = *f++) {
  5421                           
  5422  0166  082B               	movf	sprintf@f+1,w
  5423  0167  00B5               	movwf	??_sprintf+1
  5424  0168  082A               	movf	sprintf@f,w
  5425  0169  00B4               	movwf	??_sprintf
  5426  016A  0AAA               	incf	sprintf@f,f
  5427  016B  1903               	skipnz
  5428  016C  0AAB               	incf	sprintf@f+1,f
  5429  016D  0834               	movf	??_sprintf,w
  5430  016E  0084               	movwf	4
  5431  016F  0835               	movf	??_sprintf+1,w
  5432  0170  0085               	movwf	5
  5433  0171  0800               	movf	0,w	;code access
  5434  0172  00B6               	movwf	??_sprintf+2
  5435  0173  0836               	movf	??_sprintf+2,w
  5436  0174  00C5               	movwf	sprintf@c
  5437  0175  0845               	movf	sprintf@c,w
  5438  0176  1903               	btfsc	3,2
  5439  0177  2B3A               	goto	l2531
  5440                           
  5441                           ;doprnt.c: 538: if(c != '%')
  5442  0178  3025               	movlw	37
  5443  0179  0645               	xorwf	sprintf@c,w
  5444  017A  1903               	btfsc	3,2
  5445  017B  2988               	goto	l2439
  5446                           
  5447                           ;doprnt.c: 540: {
  5448                           ;doprnt.c: 541: ((*sp++ = (c)));
  5449  017C  0845               	movf	sprintf@c,w
  5450  017D  00B4               	movwf	??_sprintf
  5451  017E  0840               	movf	sprintf@sp,w
  5452  017F  0086               	movwf	6
  5453  0180  0187               	clrf	7
  5454  0181  0834               	movf	??_sprintf,w
  5455  0182  0081               	movwf	1
  5456  0183  3001               	movlw	1
  5457  0184  00B4               	movwf	??_sprintf
  5458  0185  0834               	movf	??_sprintf,w
  5459  0186  07C0               	addwf	sprintf@sp,f
  5460                           
  5461                           ;doprnt.c: 542: continue;
  5462  0187  2966               	goto	l2529
  5463  0188                     l2439:	
  5464                           
  5465                           ;doprnt.c: 543: }
  5466                           ;doprnt.c: 546: width = 0;
  5467  0188  01C1               	clrf	sprintf@width
  5468  0189  01C2               	clrf	sprintf@width+1
  5469                           
  5470                           ;doprnt.c: 548: flag = 0;
  5471  018A  01BA               	clrf	sprintf@flag
  5472                           
  5473                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5474  018B  082A               	movf	sprintf@f,w
  5475  018C  0084               	movwf	4
  5476  018D  082B               	movf	sprintf@f+1,w
  5477  018E  0085               	movwf	5
  5478  018F  0800               	movf	0,w	;code access
  5479  0190  3188  200E  3181   	fcall	_isdigit
  5480  0193  1C03               	btfss	3,0
  5481  0194  29C6               	goto	l2453
  5482                           
  5483                           ;doprnt.c: 598: width = 0;
  5484  0195  0020               	movlb	0	; select bank0
  5485  0196  01C1               	clrf	sprintf@width
  5486  0197  01C2               	clrf	sprintf@width+1
  5487  0198                     l2445:	
  5488                           ;doprnt.c: 599: do {
  5489                           
  5490                           
  5491                           ;doprnt.c: 600: width *= 10;
  5492  0198  300A               	movlw	10
  5493  0199  00F0               	movwf	___wmul@multiplier
  5494  019A  3000               	movlw	0
  5495  019B  00F1               	movwf	___wmul@multiplier+1
  5496  019C  0020               	movlb	0	; select bank0
  5497  019D  0842               	movf	sprintf@width+1,w
  5498  019E  00F3               	movwf	___wmul@multiplicand+1
  5499  019F  0841               	movf	sprintf@width,w
  5500  01A0  00F2               	movwf	___wmul@multiplicand
  5501  01A1  3188  20E0  3181   	fcall	___wmul
  5502  01A4  0871               	movf	?___wmul+1,w
  5503  01A5  0020               	movlb	0	; select bank0
  5504  01A6  00C2               	movwf	sprintf@width+1
  5505  01A7  0870               	movf	?___wmul,w
  5506  01A8  00C1               	movwf	sprintf@width
  5507                           
  5508                           ;doprnt.c: 601: width += *f++ - '0';
  5509  01A9  082A               	movf	sprintf@f,w
  5510  01AA  0084               	movwf	4
  5511  01AB  082B               	movf	sprintf@f+1,w
  5512  01AC  0085               	movwf	5
  5513  01AD  0800               	movf	0,w	;code access
  5514  01AE  3ED0               	addlw	208
  5515  01AF  00B4               	movwf	??_sprintf
  5516  01B0  30FF               	movlw	255
  5517  01B1  1803               	skipnc
  5518  01B2  3000               	movlw	0
  5519  01B3  00B5               	movwf	??_sprintf+1
  5520  01B4  0834               	movf	??_sprintf,w
  5521  01B5  07C1               	addwf	sprintf@width,f
  5522  01B6  0835               	movf	??_sprintf+1,w
  5523  01B7  3DC2               	addwfc	sprintf@width+1,f
  5524  01B8  3001               	movlw	1
  5525  01B9  07AA               	addwf	sprintf@f,f
  5526  01BA  3000               	movlw	0
  5527  01BB  3DAB               	addwfc	sprintf@f+1,f
  5528                           
  5529                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5530  01BC  082A               	movf	sprintf@f,w
  5531  01BD  0084               	movwf	4
  5532  01BE  082B               	movf	sprintf@f+1,w
  5533  01BF  0085               	movwf	5
  5534  01C0  0800               	movf	0,w	;code access
  5535  01C1  3188  200E  3181   	fcall	_isdigit
  5536  01C4  1803               	btfsc	3,0
  5537  01C5  2998               	goto	l2445
  5538  01C6                     l2453:	
  5539                           
  5540                           ;doprnt.c: 608: }
  5541                           ;doprnt.c: 611: if(*f == '.') {
  5542  01C6  0020               	movlb	0	; select bank0
  5543  01C7  082A               	movf	sprintf@f,w
  5544  01C8  0084               	movwf	4
  5545  01C9  082B               	movf	sprintf@f+1,w
  5546  01CA  0085               	movwf	5
  5547  01CB  0012               	moviw fsr0++
  5548  01CC  3A2E               	xorlw	46
  5549  01CD  1D03               	btfss	3,2
  5550  01CE  2A04               	goto	l2465
  5551                           
  5552                           ;doprnt.c: 613: f++;
  5553  01CF  3001               	movlw	1
  5554  01D0  07AA               	addwf	sprintf@f,f
  5555  01D1  3000               	movlw	0
  5556  01D2  3DAB               	addwfc	sprintf@f+1,f
  5557                           
  5558                           ;doprnt.c: 620: {
  5559                           ;doprnt.c: 621: prec = 0;
  5560  01D3  01C3               	clrf	sprintf@prec
  5561  01D4  01C4               	clrf	sprintf@prec+1
  5562  01D5                     l2463:	
  5563                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5564                           
  5565  01D5  082A               	movf	sprintf@f,w
  5566  01D6  0084               	movwf	4
  5567  01D7  082B               	movf	sprintf@f+1,w
  5568  01D8  0085               	movwf	5
  5569  01D9  0800               	movf	0,w	;code access
  5570  01DA  3188  200E  3181   	fcall	_isdigit
  5571  01DD  1C03               	btfss	3,0
  5572  01DE  2A0F               	goto	l2471
  5573                           
  5574                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5575  01DF  0020               	movlb	0	; select bank0
  5576  01E0  082A               	movf	sprintf@f,w
  5577  01E1  0084               	movwf	4
  5578  01E2  082B               	movf	sprintf@f+1,w
  5579  01E3  0085               	movwf	5
  5580  01E4  0800               	movf	0,w	;code access
  5581  01E5  00B4               	movwf	??_sprintf
  5582  01E6  01B5               	clrf	??_sprintf+1
  5583  01E7  0844               	movf	sprintf@prec+1,w
  5584  01E8  00F1               	movwf	___wmul@multiplier+1
  5585  01E9  0843               	movf	sprintf@prec,w
  5586  01EA  00F0               	movwf	___wmul@multiplier
  5587  01EB  300A               	movlw	10
  5588  01EC  00F2               	movwf	___wmul@multiplicand
  5589  01ED  3000               	movlw	0
  5590  01EE  00F3               	movwf	___wmul@multiplicand+1
  5591  01EF  3188  20E0  3181   	fcall	___wmul
  5592  01F2  0020               	movlb	0	; select bank0
  5593  01F3  0834               	movf	??_sprintf,w
  5594  01F4  0770               	addwf	?___wmul,w
  5595  01F5  00B6               	movwf	??_sprintf+2
  5596  01F6  0835               	movf	??_sprintf+1,w
  5597  01F7  3D71               	addwfc	?___wmul+1,w
  5598  01F8  00B7               	movwf	??_sprintf+3
  5599  01F9  0836               	movf	??_sprintf+2,w
  5600  01FA  3ED0               	addlw	208
  5601  01FB  00C3               	movwf	sprintf@prec
  5602  01FC  30FF               	movlw	255
  5603  01FD  3D37               	addwfc	??_sprintf+3,w
  5604  01FE  00C4               	movwf	sprintf@prec+1
  5605  01FF  3001               	movlw	1
  5606  0200  07AA               	addwf	sprintf@f,f
  5607  0201  3000               	movlw	0
  5608  0202  3DAB               	addwfc	sprintf@f+1,f
  5609  0203  29D5               	goto	l2463
  5610  0204                     l2465:	
  5611                           ;doprnt.c: 624: }
  5612                           ;doprnt.c: 625: } else {
  5613                           
  5614                           
  5615                           ;doprnt.c: 626: prec = 0;
  5616  0204  0020               	movlb	0	; select bank0
  5617  0205  01C3               	clrf	sprintf@prec
  5618  0206  01C4               	clrf	sprintf@prec+1
  5619                           
  5620                           ;doprnt.c: 635: switch(c = *f++) {
  5621                           
  5622                           ;doprnt.c: 630: }
  5623                           ;doprnt.c: 633: loop:
  5624  0207  2A0F               	goto	l2471
  5625  0208                     l276:	
  5626                           ;doprnt.c: 641: case 'l':
  5627                           
  5628                           ;doprnt.c: 638: goto alldone;
  5629                           
  5630                           ;doprnt.c: 637: case 0:
  5631                           
  5632                           
  5633                           ;doprnt.c: 643: flag |= 0x10;
  5634  0208  163A               	bsf	sprintf@flag,4
  5635                           
  5636                           ;doprnt.c: 644: goto loop;
  5637  0209  2A0F               	goto	l2471
  5638  020A                     l2467:	
  5639                           ;doprnt.c: 817: case 'u':
  5640                           
  5641                           ;doprnt.c: 813: continue;
  5642                           
  5643                           ;doprnt.c: 802: default:
  5644                           
  5645                           
  5646                           ;doprnt.c: 818: flag |= 0xC0;
  5647  020A  30C0               	movlw	192
  5648  020B  00B4               	movwf	??_sprintf
  5649  020C  0834               	movf	??_sprintf,w
  5650  020D  04BA               	iorwf	sprintf@flag,f
  5651                           
  5652                           ;doprnt.c: 822: }
  5653                           
  5654                           ;doprnt.c: 819: break;
  5655  020E  2A27               	goto	l279
  5656  020F                     l2471:	
  5657  020F  0020               	movlb	0	; select bank0
  5658  0210  082B               	movf	sprintf@f+1,w
  5659  0211  00B5               	movwf	??_sprintf+1
  5660  0212  082A               	movf	sprintf@f,w
  5661  0213  00B4               	movwf	??_sprintf
  5662  0214  0AAA               	incf	sprintf@f,f
  5663  0215  1903               	skipnz
  5664  0216  0AAB               	incf	sprintf@f+1,f
  5665  0217  0834               	movf	??_sprintf,w
  5666  0218  0084               	movwf	4
  5667  0219  0835               	movf	??_sprintf+1,w
  5668  021A  0085               	movwf	5
  5669  021B  0800               	movf	0,w	;code access
  5670  021C  00C5               	movwf	sprintf@c
  5671                           
  5672                           ; Switch size 1, requested type "space"
  5673                           ; Number of cases is 3, Range of values is 0 to 117
  5674                           ; switch strategies available:
  5675                           ; Name         Instructions Cycles
  5676                           ; simple_byte           10     6 (average)
  5677                           ; direct_byte          242     6 (fixed)
  5678                           ; jumptable            260     6 (fixed)
  5679                           ;	Chosen strategy is simple_byte
  5680  021D  3A00               	xorlw	0	; case 0
  5681  021E  1903               	skipnz
  5682  021F  2B3A               	goto	l2531
  5683  0220  3A6C               	xorlw	108	; case 108
  5684  0221  1903               	skipnz
  5685  0222  2A08               	goto	l276
  5686  0223  3A19               	xorlw	25	; case 117
  5687  0224  1903               	skipnz
  5688  0225  2A0A               	goto	l2467
  5689  0226  2966               	goto	l2529
  5690  0227                     l279:	
  5691                           
  5692                           ;doprnt.c: 1273: {
  5693                           ;doprnt.c: 1281: if(flag & 0x10)
  5694  0227  1E3A               	btfss	sprintf@flag,4
  5695  0228  2A36               	goto	l2477
  5696                           
  5697                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5698  0229  083B               	movf	sprintf@ap,w
  5699  022A  0086               	movwf	6
  5700  022B  0187               	clrf	7
  5701  022C  3F40               	moviw [0]fsr1
  5702  022D  00BC               	movwf	sprintf@val
  5703  022E  3F41               	moviw [1]fsr1
  5704  022F  00BD               	movwf	sprintf@val+1
  5705  0230  3F42               	moviw [2]fsr1
  5706  0231  00BE               	movwf	sprintf@val+2
  5707  0232  3F43               	moviw [3]fsr1
  5708  0233  00BF               	movwf	sprintf@val+3
  5709  0234  3004               	movlw	4
  5710  0235  2A44               	goto	L2
  5711  0236                     l2477:	
  5712                           
  5713                           ;doprnt.c: 1283: else
  5714                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5715  0236  083B               	movf	sprintf@ap,w
  5716  0237  0086               	movwf	6
  5717  0238  0187               	clrf	7
  5718  0239  3F40               	moviw [0]fsr1
  5719  023A  00B4               	movwf	??_sprintf
  5720  023B  3F41               	moviw [1]fsr1
  5721  023C  00B5               	movwf	??_sprintf+1
  5722  023D  0834               	movf	??_sprintf,w
  5723  023E  00BC               	movwf	sprintf@val
  5724  023F  0835               	movf	??_sprintf+1,w
  5725  0240  00BD               	movwf	sprintf@val+1
  5726  0241  01BE               	clrf	sprintf@val+2
  5727  0242  01BF               	clrf	sprintf@val+3
  5728  0243  3002               	movlw	2
  5729  0244                     L2:	
  5730  0244  00B4               	movwf	??_sprintf
  5731  0245  0834               	movf	??_sprintf,w
  5732  0246  07BB               	addwf	sprintf@ap,f
  5733                           
  5734                           ;doprnt.c: 1287: }
  5735                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5736  0247  0843               	movf	sprintf@prec,w
  5737  0248  0444               	iorwf	sprintf@prec+1,w
  5738  0249  1D03               	btfss	3,2
  5739  024A  2A55               	goto	l2487
  5740  024B  083F               	movf	sprintf@val+3,w
  5741  024C  043E               	iorwf	sprintf@val+2,w
  5742  024D  043D               	iorwf	sprintf@val+1,w
  5743  024E  043C               	iorwf	sprintf@val,w
  5744  024F  1D03               	skipz
  5745  0250  2A55               	goto	l2487
  5746                           
  5747                           ;doprnt.c: 1291: prec++;
  5748  0251  3001               	movlw	1
  5749  0252  07C3               	addwf	sprintf@prec,f
  5750  0253  3000               	movlw	0
  5751  0254  3DC4               	addwfc	sprintf@prec+1,f
  5752  0255                     l2487:	
  5753                           
  5754                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5755  0255  01C5               	clrf	sprintf@c
  5756  0256  0AC5               	incf	sprintf@c,f
  5757  0257  300A               	movlw	10
  5758  0258  0645               	xorwf	sprintf@c,w
  5759  0259  1903               	btfsc	3,2
  5760  025A  2A88               	goto	l2499
  5761  025B                     l2493:	
  5762                           
  5763                           ;doprnt.c: 1306: if(val < dpowers[c])
  5764  025B  0845               	movf	sprintf@c,w
  5765  025C  00B4               	movwf	??_sprintf
  5766  025D  01B5               	clrf	??_sprintf+1
  5767  025E  35B4               	lslf	??_sprintf,f
  5768  025F  0DB5               	rlf	??_sprintf+1,f
  5769  0260  35B4               	lslf	??_sprintf,f
  5770  0261  0DB5               	rlf	??_sprintf+1,f
  5771  0262  3000               	movlw	low (_dpowers| (0+32768))
  5772  0263  0734               	addwf	??_sprintf,w
  5773  0264  0084               	movwf	4
  5774  0265  3090               	movlw	high (_dpowers| (0+32768))
  5775  0266  3D35               	addwfc	??_sprintf+1,w
  5776  0267  0085               	movwf	5
  5777  0268  3F00               	moviw [0]fsr0
  5778  0269  00B6               	movwf	??_sprintf+2
  5779  026A  3F01               	moviw [1]fsr0
  5780  026B  00B7               	movwf	??_sprintf+3
  5781  026C  3F02               	moviw [2]fsr0
  5782  026D  00B8               	movwf	??_sprintf+4
  5783  026E  3F03               	moviw [3]fsr0
  5784  026F  00B9               	movwf	??_sprintf+5
  5785  0270  0839               	movf	??_sprintf+5,w
  5786  0271  023F               	subwf	sprintf@val+3,w
  5787  0272  1D03               	skipz
  5788  0273  2A7E               	goto	u3165
  5789  0274  0838               	movf	??_sprintf+4,w
  5790  0275  023E               	subwf	sprintf@val+2,w
  5791  0276  1D03               	skipz
  5792  0277  2A7E               	goto	u3165
  5793  0278  0837               	movf	??_sprintf+3,w
  5794  0279  023D               	subwf	sprintf@val+1,w
  5795  027A  1D03               	skipz
  5796  027B  2A7E               	goto	u3165
  5797  027C  0836               	movf	??_sprintf+2,w
  5798  027D  023C               	subwf	sprintf@val,w
  5799  027E                     u3165:	
  5800  027E  1C03               	btfss	3,0
  5801  027F  2A88               	goto	l2499
  5802                           
  5803                           ;doprnt.c: 1307: break;
  5804  0280  3001               	movlw	1
  5805  0281  00B4               	movwf	??_sprintf
  5806  0282  0834               	movf	??_sprintf,w
  5807  0283  07C5               	addwf	sprintf@c,f
  5808  0284  300A               	movlw	10
  5809  0285  0645               	xorwf	sprintf@c,w
  5810  0286  1D03               	btfss	3,2
  5811  0287  2A5B               	goto	l2493
  5812  0288                     l2499:	
  5813                           
  5814                           ;doprnt.c: 1339: if(c < prec)
  5815  0288  0845               	movf	sprintf@c,w
  5816  0289  00B4               	movwf	??_sprintf
  5817  028A  01B5               	clrf	??_sprintf+1
  5818  028B  1BB4               	btfsc	??_sprintf,7
  5819  028C  03B5               	decf	??_sprintf+1,f
  5820  028D  0835               	movf	??_sprintf+1,w
  5821  028E  3A80               	xorlw	128
  5822  028F  00B6               	movwf	??_sprintf+2
  5823  0290  0844               	movf	sprintf@prec+1,w
  5824  0291  3A80               	xorlw	128
  5825  0292  0236               	subwf	??_sprintf+2,w
  5826  0293  1D03               	skipz
  5827  0294  2A97               	goto	u3185
  5828  0295  0843               	movf	sprintf@prec,w
  5829  0296  0234               	subwf	??_sprintf,w
  5830  0297                     u3185:	
  5831  0297  1803               	skipnc
  5832  0298  2A9F               	goto	l2503
  5833                           
  5834                           ;doprnt.c: 1340: c = prec;
  5835  0299  0020               	movlb	0	; select bank0
  5836  029A  0843               	movf	sprintf@prec,w
  5837  029B  00B4               	movwf	??_sprintf
  5838  029C  0834               	movf	??_sprintf,w
  5839  029D  00C5               	movwf	sprintf@c
  5840  029E  2AB7               	goto	l2507
  5841  029F                     l2503:	
  5842                           
  5843                           ;doprnt.c: 1341: else if(prec < c)
  5844  029F  0020               	movlb	0	; select bank0
  5845  02A0  0845               	movf	sprintf@c,w
  5846  02A1  00B4               	movwf	??_sprintf
  5847  02A2  01B5               	clrf	??_sprintf+1
  5848  02A3  1BB4               	btfsc	??_sprintf,7
  5849  02A4  03B5               	decf	??_sprintf+1,f
  5850  02A5  0844               	movf	sprintf@prec+1,w
  5851  02A6  3A80               	xorlw	128
  5852  02A7  00B6               	movwf	??_sprintf+2
  5853  02A8  0835               	movf	??_sprintf+1,w
  5854  02A9  3A80               	xorlw	128
  5855  02AA  0236               	subwf	??_sprintf+2,w
  5856  02AB  1D03               	skipz
  5857  02AC  2AAF               	goto	u3195
  5858  02AD  0834               	movf	??_sprintf,w
  5859  02AE  0243               	subwf	sprintf@prec,w
  5860  02AF                     u3195:	
  5861  02AF  1803               	skipnc
  5862  02B0  2AB7               	goto	l2507
  5863                           
  5864                           ;doprnt.c: 1342: prec = c;
  5865  02B1  0020               	movlb	0	; select bank0
  5866  02B2  0845               	movf	sprintf@c,w
  5867  02B3  00C3               	movwf	sprintf@prec
  5868  02B4  01C4               	clrf	sprintf@prec+1
  5869  02B5  1BC3               	btfsc	sprintf@prec,7
  5870  02B6  03C4               	decf	sprintf@prec+1,f
  5871  02B7                     l2507:	
  5872                           
  5873                           ;doprnt.c: 1381: if(width > c)
  5874  02B7  0020               	movlb	0	; select bank0
  5875  02B8  0845               	movf	sprintf@c,w
  5876  02B9  00B4               	movwf	??_sprintf
  5877  02BA  01B5               	clrf	??_sprintf+1
  5878  02BB  1BB4               	btfsc	??_sprintf,7
  5879  02BC  03B5               	decf	??_sprintf+1,f
  5880  02BD  0835               	movf	??_sprintf+1,w
  5881  02BE  3A80               	xorlw	128
  5882  02BF  00B6               	movwf	??_sprintf+2
  5883  02C0  0842               	movf	sprintf@width+1,w
  5884  02C1  3A80               	xorlw	128
  5885  02C2  0236               	subwf	??_sprintf+2,w
  5886  02C3  1D03               	skipz
  5887  02C4  2AC7               	goto	u3205
  5888  02C5  0841               	movf	sprintf@width,w
  5889  02C6  0234               	subwf	??_sprintf,w
  5890  02C7                     u3205:	
  5891  02C7  1803               	skipnc
  5892  02C8  2AD4               	goto	l2511
  5893                           
  5894                           ;doprnt.c: 1382: width -= c;
  5895  02C9  0020               	movlb	0	; select bank0
  5896  02CA  0845               	movf	sprintf@c,w
  5897  02CB  00B4               	movwf	??_sprintf
  5898  02CC  01B5               	clrf	??_sprintf+1
  5899  02CD  1BB4               	btfsc	??_sprintf,7
  5900  02CE  03B5               	decf	??_sprintf+1,f
  5901  02CF  0834               	movf	??_sprintf,w
  5902  02D0  02C1               	subwf	sprintf@width,f
  5903  02D1  0835               	movf	??_sprintf+1,w
  5904  02D2  3BC2               	subwfb	sprintf@width+1,f
  5905  02D3  2AD7               	goto	l2513
  5906  02D4                     l2511:	
  5907                           
  5908                           ;doprnt.c: 1383: else
  5909                           ;doprnt.c: 1384: width = 0;
  5910  02D4  0020               	movlb	0	; select bank0
  5911  02D5  01C1               	clrf	sprintf@width
  5912  02D6  01C2               	clrf	sprintf@width+1
  5913  02D7                     l2513:	
  5914                           
  5915                           ;doprnt.c: 1422: {
  5916                           ;doprnt.c: 1424: if(width
  5917                           ;doprnt.c: 1428: )
  5918  02D7  0841               	movf	sprintf@width,w
  5919  02D8  0442               	iorwf	sprintf@width+1,w
  5920  02D9  1903               	btfsc	3,2
  5921  02DA  2B2F               	goto	l2527
  5922                           
  5923                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5924                           
  5925                           ;doprnt.c: 1429: do
  5926  02DB  3020               	movlw	32
  5927  02DC  00B4               	movwf	??_sprintf
  5928  02DD  0840               	movf	sprintf@sp,w
  5929  02DE  0086               	movwf	6
  5930  02DF  0187               	clrf	7
  5931  02E0  0834               	movf	??_sprintf,w
  5932  02E1  0081               	movwf	1
  5933  02E2  3001               	movlw	1
  5934  02E3  00B4               	movwf	??_sprintf
  5935  02E4  0834               	movf	??_sprintf,w
  5936  02E5  07C0               	addwf	sprintf@sp,f
  5937                           
  5938                           ;doprnt.c: 1431: while(--width);
  5939  02E6  30FF               	movlw	255
  5940  02E7  07C1               	addwf	sprintf@width,f
  5941  02E8  30FF               	movlw	255
  5942  02E9  3DC2               	addwfc	sprintf@width+1,f
  5943  02EA  2AD7               	goto	l2513
  5944  02EB                     l2521:	
  5945                           ;doprnt.c: 1469: }
  5946                           ;doprnt.c: 1474: while(prec--) {
  5947                           
  5948                           
  5949                           ;doprnt.c: 1478: {
  5950                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5951  02EB  3000               	movlw	0
  5952  02EC  00A3               	movwf	___llmod@divisor+3
  5953  02ED  3000               	movlw	0
  5954  02EE  00A2               	movwf	___llmod@divisor+2
  5955  02EF  3000               	movlw	0
  5956  02F0  00A1               	movwf	___llmod@divisor+1
  5957  02F1  300A               	movlw	10
  5958  02F2  00A0               	movwf	___llmod@divisor
  5959  02F3  0844               	movf	sprintf@prec+1,w
  5960  02F4  0085               	movwf	5
  5961  02F5  0843               	movf	sprintf@prec,w
  5962  02F6  0084               	movwf	4
  5963  02F7  3584               	lslf	4,f
  5964  02F8  0D85               	rlf	5,f
  5965  02F9  3584               	lslf	4,f
  5966  02FA  0D85               	rlf	5,f
  5967  02FB  3000               	movlw	low (_dpowers| (0+32768))
  5968  02FC  0784               	addwf	4,f
  5969  02FD  3090               	movlw	high (_dpowers| (0+32768))
  5970  02FE  3D85               	addwfc	5,f
  5971  02FF  3F00               	moviw [0]fsr0
  5972  0300  00F0               	movwf	___lldiv@divisor
  5973  0301  3F01               	moviw [1]fsr0
  5974  0302  00F1               	movwf	___lldiv@divisor+1
  5975  0303  3F02               	moviw [2]fsr0
  5976  0304  00F2               	movwf	___lldiv@divisor+2
  5977  0305  3F03               	moviw [3]fsr0
  5978  0306  00F3               	movwf	___lldiv@divisor+3
  5979  0307  083F               	movf	sprintf@val+3,w
  5980  0308  00F7               	movwf	___lldiv@dividend+3
  5981  0309  083E               	movf	sprintf@val+2,w
  5982  030A  00F6               	movwf	___lldiv@dividend+2
  5983  030B  083D               	movf	sprintf@val+1,w
  5984  030C  00F5               	movwf	___lldiv@dividend+1
  5985  030D  083C               	movf	sprintf@val,w
  5986  030E  00F4               	movwf	___lldiv@dividend
  5987  030F  318B  23A7  3181   	fcall	___lldiv
  5988  0312  0873               	movf	?___lldiv+3,w
  5989  0313  0020               	movlb	0	; select bank0
  5990  0314  00A7               	movwf	___llmod@dividend+3
  5991  0315  0872               	movf	?___lldiv+2,w
  5992  0316  00A6               	movwf	___llmod@dividend+2
  5993  0317  0871               	movf	?___lldiv+1,w
  5994  0318  00A5               	movwf	___llmod@dividend+1
  5995  0319  0870               	movf	?___lldiv,w
  5996  031A  00A4               	movwf	___llmod@dividend
  5997  031B  318B  231F  3181   	fcall	___llmod
  5998  031E  0020               	movlb	0	; select bank0
  5999  031F  0820               	movf	?___llmod,w
  6000  0320  3E30               	addlw	48
  6001  0321  00B4               	movwf	??_sprintf
  6002  0322  0834               	movf	??_sprintf,w
  6003  0323  00C5               	movwf	sprintf@c
  6004                           
  6005                           ;doprnt.c: 1523: }
  6006                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6007  0324  0845               	movf	sprintf@c,w
  6008  0325  00B4               	movwf	??_sprintf
  6009  0326  0840               	movf	sprintf@sp,w
  6010  0327  0086               	movwf	6
  6011  0328  0187               	clrf	7
  6012  0329  0834               	movf	??_sprintf,w
  6013  032A  0081               	movwf	1
  6014  032B  3001               	movlw	1
  6015  032C  00B4               	movwf	??_sprintf
  6016  032D  0834               	movf	??_sprintf,w
  6017  032E  07C0               	addwf	sprintf@sp,f
  6018  032F                     l2527:	
  6019  032F  30FF               	movlw	255
  6020  0330  07C3               	addwf	sprintf@prec,f
  6021  0331  30FF               	movlw	255
  6022  0332  3DC4               	addwfc	sprintf@prec+1,f
  6023  0333  0A43               	incf	sprintf@prec,w
  6024  0334  1D03               	skipz
  6025  0335  2AEB               	goto	l2521
  6026  0336  0A44               	incf	sprintf@prec+1,w
  6027  0337  1903               	btfsc	3,2
  6028  0338  2966               	goto	l2529
  6029  0339  2AEB               	goto	l2521
  6030  033A                     l2531:	
  6031                           ;doprnt.c: 1525: }
  6032                           ;doprnt.c: 1533: }
  6033                           ;doprnt.c: 1535: alldone:
  6034                           
  6035                           
  6036                           ;doprnt.c: 1538: *sp = 0;
  6037  033A  0840               	movf	sprintf@sp,w
  6038  033B  0086               	movwf	6
  6039  033C  0187               	clrf	7
  6040  033D  0181               	clrf	1
  6041  033E  0008               	return
  6042  033F                     __end_of_sprintf:	
  6043                           ;doprnt.c: 1540: return 0;
  6044                           ;	Return value of _sprintf is never used
  6045                           
  6046                           
  6047                           	psect	text21
  6048  080E                     __ptext21:	
  6049 ;; *************** function _isdigit *****************
  6050 ;; Defined at:
  6051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  c               1    wreg     unsigned char 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  c               1    1[COMMON] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;		None               void
  6058 ;; Registers used:
  6059 ;;		wreg, status,2, status,0
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;Total ram usage:        2 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_sprintf
  6075 ;;		_strtod
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           
  6080                           ;psect for function _isdigit
  6081  080E                     _isdigit:	
  6082                           
  6083                           ;incstack = 0
  6084                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6085                           ;isdigit@c stored from wreg
  6086  080E  00F1               	movwf	isdigit@c
  6087  080F  01F0               	clrf	_isdigit$591
  6088  0810  303A               	movlw	58
  6089  0811  0271               	subwf	isdigit@c,w
  6090  0812  1803               	skipnc
  6091  0813  281A               	goto	l2093
  6092  0814  3030               	movlw	48
  6093  0815  0271               	subwf	isdigit@c,w
  6094  0816  1C03               	skipc
  6095  0817  281A               	goto	l2093
  6096  0818  01F0               	clrf	_isdigit$591
  6097  0819  0AF0               	incf	_isdigit$591,f
  6098  081A                     l2093:	
  6099  081A  0C70               	rrf	_isdigit$591,w
  6100  081B  0008               	return
  6101  081C                     __end_of_isdigit:	
  6102                           
  6103                           	psect	text22
  6104  08E0                     __ptext22:	
  6105 ;; *************** function ___wmul *****************
  6106 ;; Defined at:
  6107 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  multiplier      2    0[COMMON] unsigned int 
  6110 ;;  multiplicand    2    2[COMMON] unsigned int 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  product         2    4[COMMON] unsigned int 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  2    0[COMMON] unsigned int 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6122 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;Total ram usage:        6 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_sprintf
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           
  6136                           ;psect for function ___wmul
  6137  08E0                     ___wmul:	
  6138                           
  6139                           ;incstack = 0
  6140                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6141  08E0  01F4               	clrf	___wmul@product
  6142  08E1  01F5               	clrf	___wmul@product+1
  6143  08E2                     l2099:	
  6144  08E2  1C70               	btfss	___wmul@multiplier,0
  6145  08E3  28E8               	goto	l302
  6146  08E4  0872               	movf	___wmul@multiplicand,w
  6147  08E5  07F4               	addwf	___wmul@product,f
  6148  08E6  0873               	movf	___wmul@multiplicand+1,w
  6149  08E7  3DF5               	addwfc	___wmul@product+1,f
  6150  08E8                     l302:	
  6151  08E8  3001               	movlw	1
  6152  08E9                     u2295:	
  6153  08E9  35F2               	lslf	___wmul@multiplicand,f
  6154  08EA  0DF3               	rlf	___wmul@multiplicand+1,f
  6155  08EB  0B89               	decfsz	9,f
  6156  08EC  28E9               	goto	u2295
  6157  08ED  3001               	movlw	1
  6158  08EE                     u2305:	
  6159  08EE  36F1               	lsrf	___wmul@multiplier+1,f
  6160  08EF  0CF0               	rrf	___wmul@multiplier,f
  6161  08F0  0B89               	decfsz	9,f
  6162  08F1  28EE               	goto	u2305
  6163  08F2  0870               	movf	___wmul@multiplier,w
  6164  08F3  0471               	iorwf	___wmul@multiplier+1,w
  6165  08F4  1D03               	btfss	3,2
  6166  08F5  28E2               	goto	l2099
  6167  08F6  0875               	movf	___wmul@product+1,w
  6168  08F7  00F1               	movwf	?___wmul+1
  6169  08F8  0874               	movf	___wmul@product,w
  6170  08F9  00F0               	movwf	?___wmul
  6171  08FA  0008               	return
  6172  08FB                     __end_of___wmul:	
  6173                           
  6174                           	psect	text23
  6175  0B1F                     __ptext23:	
  6176 ;; *************** function ___llmod *****************
  6177 ;; Defined at:
  6178 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  divisor         4    0[BANK0 ] unsigned long 
  6181 ;;  dividend        4    4[BANK0 ] unsigned long 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  counter         1    9[BANK0 ] unsigned char 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  4    0[BANK0 ] unsigned long 
  6186 ;; Registers used:
  6187 ;;		wreg, status,2, status,0
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:       10 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		_sprintf
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function ___llmod
  6208  0B1F                     ___llmod:	
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6212  0B1F  0020               	movlb	0	; select bank0
  6213  0B20  0823               	movf	___llmod@divisor+3,w
  6214  0B21  0422               	iorwf	___llmod@divisor+2,w
  6215  0B22  0421               	iorwf	___llmod@divisor+1,w
  6216  0B23  0420               	iorwf	___llmod@divisor,w
  6217  0B24  1903               	skipnz
  6218  0B25  2B59               	goto	l2399
  6219  0B26  01A9               	clrf	___llmod@counter
  6220  0B27  0AA9               	incf	___llmod@counter,f
  6221  0B28                     l2389:	
  6222  0B28  1BA3               	btfsc	___llmod@divisor+3,7
  6223  0B29  2B36               	goto	l2391
  6224  0B2A  3001               	movlw	1
  6225  0B2B                     u2995:	
  6226  0B2B  35A0               	lslf	___llmod@divisor,f
  6227  0B2C  0DA1               	rlf	___llmod@divisor+1,f
  6228  0B2D  0DA2               	rlf	___llmod@divisor+2,f
  6229  0B2E  0DA3               	rlf	___llmod@divisor+3,f
  6230  0B2F  0B89               	decfsz	9,f
  6231  0B30  2B2B               	goto	u2995
  6232  0B31  3001               	movlw	1
  6233  0B32  00A8               	movwf	??___llmod
  6234  0B33  0828               	movf	??___llmod,w
  6235  0B34  07A9               	addwf	___llmod@counter,f
  6236  0B35  2B28               	goto	l2389
  6237  0B36                     l2391:	
  6238  0B36  0823               	movf	___llmod@divisor+3,w
  6239  0B37  0227               	subwf	___llmod@dividend+3,w
  6240  0B38  1D03               	skipz
  6241  0B39  2B44               	goto	u3015
  6242  0B3A  0822               	movf	___llmod@divisor+2,w
  6243  0B3B  0226               	subwf	___llmod@dividend+2,w
  6244  0B3C  1D03               	skipz
  6245  0B3D  2B44               	goto	u3015
  6246  0B3E  0821               	movf	___llmod@divisor+1,w
  6247  0B3F  0225               	subwf	___llmod@dividend+1,w
  6248  0B40  1D03               	skipz
  6249  0B41  2B44               	goto	u3015
  6250  0B42  0820               	movf	___llmod@divisor,w
  6251  0B43  0224               	subwf	___llmod@dividend,w
  6252  0B44                     u3015:	
  6253  0B44  1C03               	skipc
  6254  0B45  2B4E               	goto	l2395
  6255  0B46  0820               	movf	___llmod@divisor,w
  6256  0B47  02A4               	subwf	___llmod@dividend,f
  6257  0B48  0821               	movf	___llmod@divisor+1,w
  6258  0B49  3BA5               	subwfb	___llmod@dividend+1,f
  6259  0B4A  0822               	movf	___llmod@divisor+2,w
  6260  0B4B  3BA6               	subwfb	___llmod@dividend+2,f
  6261  0B4C  0823               	movf	___llmod@divisor+3,w
  6262  0B4D  3BA7               	subwfb	___llmod@dividend+3,f
  6263  0B4E                     l2395:	
  6264  0B4E  3001               	movlw	1
  6265  0B4F                     u3025:	
  6266  0B4F  36A3               	lsrf	___llmod@divisor+3,f
  6267  0B50  0CA2               	rrf	___llmod@divisor+2,f
  6268  0B51  0CA1               	rrf	___llmod@divisor+1,f
  6269  0B52  0CA0               	rrf	___llmod@divisor,f
  6270  0B53  0B89               	decfsz	9,f
  6271  0B54  2B4F               	goto	u3025
  6272  0B55  3001               	movlw	1
  6273  0B56  02A9               	subwf	___llmod@counter,f
  6274  0B57  1D03               	btfss	3,2
  6275  0B58  2B36               	goto	l2391
  6276  0B59                     l2399:	
  6277  0B59  0827               	movf	___llmod@dividend+3,w
  6278  0B5A  00A3               	movwf	?___llmod+3
  6279  0B5B  0826               	movf	___llmod@dividend+2,w
  6280  0B5C  00A2               	movwf	?___llmod+2
  6281  0B5D  0825               	movf	___llmod@dividend+1,w
  6282  0B5E  00A1               	movwf	?___llmod+1
  6283  0B5F  0824               	movf	___llmod@dividend,w
  6284  0B60  00A0               	movwf	?___llmod
  6285  0B61  0008               	return
  6286  0B62                     __end_of___llmod:	
  6287                           
  6288                           	psect	text24
  6289  0BA7                     __ptext24:	
  6290 ;; *************** function ___lldiv *****************
  6291 ;; Defined at:
  6292 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  divisor         4    0[COMMON] unsigned long 
  6295 ;;  dividend        4    4[COMMON] unsigned long 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  quotient        4    9[COMMON] unsigned long 
  6298 ;;  counter         1   13[COMMON] unsigned char 
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  4    0[COMMON] unsigned long 
  6301 ;; Registers used:
  6302 ;;		wreg, status,2, status,0
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6308 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;Total ram usage:       14 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; This function calls:
  6315 ;;		Nothing
  6316 ;; This function is called by:
  6317 ;;		_sprintf
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           
  6322                           ;psect for function ___lldiv
  6323  0BA7                     ___lldiv:	
  6324                           
  6325                           ;incstack = 0
  6326                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6327  0BA7  3000               	movlw	0
  6328  0BA8  00FC               	movwf	___lldiv@quotient+3
  6329  0BA9  3000               	movlw	0
  6330  0BAA  00FB               	movwf	___lldiv@quotient+2
  6331  0BAB  3000               	movlw	0
  6332  0BAC  00FA               	movwf	___lldiv@quotient+1
  6333  0BAD  3000               	movlw	0
  6334  0BAE  00F9               	movwf	___lldiv@quotient
  6335  0BAF  0873               	movf	___lldiv@divisor+3,w
  6336  0BB0  0472               	iorwf	___lldiv@divisor+2,w
  6337  0BB1  0471               	iorwf	___lldiv@divisor+1,w
  6338  0BB2  0470               	iorwf	___lldiv@divisor,w
  6339  0BB3  1903               	skipnz
  6340  0BB4  2BF0               	goto	l2379
  6341  0BB5  01FD               	clrf	___lldiv@counter
  6342  0BB6  0AFD               	incf	___lldiv@counter,f
  6343  0BB7                     l2365:	
  6344  0BB7  1BF3               	btfsc	___lldiv@divisor+3,7
  6345  0BB8  2BC5               	goto	l2367
  6346  0BB9  3001               	movlw	1
  6347  0BBA                     u2925:	
  6348  0BBA  35F0               	lslf	___lldiv@divisor,f
  6349  0BBB  0DF1               	rlf	___lldiv@divisor+1,f
  6350  0BBC  0DF2               	rlf	___lldiv@divisor+2,f
  6351  0BBD  0DF3               	rlf	___lldiv@divisor+3,f
  6352  0BBE  0B89               	decfsz	9,f
  6353  0BBF  2BBA               	goto	u2925
  6354  0BC0  3001               	movlw	1
  6355  0BC1  00F8               	movwf	??___lldiv
  6356  0BC2  0878               	movf	??___lldiv,w
  6357  0BC3  07FD               	addwf	___lldiv@counter,f
  6358  0BC4  2BB7               	goto	l2365
  6359  0BC5                     l2367:	
  6360  0BC5  3001               	movlw	1
  6361  0BC6                     u2945:	
  6362  0BC6  35F9               	lslf	___lldiv@quotient,f
  6363  0BC7  0DFA               	rlf	___lldiv@quotient+1,f
  6364  0BC8  0DFB               	rlf	___lldiv@quotient+2,f
  6365  0BC9  0DFC               	rlf	___lldiv@quotient+3,f
  6366  0BCA  0B89               	decfsz	9,f
  6367  0BCB  2BC6               	goto	u2945
  6368  0BCC  0873               	movf	___lldiv@divisor+3,w
  6369  0BCD  0277               	subwf	___lldiv@dividend+3,w
  6370  0BCE  1D03               	skipz
  6371  0BCF  2BDA               	goto	u2955
  6372  0BD0  0872               	movf	___lldiv@divisor+2,w
  6373  0BD1  0276               	subwf	___lldiv@dividend+2,w
  6374  0BD2  1D03               	skipz
  6375  0BD3  2BDA               	goto	u2955
  6376  0BD4  0871               	movf	___lldiv@divisor+1,w
  6377  0BD5  0275               	subwf	___lldiv@dividend+1,w
  6378  0BD6  1D03               	skipz
  6379  0BD7  2BDA               	goto	u2955
  6380  0BD8  0870               	movf	___lldiv@divisor,w
  6381  0BD9  0274               	subwf	___lldiv@dividend,w
  6382  0BDA                     u2955:	
  6383  0BDA  1C03               	skipc
  6384  0BDB  2BE5               	goto	l2375
  6385  0BDC  0870               	movf	___lldiv@divisor,w
  6386  0BDD  02F4               	subwf	___lldiv@dividend,f
  6387  0BDE  0871               	movf	___lldiv@divisor+1,w
  6388  0BDF  3BF5               	subwfb	___lldiv@dividend+1,f
  6389  0BE0  0872               	movf	___lldiv@divisor+2,w
  6390  0BE1  3BF6               	subwfb	___lldiv@dividend+2,f
  6391  0BE2  0873               	movf	___lldiv@divisor+3,w
  6392  0BE3  3BF7               	subwfb	___lldiv@dividend+3,f
  6393  0BE4  1479               	bsf	___lldiv@quotient,0
  6394  0BE5                     l2375:	
  6395  0BE5  3001               	movlw	1
  6396  0BE6                     u2965:	
  6397  0BE6  36F3               	lsrf	___lldiv@divisor+3,f
  6398  0BE7  0CF2               	rrf	___lldiv@divisor+2,f
  6399  0BE8  0CF1               	rrf	___lldiv@divisor+1,f
  6400  0BE9  0CF0               	rrf	___lldiv@divisor,f
  6401  0BEA  0B89               	decfsz	9,f
  6402  0BEB  2BE6               	goto	u2965
  6403  0BEC  3001               	movlw	1
  6404  0BED  02FD               	subwf	___lldiv@counter,f
  6405  0BEE  1D03               	btfss	3,2
  6406  0BEF  2BC5               	goto	l2367
  6407  0BF0                     l2379:	
  6408  0BF0  087C               	movf	___lldiv@quotient+3,w
  6409  0BF1  00F3               	movwf	?___lldiv+3
  6410  0BF2  087B               	movf	___lldiv@quotient+2,w
  6411  0BF3  00F2               	movwf	?___lldiv+2
  6412  0BF4  087A               	movf	___lldiv@quotient+1,w
  6413  0BF5  00F1               	movwf	?___lldiv+1
  6414  0BF6  0879               	movf	___lldiv@quotient,w
  6415  0BF7  00F0               	movwf	?___lldiv
  6416  0BF8  0008               	return
  6417  0BF9                     __end_of___lldiv:	
  6418                           
  6419                           	psect	text25
  6420  0937                     __ptext25:	
  6421 ;; *************** function ___lltoft *****************
  6422 ;; Defined at:
  6423 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;  c               4    8[COMMON] unsigned long 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;  exp             1   13[COMMON] unsigned char 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  3    8[COMMON] float 
  6430 ;; Registers used:
  6431 ;;		wreg, status,2, status,0, pclath, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6437 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;Total ram usage:        6 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    1
  6444 ;; This function calls:
  6445 ;;		___ftpack
  6446 ;; This function is called by:
  6447 ;;		_ftoa
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           
  6452                           ;psect for function ___lltoft
  6453  0937                     ___lltoft:	
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6457  0937  308E               	movlw	142
  6458  0938  00FC               	movwf	??___lltoft
  6459  0939  087C               	movf	??___lltoft,w
  6460  093A  00FD               	movwf	___lltoft@exp
  6461  093B                     l2783:	
  6462  093B  30FF               	movlw	255
  6463  093C  057B               	andwf	___lltoft@c+3,w
  6464  093D  1903               	btfsc	3,2
  6465  093E  294B               	goto	l2785
  6466  093F  3001               	movlw	1
  6467  0940                     u3695:	
  6468  0940  36FB               	lsrf	___lltoft@c+3,f
  6469  0941  0CFA               	rrf	___lltoft@c+2,f
  6470  0942  0CF9               	rrf	___lltoft@c+1,f
  6471  0943  0CF8               	rrf	___lltoft@c,f
  6472  0944  0B89               	decfsz	9,f
  6473  0945  2940               	goto	u3695
  6474  0946  3001               	movlw	1
  6475  0947  00FC               	movwf	??___lltoft
  6476  0948  087C               	movf	??___lltoft,w
  6477  0949  07FD               	addwf	___lltoft@exp,f
  6478  094A  293B               	goto	l2783
  6479  094B                     l2785:	
  6480  094B  0878               	movf	___lltoft@c,w
  6481  094C  00F0               	movwf	___ftpack@arg
  6482  094D  0879               	movf	___lltoft@c+1,w
  6483  094E  00F1               	movwf	___ftpack@arg+1
  6484  094F  087A               	movf	___lltoft@c+2,w
  6485  0950  00F2               	movwf	___ftpack@arg+2
  6486  0951  087D               	movf	___lltoft@exp,w
  6487  0952  00FC               	movwf	??___lltoft
  6488  0953  087C               	movf	??___lltoft,w
  6489  0954  00F3               	movwf	___ftpack@exp
  6490  0955  01F4               	clrf	___ftpack@sign
  6491  0956  3180  2006         	fcall	___ftpack
  6492  0958  0870               	movf	?___ftpack,w
  6493  0959  00F8               	movwf	?___lltoft
  6494  095A  0871               	movf	?___ftpack+1,w
  6495  095B  00F9               	movwf	?___lltoft+1
  6496  095C  0872               	movf	?___ftpack+2,w
  6497  095D  00FA               	movwf	?___lltoft+2
  6498  095E  0008               	return
  6499  095F                     __end_of___lltoft:	
  6500                           
  6501                           	psect	text26
  6502  0CD6                     __ptext26:	
  6503 ;; *************** function ___fttol *****************
  6504 ;; Defined at:
  6505 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  f1              3   10[BANK0 ] float 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  lval            4   19[BANK0 ] unsigned long 
  6510 ;;  exp1            1   23[BANK0 ] unsigned char 
  6511 ;;  sign1           1   18[BANK0 ] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  4   10[BANK0 ] long 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6521 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;Total ram usage:       14 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_ftoa
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function ___fttol
  6536  0CD6                     ___fttol:	
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6540  0CD6  0020               	movlb	0	; select bank0
  6541  0CD7  082A               	movf	___fttol@f1,w
  6542  0CD8  00AE               	movwf	??___fttol
  6543  0CD9  082B               	movf	___fttol@f1+1,w
  6544  0CDA  00AF               	movwf	??___fttol+1
  6545  0CDB  082C               	movf	___fttol@f1+2,w
  6546  0CDC  00B0               	movwf	??___fttol+2
  6547  0CDD  1003               	clrc
  6548  0CDE  0D2F               	rlf	??___fttol+1,w
  6549  0CDF  0D30               	rlf	??___fttol+2,w
  6550  0CE0  00B1               	movwf	??___fttol+3
  6551  0CE1  0831               	movf	??___fttol+3,w
  6552  0CE2  00B7               	movwf	___fttol@exp1
  6553  0CE3  0837               	movf	___fttol@exp1,w
  6554  0CE4  1D03               	btfss	3,2
  6555  0CE5  2CEF               	goto	l2743
  6556  0CE6  3000               	movlw	0
  6557  0CE7  00AD               	movwf	?___fttol+3
  6558  0CE8  3000               	movlw	0
  6559  0CE9  00AC               	movwf	?___fttol+2
  6560  0CEA  3000               	movlw	0
  6561  0CEB  00AB               	movwf	?___fttol+1
  6562  0CEC  3000               	movlw	0
  6563  0CED  00AA               	movwf	?___fttol
  6564  0CEE  0008               	return
  6565  0CEF                     l2743:	
  6566  0CEF  082A               	movf	___fttol@f1,w
  6567  0CF0  00AE               	movwf	??___fttol
  6568  0CF1  082B               	movf	___fttol@f1+1,w
  6569  0CF2  00AF               	movwf	??___fttol+1
  6570  0CF3  082C               	movf	___fttol@f1+2,w
  6571  0CF4  00B0               	movwf	??___fttol+2
  6572  0CF5  3017               	movlw	23
  6573  0CF6                     u3605:	
  6574  0CF6  36B0               	lsrf	??___fttol+2,f
  6575  0CF7  0CAF               	rrf	??___fttol+1,f
  6576  0CF8  0CAE               	rrf	??___fttol,f
  6577  0CF9  0B89               	decfsz	9,f
  6578  0CFA  2CF6               	goto	u3605
  6579  0CFB  082E               	movf	??___fttol,w
  6580  0CFC  00B1               	movwf	??___fttol+3
  6581  0CFD  0831               	movf	??___fttol+3,w
  6582  0CFE  00B2               	movwf	___fttol@sign1
  6583  0CFF  17AB               	bsf	___fttol@f1+1,7
  6584  0D00  30FF               	movlw	255
  6585  0D01  05AA               	andwf	___fttol@f1,f
  6586  0D02  30FF               	movlw	255
  6587  0D03  05AB               	andwf	___fttol@f1+1,f
  6588  0D04  3000               	movlw	0
  6589  0D05  05AC               	andwf	___fttol@f1+2,f
  6590  0D06  082A               	movf	___fttol@f1,w
  6591  0D07  00B3               	movwf	___fttol@lval
  6592  0D08  082B               	movf	___fttol@f1+1,w
  6593  0D09  00B4               	movwf	___fttol@lval+1
  6594  0D0A  082C               	movf	___fttol@f1+2,w
  6595  0D0B  00B5               	movwf	___fttol@lval+2
  6596  0D0C  01B6               	clrf	___fttol@lval+3
  6597  0D0D  308E               	movlw	142
  6598  0D0E  02B7               	subwf	___fttol@exp1,f
  6599  0D0F  1FB7               	btfss	___fttol@exp1,7
  6600  0D10  2D2D               	goto	l2763
  6601  0D11  0837               	movf	___fttol@exp1,w
  6602  0D12  3A80               	xorlw	128
  6603  0D13  3E8F               	addlw	143
  6604  0D14  1803               	skipnc
  6605  0D15  2D1F               	goto	l2761
  6606  0D16  3000               	movlw	0
  6607  0D17  00AD               	movwf	?___fttol+3
  6608  0D18  3000               	movlw	0
  6609  0D19  00AC               	movwf	?___fttol+2
  6610  0D1A  3000               	movlw	0
  6611  0D1B  00AB               	movwf	?___fttol+1
  6612  0D1C  3000               	movlw	0
  6613  0D1D  00AA               	movwf	?___fttol
  6614  0D1E  0008               	return
  6615  0D1F                     l2761:	
  6616  0D1F  3001               	movlw	1
  6617  0D20                     u3635:	
  6618  0D20  36B6               	lsrf	___fttol@lval+3,f
  6619  0D21  0CB5               	rrf	___fttol@lval+2,f
  6620  0D22  0CB4               	rrf	___fttol@lval+1,f
  6621  0D23  0CB3               	rrf	___fttol@lval,f
  6622  0D24  0B89               	decfsz	9,f
  6623  0D25  2D20               	goto	u3635
  6624  0D26  3001               	movlw	1
  6625  0D27  00AE               	movwf	??___fttol
  6626  0D28  082E               	movf	??___fttol,w
  6627  0D29  07B7               	addwf	___fttol@exp1,f
  6628  0D2A  1903               	btfsc	3,2
  6629  0D2B  2D46               	goto	l2771
  6630  0D2C  2D1F               	goto	l2761
  6631  0D2D                     l2763:	
  6632  0D2D  3018               	movlw	24
  6633  0D2E  0237               	subwf	___fttol@exp1,w
  6634  0D2F  1C03               	skipc
  6635  0D30  2D43               	goto	l651
  6636  0D31  3000               	movlw	0
  6637  0D32  00AD               	movwf	?___fttol+3
  6638  0D33  3000               	movlw	0
  6639  0D34  00AC               	movwf	?___fttol+2
  6640  0D35  3000               	movlw	0
  6641  0D36  00AB               	movwf	?___fttol+1
  6642  0D37  3000               	movlw	0
  6643  0D38  00AA               	movwf	?___fttol
  6644  0D39  0008               	return
  6645  0D3A                     l2769:	
  6646  0D3A  3001               	movlw	1
  6647  0D3B                     u3665:	
  6648  0D3B  35B3               	lslf	___fttol@lval,f
  6649  0D3C  0DB4               	rlf	___fttol@lval+1,f
  6650  0D3D  0DB5               	rlf	___fttol@lval+2,f
  6651  0D3E  0DB6               	rlf	___fttol@lval+3,f
  6652  0D3F  0B89               	decfsz	9,f
  6653  0D40  2D3B               	goto	u3665
  6654  0D41  3001               	movlw	1
  6655  0D42  02B7               	subwf	___fttol@exp1,f
  6656  0D43                     l651:	
  6657  0D43  0837               	movf	___fttol@exp1,w
  6658  0D44  1D03               	btfss	3,2
  6659  0D45  2D3A               	goto	l2769
  6660  0D46                     l2771:	
  6661  0D46  0832               	movf	___fttol@sign1,w
  6662  0D47  1903               	btfsc	3,2
  6663  0D48  2D54               	goto	l2775
  6664  0D49  09B3               	comf	___fttol@lval,f
  6665  0D4A  09B4               	comf	___fttol@lval+1,f
  6666  0D4B  09B5               	comf	___fttol@lval+2,f
  6667  0D4C  09B6               	comf	___fttol@lval+3,f
  6668  0D4D  0AB3               	incf	___fttol@lval,f
  6669  0D4E  1903               	skipnz
  6670  0D4F  0AB4               	incf	___fttol@lval+1,f
  6671  0D50  1903               	skipnz
  6672  0D51  0AB5               	incf	___fttol@lval+2,f
  6673  0D52  1903               	skipnz
  6674  0D53  0AB6               	incf	___fttol@lval+3,f
  6675  0D54                     l2775:	
  6676  0D54  0836               	movf	___fttol@lval+3,w
  6677  0D55  00AD               	movwf	?___fttol+3
  6678  0D56  0835               	movf	___fttol@lval+2,w
  6679  0D57  00AC               	movwf	?___fttol+2
  6680  0D58  0834               	movf	___fttol@lval+1,w
  6681  0D59  00AB               	movwf	?___fttol+1
  6682  0D5A  0833               	movf	___fttol@lval,w
  6683  0D5B  00AA               	movwf	?___fttol
  6684  0D5C  0008               	return
  6685  0D5D                     __end_of___fttol:	
  6686                           
  6687                           	psect	text27
  6688  08FB                     __ptext27:	
  6689 ;; *************** function ___ftsub *****************
  6690 ;; Defined at:
  6691 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  f2              3   54[BANK0 ] float 
  6694 ;;  f1              3   57[BANK0 ] float 
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;                  3   54[BANK0 ] float 
  6699 ;; Registers used:
  6700 ;;		wreg, status,2, status,0, pclath, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6706 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;Total ram usage:        6 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    2
  6713 ;; This function calls:
  6714 ;;		___ftadd
  6715 ;; This function is called by:
  6716 ;;		_ftoa
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function ___ftsub
  6722  08FB                     ___ftsub:	
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6726  08FB  0020               	movlb	0	; select bank0
  6727  08FC  0858               	movf	___ftsub@f2+2,w
  6728  08FD  0457               	iorwf	___ftsub@f2+1,w
  6729  08FE  0456               	iorwf	___ftsub@f2,w
  6730  08FF  1903               	skipnz
  6731  0900  2903               	goto	l2733
  6732  0901  3080               	movlw	128
  6733  0902  06D8               	xorwf	___ftsub@f2+2,f
  6734  0903                     l2733:	
  6735  0903  0859               	movf	___ftsub@f1,w
  6736  0904  00C9               	movwf	___ftadd@f1
  6737  0905  085A               	movf	___ftsub@f1+1,w
  6738  0906  00CA               	movwf	___ftadd@f1+1
  6739  0907  085B               	movf	___ftsub@f1+2,w
  6740  0908  00CB               	movwf	___ftadd@f1+2
  6741  0909  0856               	movf	___ftsub@f2,w
  6742  090A  00CC               	movwf	___ftadd@f2
  6743  090B  0857               	movf	___ftsub@f2+1,w
  6744  090C  00CD               	movwf	___ftadd@f2+1
  6745  090D  0858               	movf	___ftsub@f2+2,w
  6746  090E  00CE               	movwf	___ftadd@f2+2
  6747  090F  3180  206A         	fcall	___ftadd
  6748  0911  0020               	movlb	0	; select bank0
  6749  0912  0849               	movf	?___ftadd,w
  6750  0913  00D6               	movwf	?___ftsub
  6751  0914  084A               	movf	?___ftadd+1,w
  6752  0915  00D7               	movwf	?___ftsub+1
  6753  0916  084B               	movf	?___ftadd+2,w
  6754  0917  00D8               	movwf	?___ftsub+2
  6755  0918  0008               	return
  6756  0919                     __end_of___ftsub:	
  6757                           
  6758                           	psect	text28
  6759  006A                     __ptext28:	
  6760 ;; *************** function ___ftadd *****************
  6761 ;; Defined at:
  6762 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  f1              3   41[BANK0 ] float 
  6765 ;;  f2              3   44[BANK0 ] float 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  exp1            1   53[BANK0 ] unsigned char 
  6768 ;;  exp2            1   52[BANK0 ] unsigned char 
  6769 ;;  sign            1   51[BANK0 ] unsigned char 
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  3   41[BANK0 ] float 
  6772 ;; Registers used:
  6773 ;;		wreg, status,2, status,0, pclath, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6779 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;Total ram usage:       13 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    1
  6786 ;; This function calls:
  6787 ;;		___ftpack
  6788 ;; This function is called by:
  6789 ;;		_read_gps
  6790 ;;		___ftsub
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function ___ftadd
  6796  006A                     ___ftadd:	
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6800  006A  0020               	movlb	0	; select bank0
  6801  006B  0849               	movf	___ftadd@f1,w
  6802  006C  00CF               	movwf	??___ftadd
  6803  006D  084A               	movf	___ftadd@f1+1,w
  6804  006E  00D0               	movwf	??___ftadd+1
  6805  006F  084B               	movf	___ftadd@f1+2,w
  6806  0070  00D1               	movwf	??___ftadd+2
  6807  0071  1003               	clrc
  6808  0072  0D50               	rlf	??___ftadd+1,w
  6809  0073  0D51               	rlf	??___ftadd+2,w
  6810  0074  00D2               	movwf	??___ftadd+3
  6811  0075  0852               	movf	??___ftadd+3,w
  6812  0076  00D5               	movwf	___ftadd@exp1
  6813  0077  084C               	movf	___ftadd@f2,w
  6814  0078  00CF               	movwf	??___ftadd
  6815  0079  084D               	movf	___ftadd@f2+1,w
  6816  007A  00D0               	movwf	??___ftadd+1
  6817  007B  084E               	movf	___ftadd@f2+2,w
  6818  007C  00D1               	movwf	??___ftadd+2
  6819  007D  1003               	clrc
  6820  007E  0D50               	rlf	??___ftadd+1,w
  6821  007F  0D51               	rlf	??___ftadd+2,w
  6822  0080  00D2               	movwf	??___ftadd+3
  6823  0081  0852               	movf	??___ftadd+3,w
  6824  0082  00D4               	movwf	___ftadd@exp2
  6825  0083  0855               	movf	___ftadd@exp1,w
  6826  0084  1903               	btfsc	3,2
  6827  0085  2892               	goto	l2175
  6828  0086  0854               	movf	___ftadd@exp2,w
  6829  0087  0255               	subwf	___ftadd@exp1,w
  6830  0088  1803               	skipnc
  6831  0089  2899               	goto	l2179
  6832  008A  0355               	decf	___ftadd@exp1,w
  6833  008B  3AFF               	xorlw	255
  6834  008C  0754               	addwf	___ftadd@exp2,w
  6835  008D  00CF               	movwf	??___ftadd
  6836  008E  3019               	movlw	25
  6837  008F  024F               	subwf	??___ftadd,w
  6838  0090  1C03               	skipc
  6839  0091  2899               	goto	l2179
  6840  0092                     l2175:	
  6841  0092  084C               	movf	___ftadd@f2,w
  6842  0093  00C9               	movwf	?___ftadd
  6843  0094  084D               	movf	___ftadd@f2+1,w
  6844  0095  00CA               	movwf	?___ftadd+1
  6845  0096  084E               	movf	___ftadd@f2+2,w
  6846  0097  00CB               	movwf	?___ftadd+2
  6847  0098  0008               	return
  6848  0099                     l2179:	
  6849  0099  0854               	movf	___ftadd@exp2,w
  6850  009A  1903               	btfsc	3,2
  6851  009B  0008               	return
  6852  009C  0855               	movf	___ftadd@exp1,w
  6853  009D  0254               	subwf	___ftadd@exp2,w
  6854  009E  1803               	skipnc
  6855  009F  28A8               	goto	l2185
  6856  00A0  0354               	decf	___ftadd@exp2,w
  6857  00A1  3AFF               	xorlw	255
  6858  00A2  0755               	addwf	___ftadd@exp1,w
  6859  00A3  00CF               	movwf	??___ftadd
  6860  00A4  3019               	movlw	25
  6861  00A5  024F               	subwf	??___ftadd,w
  6862  00A6  1803               	btfsc	3,0
  6863  00A7  0008               	return
  6864  00A8                     l2185:	
  6865  00A8  3006               	movlw	6
  6866  00A9  00CF               	movwf	??___ftadd
  6867  00AA  084F               	movf	??___ftadd,w
  6868  00AB  00D3               	movwf	___ftadd@sign
  6869  00AC  1BCB               	btfsc	___ftadd@f1+2,7
  6870  00AD  17D3               	bsf	___ftadd@sign,7
  6871  00AE  1BCE               	btfsc	___ftadd@f2+2,7
  6872  00AF  1753               	bsf	___ftadd@sign,6
  6873  00B0  17CA               	bsf	___ftadd@f1+1,7
  6874  00B1  30FF               	movlw	255
  6875  00B2  05C9               	andwf	___ftadd@f1,f
  6876  00B3  30FF               	movlw	255
  6877  00B4  05CA               	andwf	___ftadd@f1+1,f
  6878  00B5  3000               	movlw	0
  6879  00B6  05CB               	andwf	___ftadd@f1+2,f
  6880  00B7  17CD               	bsf	___ftadd@f2+1,7
  6881  00B8  30FF               	movlw	255
  6882  00B9  05CC               	andwf	___ftadd@f2,f
  6883  00BA  30FF               	movlw	255
  6884  00BB  05CD               	andwf	___ftadd@f2+1,f
  6885  00BC  3000               	movlw	0
  6886  00BD  05CE               	andwf	___ftadd@f2+2,f
  6887  00BE  0854               	movf	___ftadd@exp2,w
  6888  00BF  0255               	subwf	___ftadd@exp1,w
  6889  00C0  1803               	skipnc
  6890  00C1  28E4               	goto	l2207
  6891  00C2                     l2197:	
  6892  00C2  3001               	movlw	1
  6893  00C3                     u2535:	
  6894  00C3  35CC               	lslf	___ftadd@f2,f
  6895  00C4  0DCD               	rlf	___ftadd@f2+1,f
  6896  00C5  0DCE               	rlf	___ftadd@f2+2,f
  6897  00C6  0B89               	decfsz	9,f
  6898  00C7  28C3               	goto	u2535
  6899  00C8  3001               	movlw	1
  6900  00C9  02D4               	subwf	___ftadd@exp2,f
  6901  00CA  0854               	movf	___ftadd@exp2,w
  6902  00CB  0655               	xorwf	___ftadd@exp1,w
  6903  00CC  1903               	skipnz
  6904  00CD  28DF               	goto	l2205
  6905  00CE  3001               	movlw	1
  6906  00CF  02D3               	subwf	___ftadd@sign,f
  6907  00D0  0853               	movf	___ftadd@sign,w
  6908  00D1  3907               	andlw	7
  6909  00D2  1903               	btfsc	3,2
  6910  00D3  28DF               	goto	l2205
  6911  00D4  28C2               	goto	l2197
  6912  00D5                     l2203:	
  6913  00D5  3001               	movlw	1
  6914  00D6                     u2565:	
  6915  00D6  36CB               	lsrf	___ftadd@f1+2,f
  6916  00D7  0CCA               	rrf	___ftadd@f1+1,f
  6917  00D8  0CC9               	rrf	___ftadd@f1,f
  6918  00D9  0B89               	decfsz	9,f
  6919  00DA  28D6               	goto	u2565
  6920  00DB  3001               	movlw	1
  6921  00DC  00CF               	movwf	??___ftadd
  6922  00DD  084F               	movf	??___ftadd,w
  6923  00DE  07D5               	addwf	___ftadd@exp1,f
  6924  00DF                     l2205:	
  6925  00DF  0855               	movf	___ftadd@exp1,w
  6926  00E0  0654               	xorwf	___ftadd@exp2,w
  6927  00E1  1903               	btfsc	3,2
  6928  00E2  2909               	goto	l583
  6929  00E3  28D5               	goto	l2203
  6930  00E4                     l2207:	
  6931  00E4  0855               	movf	___ftadd@exp1,w
  6932  00E5  0254               	subwf	___ftadd@exp2,w
  6933  00E6  1803               	skipnc
  6934  00E7  2909               	goto	l583
  6935  00E8                     l2209:	
  6936  00E8  3001               	movlw	1
  6937  00E9                     u2595:	
  6938  00E9  35C9               	lslf	___ftadd@f1,f
  6939  00EA  0DCA               	rlf	___ftadd@f1+1,f
  6940  00EB  0DCB               	rlf	___ftadd@f1+2,f
  6941  00EC  0B89               	decfsz	9,f
  6942  00ED  28E9               	goto	u2595
  6943  00EE  3001               	movlw	1
  6944  00EF  02D5               	subwf	___ftadd@exp1,f
  6945  00F0  0854               	movf	___ftadd@exp2,w
  6946  00F1  0655               	xorwf	___ftadd@exp1,w
  6947  00F2  1903               	skipnz
  6948  00F3  2905               	goto	l2217
  6949  00F4  3001               	movlw	1
  6950  00F5  02D3               	subwf	___ftadd@sign,f
  6951  00F6  0853               	movf	___ftadd@sign,w
  6952  00F7  3907               	andlw	7
  6953  00F8  1903               	btfsc	3,2
  6954  00F9  2905               	goto	l2217
  6955  00FA  28E8               	goto	l2209
  6956  00FB                     l2215:	
  6957  00FB  3001               	movlw	1
  6958  00FC                     u2625:	
  6959  00FC  36CE               	lsrf	___ftadd@f2+2,f
  6960  00FD  0CCD               	rrf	___ftadd@f2+1,f
  6961  00FE  0CCC               	rrf	___ftadd@f2,f
  6962  00FF  0B89               	decfsz	9,f
  6963  0100  28FC               	goto	u2625
  6964  0101  3001               	movlw	1
  6965  0102  00CF               	movwf	??___ftadd
  6966  0103  084F               	movf	??___ftadd,w
  6967  0104  07D4               	addwf	___ftadd@exp2,f
  6968  0105                     l2217:	
  6969  0105  0855               	movf	___ftadd@exp1,w
  6970  0106  0654               	xorwf	___ftadd@exp2,w
  6971  0107  1D03               	skipz
  6972  0108  28FB               	goto	l2215
  6973  0109                     l583:	
  6974  0109  1FD3               	btfss	___ftadd@sign,7
  6975  010A  291B               	goto	l2221
  6976  010B  30FF               	movlw	255
  6977  010C  06C9               	xorwf	___ftadd@f1,f
  6978  010D  30FF               	movlw	255
  6979  010E  06CA               	xorwf	___ftadd@f1+1,f
  6980  010F  30FF               	movlw	255
  6981  0110  06CB               	xorwf	___ftadd@f1+2,f
  6982  0111  3001               	movlw	1
  6983  0112  07C9               	addwf	___ftadd@f1,f
  6984  0113  3000               	movlw	0
  6985  0114  1803               	skipnc
  6986  0115  3001               	movlw	1
  6987  0116  07CA               	addwf	___ftadd@f1+1,f
  6988  0117  3000               	movlw	0
  6989  0118  1803               	skipnc
  6990  0119  3001               	movlw	1
  6991  011A  07CB               	addwf	___ftadd@f1+2,f
  6992  011B                     l2221:	
  6993  011B  1F53               	btfss	___ftadd@sign,6
  6994  011C  292D               	goto	l2225
  6995  011D  30FF               	movlw	255
  6996  011E  06CC               	xorwf	___ftadd@f2,f
  6997  011F  30FF               	movlw	255
  6998  0120  06CD               	xorwf	___ftadd@f2+1,f
  6999  0121  30FF               	movlw	255
  7000  0122  06CE               	xorwf	___ftadd@f2+2,f
  7001  0123  3001               	movlw	1
  7002  0124  07CC               	addwf	___ftadd@f2,f
  7003  0125  3000               	movlw	0
  7004  0126  1803               	skipnc
  7005  0127  3001               	movlw	1
  7006  0128  07CD               	addwf	___ftadd@f2+1,f
  7007  0129  3000               	movlw	0
  7008  012A  1803               	skipnc
  7009  012B  3001               	movlw	1
  7010  012C  07CE               	addwf	___ftadd@f2+2,f
  7011  012D                     l2225:	
  7012  012D  01D3               	clrf	___ftadd@sign
  7013  012E  0849               	movf	___ftadd@f1,w
  7014  012F  07CC               	addwf	___ftadd@f2,f
  7015  0130  084A               	movf	___ftadd@f1+1,w
  7016  0131  3DCD               	addwfc	___ftadd@f2+1,f
  7017  0132  084B               	movf	___ftadd@f1+2,w
  7018  0133  3DCE               	addwfc	___ftadd@f2+2,f
  7019  0134  1FCE               	btfss	___ftadd@f2+2,7
  7020  0135  2948               	goto	l2235
  7021  0136  30FF               	movlw	255
  7022  0137  06CC               	xorwf	___ftadd@f2,f
  7023  0138  30FF               	movlw	255
  7024  0139  06CD               	xorwf	___ftadd@f2+1,f
  7025  013A  30FF               	movlw	255
  7026  013B  06CE               	xorwf	___ftadd@f2+2,f
  7027  013C  3001               	movlw	1
  7028  013D  07CC               	addwf	___ftadd@f2,f
  7029  013E  3000               	movlw	0
  7030  013F  1803               	skipnc
  7031  0140  3001               	movlw	1
  7032  0141  07CD               	addwf	___ftadd@f2+1,f
  7033  0142  3000               	movlw	0
  7034  0143  1803               	skipnc
  7035  0144  3001               	movlw	1
  7036  0145  07CE               	addwf	___ftadd@f2+2,f
  7037  0146  01D3               	clrf	___ftadd@sign
  7038  0147  0AD3               	incf	___ftadd@sign,f
  7039  0148                     l2235:	
  7040  0148  084C               	movf	___ftadd@f2,w
  7041  0149  00F0               	movwf	___ftpack@arg
  7042  014A  084D               	movf	___ftadd@f2+1,w
  7043  014B  00F1               	movwf	___ftpack@arg+1
  7044  014C  084E               	movf	___ftadd@f2+2,w
  7045  014D  00F2               	movwf	___ftpack@arg+2
  7046  014E  0855               	movf	___ftadd@exp1,w
  7047  014F  00CF               	movwf	??___ftadd
  7048  0150  084F               	movf	??___ftadd,w
  7049  0151  00F3               	movwf	___ftpack@exp
  7050  0152  0853               	movf	___ftadd@sign,w
  7051  0153  00D0               	movwf	??___ftadd+1
  7052  0154  0850               	movf	??___ftadd+1,w
  7053  0155  00F4               	movwf	___ftpack@sign
  7054  0156  3180  2006         	fcall	___ftpack
  7055  0158  0870               	movf	?___ftpack,w
  7056  0159  0020               	movlb	0	; select bank0
  7057  015A  00C9               	movwf	?___ftadd
  7058  015B  0871               	movf	?___ftpack+1,w
  7059  015C  00CA               	movwf	?___ftadd+1
  7060  015D  0872               	movf	?___ftpack+2,w
  7061  015E  00CB               	movwf	?___ftadd+2
  7062  015F  0008               	return
  7063  0160                     __end_of___ftadd:	
  7064                           
  7065                           	psect	text29
  7066  17D9                     __ptext29:	
  7067 ;; *************** function ___ftneg *****************
  7068 ;; Defined at:
  7069 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;  f1              3    0[COMMON] float 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  3    0[COMMON] float 
  7076 ;; Registers used:
  7077 ;;		wreg
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7083 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7087 ;;Total ram usage:        3 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_strtod
  7093 ;;		_ftoa
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           
  7098                           ;psect for function ___ftneg
  7099  17D9                     ___ftneg:	
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in ___ftneg: [wreg]
  7103  17D9  0872               	movf	___ftneg@f1+2,w
  7104  17DA  0471               	iorwf	___ftneg@f1+1,w
  7105  17DB  0470               	iorwf	___ftneg@f1,w
  7106  17DC  1903               	skipnz
  7107  17DD  0008               	return
  7108  17DE  3080               	movlw	128
  7109  17DF  06F2               	xorwf	___ftneg@f1+2,f
  7110  17E0  0008               	return
  7111  17E1                     __end_of___ftneg:	
  7112                           
  7113                           	psect	text30
  7114  0F4D                     __ptext30:	
  7115 ;; *************** function ___ftmul *****************
  7116 ;; Defined at:
  7117 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  f1              3    8[COMMON] float 
  7120 ;;  f2              3   11[COMMON] float 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  f3_as_produc    3    5[BANK0 ] unsigned um
  7123 ;;  sign            1    9[BANK0 ] unsigned char 
  7124 ;;  cntr            1    8[BANK0 ] unsigned char 
  7125 ;;  exp             1    4[BANK0 ] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  3    8[COMMON] float 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7135 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;Total ram usage:       16 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    1
  7142 ;; This function calls:
  7143 ;;		___ftpack
  7144 ;; This function is called by:
  7145 ;;		_read_gps
  7146 ;;		_strtod
  7147 ;;		_ftoa
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           
  7152                           ;psect for function ___ftmul
  7153  0F4D                     ___ftmul:	
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7157  0F4D  0878               	movf	___ftmul@f1,w
  7158  0F4E  0020               	movlb	0	; select bank0
  7159  0F4F  00A0               	movwf	??___ftmul
  7160  0F50  0879               	movf	___ftmul@f1+1,w
  7161  0F51  00A1               	movwf	??___ftmul+1
  7162  0F52  087A               	movf	___ftmul@f1+2,w
  7163  0F53  00A2               	movwf	??___ftmul+2
  7164  0F54  1003               	clrc
  7165  0F55  0D21               	rlf	??___ftmul+1,w
  7166  0F56  0D22               	rlf	??___ftmul+2,w
  7167  0F57  00A3               	movwf	??___ftmul+3
  7168  0F58  0823               	movf	??___ftmul+3,w
  7169  0F59  00A4               	movwf	___ftmul@exp
  7170  0F5A  0824               	movf	___ftmul@exp,w
  7171  0F5B  1D03               	btfss	3,2
  7172  0F5C  2F64               	goto	l2307
  7173  0F5D  3000               	movlw	0
  7174  0F5E  00F8               	movwf	?___ftmul
  7175  0F5F  3000               	movlw	0
  7176  0F60  00F9               	movwf	?___ftmul+1
  7177  0F61  3000               	movlw	0
  7178  0F62  00FA               	movwf	?___ftmul+2
  7179  0F63  0008               	return
  7180  0F64                     l2307:	
  7181  0F64  087B               	movf	___ftmul@f2,w
  7182  0F65  00A0               	movwf	??___ftmul
  7183  0F66  087C               	movf	___ftmul@f2+1,w
  7184  0F67  00A1               	movwf	??___ftmul+1
  7185  0F68  087D               	movf	___ftmul@f2+2,w
  7186  0F69  00A2               	movwf	??___ftmul+2
  7187  0F6A  1003               	clrc
  7188  0F6B  0D21               	rlf	??___ftmul+1,w
  7189  0F6C  0D22               	rlf	??___ftmul+2,w
  7190  0F6D  00A3               	movwf	??___ftmul+3
  7191  0F6E  0823               	movf	??___ftmul+3,w
  7192  0F6F  00A9               	movwf	___ftmul@sign
  7193  0F70  0829               	movf	___ftmul@sign,w
  7194  0F71  1D03               	btfss	3,2
  7195  0F72  2F7A               	goto	l2313
  7196  0F73  3000               	movlw	0
  7197  0F74  00F8               	movwf	?___ftmul
  7198  0F75  3000               	movlw	0
  7199  0F76  00F9               	movwf	?___ftmul+1
  7200  0F77  3000               	movlw	0
  7201  0F78  00FA               	movwf	?___ftmul+2
  7202  0F79  0008               	return
  7203  0F7A                     l2313:	
  7204  0F7A  0829               	movf	___ftmul@sign,w
  7205  0F7B  3E7B               	addlw	123
  7206  0F7C  00A0               	movwf	??___ftmul
  7207  0F7D  0820               	movf	??___ftmul,w
  7208  0F7E  07A4               	addwf	___ftmul@exp,f
  7209  0F7F  0878               	movf	___ftmul@f1,w
  7210  0F80  00A0               	movwf	??___ftmul
  7211  0F81  0879               	movf	___ftmul@f1+1,w
  7212  0F82  00A1               	movwf	??___ftmul+1
  7213  0F83  087A               	movf	___ftmul@f1+2,w
  7214  0F84  00A2               	movwf	??___ftmul+2
  7215  0F85  3010               	movlw	16
  7216  0F86                     u2805:	
  7217  0F86  36A2               	lsrf	??___ftmul+2,f
  7218  0F87  0CA1               	rrf	??___ftmul+1,f
  7219  0F88  0CA0               	rrf	??___ftmul,f
  7220  0F89  0B89               	decfsz	9,f
  7221  0F8A  2F86               	goto	u2805
  7222  0F8B  0820               	movf	??___ftmul,w
  7223  0F8C  00A3               	movwf	??___ftmul+3
  7224  0F8D  0823               	movf	??___ftmul+3,w
  7225  0F8E  00A9               	movwf	___ftmul@sign
  7226  0F8F  087B               	movf	___ftmul@f2,w
  7227  0F90  00A0               	movwf	??___ftmul
  7228  0F91  087C               	movf	___ftmul@f2+1,w
  7229  0F92  00A1               	movwf	??___ftmul+1
  7230  0F93  087D               	movf	___ftmul@f2+2,w
  7231  0F94  00A2               	movwf	??___ftmul+2
  7232  0F95  3010               	movlw	16
  7233  0F96                     u2815:	
  7234  0F96  36A2               	lsrf	??___ftmul+2,f
  7235  0F97  0CA1               	rrf	??___ftmul+1,f
  7236  0F98  0CA0               	rrf	??___ftmul,f
  7237  0F99  0B89               	decfsz	9,f
  7238  0F9A  2F96               	goto	u2815
  7239  0F9B  0820               	movf	??___ftmul,w
  7240  0F9C  00A3               	movwf	??___ftmul+3
  7241  0F9D  0823               	movf	??___ftmul+3,w
  7242  0F9E  06A9               	xorwf	___ftmul@sign,f
  7243  0F9F  3080               	movlw	128
  7244  0FA0  00A0               	movwf	??___ftmul
  7245  0FA1  0820               	movf	??___ftmul,w
  7246  0FA2  05A9               	andwf	___ftmul@sign,f
  7247  0FA3  17F9               	bsf	___ftmul@f1+1,7
  7248  0FA4  17FC               	bsf	___ftmul@f2+1,7
  7249  0FA5  30FF               	movlw	255
  7250  0FA6  05FB               	andwf	___ftmul@f2,f
  7251  0FA7  30FF               	movlw	255
  7252  0FA8  05FC               	andwf	___ftmul@f2+1,f
  7253  0FA9  3000               	movlw	0
  7254  0FAA  05FD               	andwf	___ftmul@f2+2,f
  7255  0FAB  3000               	movlw	0
  7256  0FAC  00A5               	movwf	___ftmul@f3_as_product
  7257  0FAD  3000               	movlw	0
  7258  0FAE  00A6               	movwf	___ftmul@f3_as_product+1
  7259  0FAF  3000               	movlw	0
  7260  0FB0  00A7               	movwf	___ftmul@f3_as_product+2
  7261  0FB1  3007               	movlw	7
  7262  0FB2  00A0               	movwf	??___ftmul
  7263  0FB3  0820               	movf	??___ftmul,w
  7264  0FB4  00A8               	movwf	___ftmul@cntr
  7265  0FB5                     l2325:	
  7266  0FB5  1C78               	btfss	___ftmul@f1,0
  7267  0FB6  2FBD               	goto	l2329
  7268  0FB7  087B               	movf	___ftmul@f2,w
  7269  0FB8  07A5               	addwf	___ftmul@f3_as_product,f
  7270  0FB9  087C               	movf	___ftmul@f2+1,w
  7271  0FBA  3DA6               	addwfc	___ftmul@f3_as_product+1,f
  7272  0FBB  087D               	movf	___ftmul@f2+2,w
  7273  0FBC  3DA7               	addwfc	___ftmul@f3_as_product+2,f
  7274  0FBD                     l2329:	
  7275  0FBD  3001               	movlw	1
  7276  0FBE                     u2835:	
  7277  0FBE  36FA               	lsrf	___ftmul@f1+2,f
  7278  0FBF  0CF9               	rrf	___ftmul@f1+1,f
  7279  0FC0  0CF8               	rrf	___ftmul@f1,f
  7280  0FC1  0B89               	decfsz	9,f
  7281  0FC2  2FBE               	goto	u2835
  7282  0FC3  3001               	movlw	1
  7283  0FC4                     u2845:	
  7284  0FC4  35FB               	lslf	___ftmul@f2,f
  7285  0FC5  0DFC               	rlf	___ftmul@f2+1,f
  7286  0FC6  0DFD               	rlf	___ftmul@f2+2,f
  7287  0FC7  0B89               	decfsz	9,f
  7288  0FC8  2FC4               	goto	u2845
  7289  0FC9  3001               	movlw	1
  7290  0FCA  02A8               	subwf	___ftmul@cntr,f
  7291  0FCB  1D03               	btfss	3,2
  7292  0FCC  2FB5               	goto	l2325
  7293  0FCD  3009               	movlw	9
  7294  0FCE  00A0               	movwf	??___ftmul
  7295  0FCF  0820               	movf	??___ftmul,w
  7296  0FD0  00A8               	movwf	___ftmul@cntr
  7297  0FD1                     l2337:	
  7298  0FD1  1C78               	btfss	___ftmul@f1,0
  7299  0FD2  2FD9               	goto	l2341
  7300  0FD3  087B               	movf	___ftmul@f2,w
  7301  0FD4  07A5               	addwf	___ftmul@f3_as_product,f
  7302  0FD5  087C               	movf	___ftmul@f2+1,w
  7303  0FD6  3DA6               	addwfc	___ftmul@f3_as_product+1,f
  7304  0FD7  087D               	movf	___ftmul@f2+2,w
  7305  0FD8  3DA7               	addwfc	___ftmul@f3_as_product+2,f
  7306  0FD9                     l2341:	
  7307  0FD9  3001               	movlw	1
  7308  0FDA                     u2875:	
  7309  0FDA  36FA               	lsrf	___ftmul@f1+2,f
  7310  0FDB  0CF9               	rrf	___ftmul@f1+1,f
  7311  0FDC  0CF8               	rrf	___ftmul@f1,f
  7312  0FDD  0B89               	decfsz	9,f
  7313  0FDE  2FDA               	goto	u2875
  7314  0FDF  3001               	movlw	1
  7315  0FE0                     u2885:	
  7316  0FE0  36A7               	lsrf	___ftmul@f3_as_product+2,f
  7317  0FE1  0CA6               	rrf	___ftmul@f3_as_product+1,f
  7318  0FE2  0CA5               	rrf	___ftmul@f3_as_product,f
  7319  0FE3  0B89               	decfsz	9,f
  7320  0FE4  2FE0               	goto	u2885
  7321  0FE5  3001               	movlw	1
  7322  0FE6  02A8               	subwf	___ftmul@cntr,f
  7323  0FE7  1D03               	btfss	3,2
  7324  0FE8  2FD1               	goto	l2337
  7325  0FE9  0825               	movf	___ftmul@f3_as_product,w
  7326  0FEA  00F0               	movwf	___ftpack@arg
  7327  0FEB  0826               	movf	___ftmul@f3_as_product+1,w
  7328  0FEC  00F1               	movwf	___ftpack@arg+1
  7329  0FED  0827               	movf	___ftmul@f3_as_product+2,w
  7330  0FEE  00F2               	movwf	___ftpack@arg+2
  7331  0FEF  0824               	movf	___ftmul@exp,w
  7332  0FF0  00A0               	movwf	??___ftmul
  7333  0FF1  0820               	movf	??___ftmul,w
  7334  0FF2  00F3               	movwf	___ftpack@exp
  7335  0FF3  0829               	movf	___ftmul@sign,w
  7336  0FF4  00A1               	movwf	??___ftmul+1
  7337  0FF5  0821               	movf	??___ftmul+1,w
  7338  0FF6  00F4               	movwf	___ftpack@sign
  7339  0FF7  3180  2006         	fcall	___ftpack
  7340  0FF9  0870               	movf	?___ftpack,w
  7341  0FFA  00F8               	movwf	?___ftmul
  7342  0FFB  0871               	movf	?___ftpack+1,w
  7343  0FFC  00F9               	movwf	?___ftmul+1
  7344  0FFD  0872               	movf	?___ftpack+2,w
  7345  0FFE  00FA               	movwf	?___ftmul+2
  7346  0FFF  0008               	return
  7347  1000                     __end_of___ftmul:	
  7348                           
  7349                           	psect	text31
  7350  0006                     __ptext31:	
  7351 ;; *************** function ___ftpack *****************
  7352 ;; Defined at:
  7353 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;  arg             3    0[COMMON] unsigned um
  7356 ;;  exp             1    3[COMMON] unsigned char 
  7357 ;;  sign            1    4[COMMON] unsigned char 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  3    0[COMMON] float 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7369 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;Total ram usage:        8 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; This function calls:
  7376 ;;		Nothing
  7377 ;; This function is called by:
  7378 ;;		___altoft
  7379 ;;		___ftadd
  7380 ;;		___ftdiv
  7381 ;;		___ftmul
  7382 ;;		___lltoft
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           
  7387                           ;psect for function ___ftpack
  7388  0006                     ___ftpack:	
  7389                           
  7390                           ;incstack = 0
  7391                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7392  0006  0873               	movf	___ftpack@exp,w
  7393  0007  1903               	btfsc	3,2
  7394  0008  280E               	goto	l2041
  7395  0009  0872               	movf	___ftpack@arg+2,w
  7396  000A  0471               	iorwf	___ftpack@arg+1,w
  7397  000B  0470               	iorwf	___ftpack@arg,w
  7398  000C  1D03               	skipz
  7399  000D  281F               	goto	l2047
  7400  000E                     l2041:	
  7401  000E  3000               	movlw	0
  7402  000F  00F0               	movwf	?___ftpack
  7403  0010  3000               	movlw	0
  7404  0011  00F1               	movwf	?___ftpack+1
  7405  0012  3000               	movlw	0
  7406  0013  00F2               	movwf	?___ftpack+2
  7407  0014  0008               	return
  7408  0015                     l2045:	
  7409  0015  3001               	movlw	1
  7410  0016  00F5               	movwf	??___ftpack
  7411  0017  0875               	movf	??___ftpack,w
  7412  0018  07F3               	addwf	___ftpack@exp,f
  7413  0019  3001               	movlw	1
  7414  001A                     u2125:	
  7415  001A  36F2               	lsrf	___ftpack@arg+2,f
  7416  001B  0CF1               	rrf	___ftpack@arg+1,f
  7417  001C  0CF0               	rrf	___ftpack@arg,f
  7418  001D  0B89               	decfsz	9,f
  7419  001E  281A               	goto	u2125
  7420  001F                     l2047:	
  7421  001F  30FE               	movlw	254
  7422  0020  0572               	andwf	___ftpack@arg+2,w
  7423  0021  1903               	btfsc	3,2
  7424  0022  2838               	goto	l552
  7425  0023  2815               	goto	l2045
  7426  0024                     l2049:	
  7427  0024  3001               	movlw	1
  7428  0025  00F5               	movwf	??___ftpack
  7429  0026  0875               	movf	??___ftpack,w
  7430  0027  07F3               	addwf	___ftpack@exp,f
  7431  0028  3001               	movlw	1
  7432  0029  07F0               	addwf	___ftpack@arg,f
  7433  002A  3000               	movlw	0
  7434  002B  1803               	skipnc
  7435  002C  3001               	movlw	1
  7436  002D  07F1               	addwf	___ftpack@arg+1,f
  7437  002E  3000               	movlw	0
  7438  002F  1803               	skipnc
  7439  0030  3001               	movlw	1
  7440  0031  07F2               	addwf	___ftpack@arg+2,f
  7441  0032  3001               	movlw	1
  7442  0033                     u2145:	
  7443  0033  36F2               	lsrf	___ftpack@arg+2,f
  7444  0034  0CF1               	rrf	___ftpack@arg+1,f
  7445  0035  0CF0               	rrf	___ftpack@arg,f
  7446  0036  0B89               	decfsz	9,f
  7447  0037  2833               	goto	u2145
  7448  0038                     l552:	
  7449  0038  30FF               	movlw	255
  7450  0039  0572               	andwf	___ftpack@arg+2,w
  7451  003A  1903               	btfsc	3,2
  7452  003B  2845               	goto	l2057
  7453  003C  2824               	goto	l2049
  7454  003D                     l2055:	
  7455  003D  3001               	movlw	1
  7456  003E  02F3               	subwf	___ftpack@exp,f
  7457  003F  3001               	movlw	1
  7458  0040                     u2165:	
  7459  0040  35F0               	lslf	___ftpack@arg,f
  7460  0041  0DF1               	rlf	___ftpack@arg+1,f
  7461  0042  0DF2               	rlf	___ftpack@arg+2,f
  7462  0043  0B89               	decfsz	9,f
  7463  0044  2840               	goto	u2165
  7464  0045                     l2057:	
  7465  0045  1BF1               	btfsc	___ftpack@arg+1,7
  7466  0046  284B               	goto	l559
  7467  0047  3002               	movlw	2
  7468  0048  0273               	subwf	___ftpack@exp,w
  7469  0049  1803               	skipnc
  7470  004A  283D               	goto	l2055
  7471  004B                     l559:	
  7472  004B  1873               	btfsc	___ftpack@exp,0
  7473  004C  2853               	goto	l560
  7474  004D  30FF               	movlw	255
  7475  004E  05F0               	andwf	___ftpack@arg,f
  7476  004F  307F               	movlw	127
  7477  0050  05F1               	andwf	___ftpack@arg+1,f
  7478  0051  30FF               	movlw	255
  7479  0052  05F2               	andwf	___ftpack@arg+2,f
  7480  0053                     l560:	
  7481  0053  1003               	clrc
  7482  0054  0CF3               	rrf	___ftpack@exp,f
  7483  0055  0873               	movf	___ftpack@exp,w
  7484  0056  00F5               	movwf	??___ftpack
  7485  0057  01F6               	clrf	??___ftpack+1
  7486  0058  01F7               	clrf	??___ftpack+2
  7487  0059  3010               	movlw	16
  7488  005A                     u2205:	
  7489  005A  35F5               	lslf	??___ftpack,f
  7490  005B  0DF6               	rlf	??___ftpack+1,f
  7491  005C  0DF7               	rlf	??___ftpack+2,f
  7492  005D  0B89               	decfsz	9,f
  7493  005E  285A               	goto	u2205
  7494  005F  0875               	movf	??___ftpack,w
  7495  0060  04F0               	iorwf	___ftpack@arg,f
  7496  0061  0876               	movf	??___ftpack+1,w
  7497  0062  04F1               	iorwf	___ftpack@arg+1,f
  7498  0063  0877               	movf	??___ftpack+2,w
  7499  0064  04F2               	iorwf	___ftpack@arg+2,f
  7500  0065  0874               	movf	___ftpack@sign,w
  7501  0066  1903               	btfsc	3,2
  7502  0067  0008               	return
  7503  0068  17F2               	bsf	___ftpack@arg+2,7
  7504  0069  0008               	return
  7505  006A                     __end_of___ftpack:	
  7506                           
  7507                           	psect	text32
  7508  09E4                     __ptext32:	
  7509 ;; *************** function ___ftge *****************
  7510 ;; Defined at:
  7511 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;  ff1             3    0[COMMON] float 
  7514 ;;  ff2             3    3[COMMON] float 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;		None               void
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7526 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;Total ram usage:        9 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		_strtod
  7536 ;;		_ftoa
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           
  7541                           ;psect for function ___ftge
  7542  09E4                     ___ftge:	
  7543                           
  7544                           ;incstack = 0
  7545                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7546  09E4  1FF2               	btfss	___ftge@ff1+2,7
  7547  09E5  29FA               	goto	l2285
  7548  09E6  0970               	comf	___ftge@ff1,w
  7549  09E7  00F6               	movwf	??___ftge
  7550  09E8  0971               	comf	___ftge@ff1+1,w
  7551  09E9  00F7               	movwf	??___ftge+1
  7552  09EA  0972               	comf	___ftge@ff1+2,w
  7553  09EB  00F8               	movwf	??___ftge+2
  7554  09EC  0AF6               	incf	??___ftge,f
  7555  09ED  1903               	skipnz
  7556  09EE  0AF7               	incf	??___ftge+1,f
  7557  09EF  1903               	skipnz
  7558  09F0  0AF8               	incf	??___ftge+2,f
  7559  09F1  3000               	movlw	0
  7560  09F2  0776               	addwf	??___ftge,w
  7561  09F3  00F0               	movwf	___ftge@ff1
  7562  09F4  3000               	movlw	0
  7563  09F5  3D77               	addwfc	??___ftge+1,w
  7564  09F6  00F1               	movwf	___ftge@ff1+1
  7565  09F7  3080               	movlw	128
  7566  09F8  3D78               	addwfc	??___ftge+2,w
  7567  09F9  00F2               	movwf	___ftge@ff1+2
  7568  09FA                     l2285:	
  7569  09FA  1FF5               	btfss	___ftge@ff2+2,7
  7570  09FB  2A10               	goto	l2289
  7571  09FC  0973               	comf	___ftge@ff2,w
  7572  09FD  00F6               	movwf	??___ftge
  7573  09FE  0974               	comf	___ftge@ff2+1,w
  7574  09FF  00F7               	movwf	??___ftge+1
  7575  0A00  0975               	comf	___ftge@ff2+2,w
  7576  0A01  00F8               	movwf	??___ftge+2
  7577  0A02  0AF6               	incf	??___ftge,f
  7578  0A03  1903               	skipnz
  7579  0A04  0AF7               	incf	??___ftge+1,f
  7580  0A05  1903               	skipnz
  7581  0A06  0AF8               	incf	??___ftge+2,f
  7582  0A07  3000               	movlw	0
  7583  0A08  0776               	addwf	??___ftge,w
  7584  0A09  00F3               	movwf	___ftge@ff2
  7585  0A0A  3000               	movlw	0
  7586  0A0B  3D77               	addwfc	??___ftge+1,w
  7587  0A0C  00F4               	movwf	___ftge@ff2+1
  7588  0A0D  3080               	movlw	128
  7589  0A0E  3D78               	addwfc	??___ftge+2,w
  7590  0A0F  00F5               	movwf	___ftge@ff2+2
  7591  0A10                     l2289:	
  7592  0A10  3080               	movlw	128
  7593  0A11  06F2               	xorwf	___ftge@ff1+2,f
  7594  0A12  3080               	movlw	128
  7595  0A13  06F5               	xorwf	___ftge@ff2+2,f
  7596  0A14  0875               	movf	___ftge@ff2+2,w
  7597  0A15  0272               	subwf	___ftge@ff1+2,w
  7598  0A16  1D03               	skipz
  7599  0A17  0008               	return
  7600  0A18  0874               	movf	___ftge@ff2+1,w
  7601  0A19  0271               	subwf	___ftge@ff1+1,w
  7602  0A1A  1D03               	skipz
  7603  0A1B  0008               	return
  7604  0A1C  0873               	movf	___ftge@ff2,w
  7605  0A1D  0270               	subwf	___ftge@ff1,w
  7606  0A1E  0008               	return
  7607  0A1F                     __end_of___ftge:	
  7608                           
  7609                           	psect	text33
  7610  08C5                     __ptext33:	
  7611 ;; *************** function _Lcd_Write_String *****************
  7612 ;; Defined at:
  7613 ;;		line 170 in file "LCD.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  a               1    wreg     PTR const unsigned char 
  7616 ;;		 -> ftoa@buf(17), Lcd_Write_Integer@buf(8), 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  a               1    8[COMMON] PTR const unsigned char 
  7619 ;;		 -> ftoa@buf(17), Lcd_Write_Integer@buf(8), 
  7620 ;;  i               2    6[COMMON] int 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      void 
  7623 ;; Registers used:
  7624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;Total ram usage:        4 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    2
  7637 ;; This function calls:
  7638 ;;		_Lcd_Write_Char
  7639 ;; This function is called by:
  7640 ;;		_Lcd_Write_Float
  7641 ;;		_Lcd_Write_Integer
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _Lcd_Write_String
  7647  08C5                     _Lcd_Write_String:	
  7648                           
  7649                           ;incstack = 0
  7650                           ; Regs used in _Lcd_Write_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7651                           ;Lcd_Write_String@a stored from wreg
  7652  08C5  00F8               	movwf	Lcd_Write_String@a
  7653                           
  7654                           ;LCD.c: 172: int i;
  7655                           ;LCD.c: 173: for(i=0;a[i]!='\0';i++)
  7656  08C6  01F6               	clrf	Lcd_Write_String@i
  7657  08C7  01F7               	clrf	Lcd_Write_String@i+1
  7658  08C8                     l2851:	
  7659  08C8  0876               	movf	Lcd_Write_String@i,w
  7660  08C9  0778               	addwf	Lcd_Write_String@a,w
  7661  08CA  00F5               	movwf	??_Lcd_Write_String
  7662  08CB  0875               	movf	??_Lcd_Write_String,w
  7663  08CC  0086               	movwf	6
  7664  08CD  0187               	clrf	7
  7665  08CE  0801               	movf	1,w
  7666  08CF  1903               	btfsc	3,2
  7667  08D0  0008               	return
  7668                           
  7669                           ;LCD.c: 174: Lcd_Write_Char(a[i]);
  7670  08D1  0876               	movf	Lcd_Write_String@i,w
  7671  08D2  0778               	addwf	Lcd_Write_String@a,w
  7672  08D3  00F5               	movwf	??_Lcd_Write_String
  7673  08D4  0875               	movf	??_Lcd_Write_String,w
  7674  08D5  0086               	movwf	6
  7675  08D6  0187               	clrf	7
  7676  08D7  0801               	movf	1,w
  7677  08D8  3189  2189  3188   	fcall	_Lcd_Write_Char
  7678  08DB  3001               	movlw	1
  7679  08DC  07F6               	addwf	Lcd_Write_String@i,f
  7680  08DD  3000               	movlw	0
  7681  08DE  3DF7               	addwfc	Lcd_Write_String@i+1,f
  7682  08DF  28C8               	goto	l2851
  7683  08E0                     __end_of_Lcd_Write_String:	
  7684                           
  7685                           	psect	text34
  7686  0989                     __ptext34:	
  7687 ;; *************** function _Lcd_Write_Char *****************
  7688 ;; Defined at:
  7689 ;;		line 146 in file "LCD.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  a               1    wreg     unsigned char 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  a               1    4[COMMON] unsigned char 
  7694 ;;  y               1    3[COMMON] unsigned char 
  7695 ;;  temp            1    2[COMMON] unsigned char 
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1    wreg      void 
  7698 ;; Registers used:
  7699 ;;		wreg, status,2, status,0, pclath, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;Total ram usage:        4 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    1
  7712 ;; This function calls:
  7713 ;;		_Lcd_Port
  7714 ;; This function is called by:
  7715 ;;		_Lcd_Write_String
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           
  7720                           ;psect for function _Lcd_Write_Char
  7721  0989                     _Lcd_Write_Char:	
  7722                           
  7723                           ;incstack = 0
  7724                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7725                           ;Lcd_Write_Char@a stored from wreg
  7726  0989  00F4               	movwf	Lcd_Write_Char@a
  7727                           
  7728                           ;LCD.c: 148: char temp,y;
  7729                           ;LCD.c: 149: temp = a&0x0F;
  7730  098A  0874               	movf	Lcd_Write_Char@a,w
  7731  098B  390F               	andlw	15
  7732  098C  00F1               	movwf	??_Lcd_Write_Char
  7733  098D  0871               	movf	??_Lcd_Write_Char,w
  7734  098E  00F2               	movwf	Lcd_Write_Char@temp
  7735                           
  7736                           ;LCD.c: 150: y = a&0xF0;
  7737  098F  0874               	movf	Lcd_Write_Char@a,w
  7738  0990  39F0               	andlw	240
  7739  0991  00F1               	movwf	??_Lcd_Write_Char
  7740  0992  0871               	movf	??_Lcd_Write_Char,w
  7741  0993  00F3               	movwf	Lcd_Write_Char@y
  7742                           
  7743                           ;LCD.c: 151: RD2 = 1;
  7744  0994  0020               	movlb	0	; select bank0
  7745  0995  150F               	bsf	15,2	;volatile
  7746                           
  7747                           ;LCD.c: 152: Lcd_Port(y>>4);
  7748  0996  0873               	movf	Lcd_Write_Char@y,w
  7749  0997  00F1               	movwf	??_Lcd_Write_Char
  7750  0998  3004               	movlw	4
  7751  0999                     u3065:	
  7752  0999  36F1               	lsrf	??_Lcd_Write_Char,f
  7753  099A  0B89               	decfsz	9,f
  7754  099B  2999               	goto	u3065
  7755  099C  0871               	movf	??_Lcd_Write_Char,w
  7756  099D  3188  207A  3189   	fcall	_Lcd_Port
  7757                           
  7758                           ;LCD.c: 153: RD3 = 1;
  7759  09A0  0020               	movlb	0	; select bank0
  7760  09A1  158F               	bsf	15,3	;volatile
  7761                           
  7762                           ;LCD.c: 154: _delay((unsigned long)((20)*(16000000/4000000.0)));
  7763  09A2  301A               	movlw	26
  7764  09A3                     u4197:	
  7765  09A3  0B89               	decfsz	9,f
  7766  09A4  29A3               	goto	u4197
  7767  09A5  3200               	nop2
  7768                           
  7769                           ;LCD.c: 155: RD3 = 0;
  7770  09A6  0020               	movlb	0	; select bank0
  7771  09A7  118F               	bcf	15,3	;volatile
  7772                           
  7773                           ;LCD.c: 156: Lcd_Port(temp);
  7774  09A8  0872               	movf	Lcd_Write_Char@temp,w
  7775  09A9  3188  207A  3189   	fcall	_Lcd_Port
  7776                           
  7777                           ;LCD.c: 157: RD3 = 1;
  7778  09AC  0020               	movlb	0	; select bank0
  7779  09AD  158F               	bsf	15,3	;volatile
  7780                           
  7781                           ;LCD.c: 158: _delay((unsigned long)((20)*(16000000/4000000.0)));
  7782  09AE  301A               	movlw	26
  7783  09AF                     u4207:	
  7784  09AF  0B89               	decfsz	9,f
  7785  09B0  29AF               	goto	u4207
  7786  09B1  3200               	nop2
  7787                           
  7788                           ;LCD.c: 159: RD3 = 0;
  7789  09B2  0020               	movlb	0	; select bank0
  7790  09B3  118F               	bcf	15,3	;volatile
  7791  09B4  0008               	return
  7792  09B5                     __end_of_Lcd_Write_Char:	
  7793                           
  7794                           	psect	text35
  7795  0A5B                     __ptext35:	
  7796 ;; *************** function _Lcd_Set_Cursor *****************
  7797 ;; Defined at:
  7798 ;;		line 90 in file "LCD.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  a               1    wreg     unsigned char 
  7801 ;;  b               1    3[COMMON] unsigned char 
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;  a               1    6[COMMON] unsigned char 
  7804 ;;  temp            1    9[COMMON] unsigned char 
  7805 ;;  y               1    8[COMMON] unsigned char 
  7806 ;;  z               1    7[COMMON] unsigned char 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      void 
  7809 ;; Registers used:
  7810 ;;		wreg, status,2, status,0, pclath, cstack
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7816 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;Total ram usage:        7 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:    2
  7823 ;; This function calls:
  7824 ;;		_Lcd_Cmd
  7825 ;; This function is called by:
  7826 ;;		_main
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _Lcd_Set_Cursor
  7832  0A5B                     _Lcd_Set_Cursor:	
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7836                           ;Lcd_Set_Cursor@a stored from wreg
  7837  0A5B  00F6               	movwf	Lcd_Set_Cursor@a
  7838                           
  7839                           ;LCD.c: 92: char temp,z,y;
  7840                           ;LCD.c: 93: if(a == 1)
  7841  0A5C  0376               	decf	Lcd_Set_Cursor@a,w
  7842  0A5D  1D03               	btfss	3,2
  7843  0A5E  2A7B               	goto	l2981
  7844                           
  7845                           ;LCD.c: 94: {
  7846                           ;LCD.c: 95: temp = 0x80 + b - 1;
  7847  0A5F  0873               	movf	Lcd_Set_Cursor@b,w
  7848  0A60  3E7F               	addlw	127
  7849  0A61  00F4               	movwf	??_Lcd_Set_Cursor
  7850  0A62  0874               	movf	??_Lcd_Set_Cursor,w
  7851  0A63  00F9               	movwf	Lcd_Set_Cursor@temp
  7852                           
  7853                           ;LCD.c: 96: z = temp>>4;
  7854  0A64  0879               	movf	Lcd_Set_Cursor@temp,w
  7855  0A65  00F4               	movwf	??_Lcd_Set_Cursor
  7856  0A66  3004               	movlw	4
  7857  0A67                     u4005:	
  7858  0A67  36F4               	lsrf	??_Lcd_Set_Cursor,f
  7859  0A68  0B89               	decfsz	9,f
  7860  0A69  2A67               	goto	u4005
  7861  0A6A  0874               	movf	??_Lcd_Set_Cursor,w
  7862  0A6B  00F5               	movwf	??_Lcd_Set_Cursor+1
  7863  0A6C  0875               	movf	??_Lcd_Set_Cursor+1,w
  7864  0A6D  00F7               	movwf	Lcd_Set_Cursor@z
  7865                           
  7866                           ;LCD.c: 97: y = temp & 0x0F;
  7867  0A6E  0879               	movf	Lcd_Set_Cursor@temp,w
  7868  0A6F  390F               	andlw	15
  7869  0A70  00F4               	movwf	??_Lcd_Set_Cursor
  7870  0A71  0874               	movf	??_Lcd_Set_Cursor,w
  7871  0A72  00F8               	movwf	Lcd_Set_Cursor@y
  7872                           
  7873                           ;LCD.c: 98: Lcd_Cmd(z);
  7874  0A73  0877               	movf	Lcd_Set_Cursor@z,w
  7875  0A74  3188  204F  318A   	fcall	_Lcd_Cmd
  7876                           
  7877                           ;LCD.c: 99: Lcd_Cmd(y);
  7878  0A77  0878               	movf	Lcd_Set_Cursor@y,w
  7879  0A78  3188  204F         	fcall	_Lcd_Cmd
  7880                           
  7881                           ;LCD.c: 100: }
  7882  0A7A  0008               	return
  7883  0A7B                     l2981:	
  7884                           
  7885                           ;LCD.c: 101: else if(a == 2)
  7886  0A7B  3002               	movlw	2
  7887  0A7C  0676               	xorwf	Lcd_Set_Cursor@a,w
  7888  0A7D  1D03               	btfss	3,2
  7889  0A7E  0008               	return
  7890                           
  7891                           ;LCD.c: 102: {
  7892                           ;LCD.c: 103: temp = 0xC0 + b - 1;
  7893  0A7F  0873               	movf	Lcd_Set_Cursor@b,w
  7894  0A80  3EBF               	addlw	191
  7895  0A81  00F4               	movwf	??_Lcd_Set_Cursor
  7896  0A82  0874               	movf	??_Lcd_Set_Cursor,w
  7897  0A83  00F9               	movwf	Lcd_Set_Cursor@temp
  7898                           
  7899                           ;LCD.c: 104: z = temp>>4;
  7900  0A84  0879               	movf	Lcd_Set_Cursor@temp,w
  7901  0A85  00F4               	movwf	??_Lcd_Set_Cursor
  7902  0A86  3004               	movlw	4
  7903  0A87                     u4025:	
  7904  0A87  36F4               	lsrf	??_Lcd_Set_Cursor,f
  7905  0A88  0B89               	decfsz	9,f
  7906  0A89  2A87               	goto	u4025
  7907  0A8A  0874               	movf	??_Lcd_Set_Cursor,w
  7908  0A8B  00F5               	movwf	??_Lcd_Set_Cursor+1
  7909  0A8C  0875               	movf	??_Lcd_Set_Cursor+1,w
  7910  0A8D  00F7               	movwf	Lcd_Set_Cursor@z
  7911                           
  7912                           ;LCD.c: 105: y = temp & 0x0F;
  7913  0A8E  0879               	movf	Lcd_Set_Cursor@temp,w
  7914  0A8F  390F               	andlw	15
  7915  0A90  00F4               	movwf	??_Lcd_Set_Cursor
  7916  0A91  0874               	movf	??_Lcd_Set_Cursor,w
  7917  0A92  00F8               	movwf	Lcd_Set_Cursor@y
  7918                           
  7919                           ;LCD.c: 106: Lcd_Cmd(z);
  7920  0A93  0877               	movf	Lcd_Set_Cursor@z,w
  7921  0A94  3188  204F  318A   	fcall	_Lcd_Cmd
  7922                           
  7923                           ;LCD.c: 107: Lcd_Cmd(y);
  7924  0A97  0878               	movf	Lcd_Set_Cursor@y,w
  7925  0A98  3188  204F         	fcall	_Lcd_Cmd
  7926  0A9A  0008               	return
  7927  0A9B                     __end_of_Lcd_Set_Cursor:	
  7928                           
  7929                           	psect	text36
  7930  0A9B                     __ptext36:	
  7931 ;; *************** function _Lcd_Init *****************
  7932 ;; Defined at:
  7933 ;;		line 119 in file "LCD.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;		None
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0, pclath, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;Total ram usage:        1 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:    2
  7954 ;; This function calls:
  7955 ;;		_Lcd_Cmd
  7956 ;;		_Lcd_Port
  7957 ;; This function is called by:
  7958 ;;		_main
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _Lcd_Init
  7964  0A9B                     _Lcd_Init:	
  7965                           
  7966                           ;LCD.c: 121: Lcd_Port(0x00);
  7967                           
  7968                           ;incstack = 0
  7969                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  7970  0A9B  3000               	movlw	0
  7971  0A9C  3188  207A  318A   	fcall	_Lcd_Port
  7972                           
  7973                           ;LCD.c: 122: _delay((unsigned long)((10)*(16000000/4000.0)));
  7974  0A9F  3034               	movlw	52
  7975  0AA0  00F3               	movwf	??_Lcd_Init
  7976  0AA1  30F2               	movlw	242
  7977  0AA2                     u4217:	
  7978  0AA2  0B89               	decfsz	9,f
  7979  0AA3  2AA2               	goto	u4217
  7980  0AA4  0BF3               	decfsz	??_Lcd_Init,f
  7981  0AA5  2AA2               	goto	u4217
  7982                           
  7983                           ;LCD.c: 123: Lcd_Cmd(0x03);
  7984  0AA6  3003               	movlw	3
  7985  0AA7  3188  204F  318A   	fcall	_Lcd_Cmd
  7986                           
  7987                           ;LCD.c: 124: _delay((unsigned long)((3)*(16000000/4000.0)));
  7988  0AAA  3010               	movlw	16
  7989  0AAB  00F3               	movwf	??_Lcd_Init
  7990  0AAC  3094               	movlw	148
  7991  0AAD                     u4227:	
  7992  0AAD  0B89               	decfsz	9,f
  7993  0AAE  2AAD               	goto	u4227
  7994  0AAF  0BF3               	decfsz	??_Lcd_Init,f
  7995  0AB0  2AAD               	goto	u4227
  7996  0AB1  3200               	nop2
  7997                           
  7998                           ;LCD.c: 125: Lcd_Cmd(0x03);
  7999  0AB2  3003               	movlw	3
  8000  0AB3  3188  204F  318A   	fcall	_Lcd_Cmd
  8001                           
  8002                           ;LCD.c: 126: _delay((unsigned long)((10)*(16000000/4000.0)));
  8003  0AB6  3034               	movlw	52
  8004  0AB7  00F3               	movwf	??_Lcd_Init
  8005  0AB8  30F2               	movlw	242
  8006  0AB9                     u4237:	
  8007  0AB9  0B89               	decfsz	9,f
  8008  0ABA  2AB9               	goto	u4237
  8009  0ABB  0BF3               	decfsz	??_Lcd_Init,f
  8010  0ABC  2AB9               	goto	u4237
  8011                           
  8012                           ;LCD.c: 127: Lcd_Cmd(0x03);
  8013  0ABD  3003               	movlw	3
  8014  0ABE  3188  204F  318A   	fcall	_Lcd_Cmd
  8015                           
  8016                           ;LCD.c: 129: Lcd_Cmd(0x02);
  8017  0AC1  3002               	movlw	2
  8018  0AC2  3188  204F  318A   	fcall	_Lcd_Cmd
  8019                           
  8020                           ;LCD.c: 130: Lcd_Cmd(0x02);
  8021  0AC5  3002               	movlw	2
  8022  0AC6  3188  204F  318A   	fcall	_Lcd_Cmd
  8023                           
  8024                           ;LCD.c: 131: Lcd_Cmd(0x08);
  8025  0AC9  3008               	movlw	8
  8026  0ACA  3188  204F  318A   	fcall	_Lcd_Cmd
  8027                           
  8028                           ;LCD.c: 132: Lcd_Cmd(0x00);
  8029  0ACD  3000               	movlw	0
  8030  0ACE  3188  204F  318A   	fcall	_Lcd_Cmd
  8031                           
  8032                           ;LCD.c: 133: Lcd_Cmd(0x0C);
  8033  0AD1  300C               	movlw	12
  8034  0AD2  3188  204F  318A   	fcall	_Lcd_Cmd
  8035                           
  8036                           ;LCD.c: 134: Lcd_Cmd(0x00);
  8037  0AD5  3000               	movlw	0
  8038  0AD6  3188  204F  318A   	fcall	_Lcd_Cmd
  8039                           
  8040                           ;LCD.c: 135: Lcd_Cmd(0x06);
  8041  0AD9  3006               	movlw	6
  8042  0ADA  3188  204F         	fcall	_Lcd_Cmd
  8043  0ADC  0008               	return
  8044  0ADD                     __end_of_Lcd_Init:	
  8045                           
  8046                           	psect	text37
  8047  17D1                     __ptext37:	
  8048 ;; *************** function _Lcd_Clear *****************
  8049 ;; Defined at:
  8050 ;;		line 76 in file "LCD.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;		None
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;		None
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      void 
  8057 ;; Registers used:
  8058 ;;		wreg, status,2, status,0, pclath, cstack
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;Total ram usage:        0 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    2
  8071 ;; This function calls:
  8072 ;;		_Lcd_Cmd
  8073 ;; This function is called by:
  8074 ;;		_main
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           
  8079                           ;psect for function _Lcd_Clear
  8080  17D1                     _Lcd_Clear:	
  8081                           
  8082                           ;LCD.c: 78: Lcd_Cmd(0);
  8083                           
  8084                           ;incstack = 0
  8085                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  8086  17D1  3000               	movlw	0
  8087  17D2  3188  204F  3197   	fcall	_Lcd_Cmd
  8088                           
  8089                           ;LCD.c: 79: Lcd_Cmd(1);
  8090  17D5  3001               	movlw	1
  8091  17D6  3188  204F         	fcall	_Lcd_Cmd
  8092  17D8  0008               	return
  8093  17D9                     __end_of_Lcd_Clear:	
  8094                           
  8095                           	psect	text38
  8096  084F                     __ptext38:	
  8097 ;; *************** function _Lcd_Cmd *****************
  8098 ;; Defined at:
  8099 ;;		line 59 in file "LCD.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;  a               1    wreg     unsigned char 
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;  a               1    2[COMMON] unsigned char 
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  1    wreg      void 
  8106 ;; Registers used:
  8107 ;;		wreg, status,2, status,0, pclath, cstack
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;Total ram usage:        2 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; Hardware stack levels required when called:    1
  8120 ;; This function calls:
  8121 ;;		_Lcd_Port
  8122 ;; This function is called by:
  8123 ;;		_Lcd_Clear
  8124 ;;		_Lcd_Set_Cursor
  8125 ;;		_Lcd_Init
  8126 ;;		_Lcd_Shift_Right
  8127 ;;		_Lcd_Shift_Left
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           
  8132                           ;psect for function _Lcd_Cmd
  8133  084F                     _Lcd_Cmd:	
  8134                           
  8135                           ;incstack = 0
  8136                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  8137                           ;Lcd_Cmd@a stored from wreg
  8138  084F  00F2               	movwf	Lcd_Cmd@a
  8139                           
  8140                           ;LCD.c: 61: RD2 = 0;
  8141  0850  0020               	movlb	0	; select bank0
  8142  0851  110F               	bcf	15,2	;volatile
  8143                           
  8144                           ;LCD.c: 62: Lcd_Port(a);
  8145  0852  0872               	movf	Lcd_Cmd@a,w
  8146  0853  3188  207A  3188   	fcall	_Lcd_Port
  8147                           
  8148                           ;LCD.c: 63: RD3 = 1;
  8149  0856  0020               	movlb	0	; select bank0
  8150  0857  158F               	bsf	15,3	;volatile
  8151                           
  8152                           ;LCD.c: 64: _delay((unsigned long)((1)*(16000000/4000.0)));
  8153  0858  3006               	movlw	6
  8154  0859  00F1               	movwf	??_Lcd_Cmd
  8155  085A  3030               	movlw	48
  8156  085B                     u4247:	
  8157  085B  0B89               	decfsz	9,f
  8158  085C  285B               	goto	u4247
  8159  085D  0BF1               	decfsz	??_Lcd_Cmd,f
  8160  085E  285B               	goto	u4247
  8161  085F  3200               	nop2
  8162                           
  8163                           ;LCD.c: 65: RD3 = 0;
  8164  0860  0020               	movlb	0	; select bank0
  8165  0861  118F               	bcf	15,3	;volatile
  8166  0862  0008               	return
  8167  0863                     __end_of_Lcd_Cmd:	
  8168                           
  8169                           	psect	text39
  8170  087A                     __ptext39:	
  8171 ;; *************** function _Lcd_Port *****************
  8172 ;; Defined at:
  8173 ;;		line 28 in file "LCD.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  a               1    wreg     unsigned char 
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;  a               1    0[COMMON] unsigned char 
  8178 ;; Return value:  Size  Location     Type
  8179 ;;                  1    wreg      void 
  8180 ;; Registers used:
  8181 ;;		wreg
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;Total ram usage:        1 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; This function calls:
  8194 ;;		Nothing
  8195 ;; This function is called by:
  8196 ;;		_Lcd_Cmd
  8197 ;;		_Lcd_Init
  8198 ;;		_Lcd_Write_Char
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _Lcd_Port
  8204  087A                     _Lcd_Port:	
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in _Lcd_Port: [wreg]
  8208                           ;Lcd_Port@a stored from wreg
  8209  087A  00F0               	movwf	Lcd_Port@a
  8210                           
  8211                           ;LCD.c: 30: if(a & 1)
  8212  087B  1C70               	btfss	Lcd_Port@a,0
  8213  087C  2880               	goto	l113
  8214                           
  8215                           ;LCD.c: 31: RD4 = 1;
  8216  087D  0020               	movlb	0	; select bank0
  8217  087E  160F               	bsf	15,4	;volatile
  8218  087F  2882               	goto	l2073
  8219  0880                     l113:	
  8220                           
  8221                           ;LCD.c: 32: else
  8222                           ;LCD.c: 33: RD4 = 0;
  8223  0880  0020               	movlb	0	; select bank0
  8224  0881  120F               	bcf	15,4	;volatile
  8225  0882                     l2073:	
  8226                           
  8227                           ;LCD.c: 35: if(a & 2)
  8228  0882  1CF0               	btfss	Lcd_Port@a,1
  8229  0883  2886               	goto	l115
  8230                           
  8231                           ;LCD.c: 36: RD5 = 1;
  8232  0884  168F               	bsf	15,5	;volatile
  8233  0885  2887               	goto	l2077
  8234  0886                     l115:	
  8235                           
  8236                           ;LCD.c: 37: else
  8237                           ;LCD.c: 38: RD5 = 0;
  8238  0886  128F               	bcf	15,5	;volatile
  8239  0887                     l2077:	
  8240                           
  8241                           ;LCD.c: 40: if(a & 4)
  8242  0887  1D70               	btfss	Lcd_Port@a,2
  8243  0888  288B               	goto	l117
  8244                           
  8245                           ;LCD.c: 41: RD6 = 1;
  8246  0889  170F               	bsf	15,6	;volatile
  8247  088A  288C               	goto	l2081
  8248  088B                     l117:	
  8249                           
  8250                           ;LCD.c: 42: else
  8251                           ;LCD.c: 43: RD6 = 0;
  8252  088B  130F               	bcf	15,6	;volatile
  8253  088C                     l2081:	
  8254                           
  8255                           ;LCD.c: 45: if(a & 8)
  8256  088C  1DF0               	btfss	Lcd_Port@a,3
  8257  088D  2890               	goto	l119
  8258                           
  8259                           ;LCD.c: 46: RD7 = 1;
  8260  088E  178F               	bsf	15,7	;volatile
  8261  088F  0008               	return
  8262  0890                     l119:	
  8263                           
  8264                           ;LCD.c: 47: else
  8265                           ;LCD.c: 48: RD7 = 0;
  8266  0890  138F               	bcf	15,7	;volatile
  8267  0891  0008               	return
  8268  0892                     __end_of_Lcd_Port:	
  8269                           
  8270                           	psect	text40
  8271  0DFF                     __ptext40:	
  8272 ;; *************** function _EUSART_Initialize *****************
  8273 ;; Defined at:
  8274 ;;		line 34 in file "EUSART.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;  baudrate        4    6[BANK0 ] const long 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  x               2    9[COMMON] unsigned int 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      unsigned char 
  8281 ;; Registers used:
  8282 ;;		wreg, status,2, status,0, pclath, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8288 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Totals:         2      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;Total ram usage:       14 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    1
  8295 ;; This function calls:
  8296 ;;		___aldiv
  8297 ;; This function is called by:
  8298 ;;		_main
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           
  8303                           ;psect for function _EUSART_Initialize
  8304  0DFF                     _EUSART_Initialize:	
  8305                           
  8306                           ;EUSART.c: 36: unsigned int x;
  8307                           ;EUSART.c: 37: x = (16000000 - baudrate*64)/(baudrate*64);
  8308                           
  8309                           ;incstack = 0
  8310                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8311  0DFF  0020               	movlb	0	; select bank0
  8312  0E00  0826               	movf	EUSART_Initialize@baudrate,w
  8313  0E01  00AA               	movwf	??_EUSART_Initialize
  8314  0E02  0827               	movf	EUSART_Initialize@baudrate+1,w
  8315  0E03  00AB               	movwf	??_EUSART_Initialize+1
  8316  0E04  0828               	movf	EUSART_Initialize@baudrate+2,w
  8317  0E05  00AC               	movwf	??_EUSART_Initialize+2
  8318  0E06  0829               	movf	EUSART_Initialize@baudrate+3,w
  8319  0E07  00AD               	movwf	??_EUSART_Initialize+3
  8320  0E08  3006               	movlw	6
  8321  0E09                     u3935:	
  8322  0E09  35AA               	lslf	??_EUSART_Initialize,f
  8323  0E0A  0DAB               	rlf	??_EUSART_Initialize+1,f
  8324  0E0B  0DAC               	rlf	??_EUSART_Initialize+2,f
  8325  0E0C  0DAD               	rlf	??_EUSART_Initialize+3,f
  8326  0E0D  0B89               	decfsz	9,f
  8327  0E0E  2E09               	goto	u3935
  8328  0E0F  082D               	movf	??_EUSART_Initialize+3,w
  8329  0E10  00F3               	movwf	___aldiv@divisor+3
  8330  0E11  082C               	movf	??_EUSART_Initialize+2,w
  8331  0E12  00F2               	movwf	___aldiv@divisor+2
  8332  0E13  082B               	movf	??_EUSART_Initialize+1,w
  8333  0E14  00F1               	movwf	___aldiv@divisor+1
  8334  0E15  082A               	movf	??_EUSART_Initialize,w
  8335  0E16  00F0               	movwf	___aldiv@divisor
  8336  0E17  0826               	movf	EUSART_Initialize@baudrate,w
  8337  0E18  00AE               	movwf	??_EUSART_Initialize+4
  8338  0E19  0827               	movf	EUSART_Initialize@baudrate+1,w
  8339  0E1A  00AF               	movwf	??_EUSART_Initialize+5
  8340  0E1B  0828               	movf	EUSART_Initialize@baudrate+2,w
  8341  0E1C  00B0               	movwf	??_EUSART_Initialize+6
  8342  0E1D  0829               	movf	EUSART_Initialize@baudrate+3,w
  8343  0E1E  00B1               	movwf	??_EUSART_Initialize+7
  8344  0E1F  3006               	movlw	6
  8345  0E20                     u3945:	
  8346  0E20  35AE               	lslf	??_EUSART_Initialize+4,f
  8347  0E21  0DAF               	rlf	??_EUSART_Initialize+5,f
  8348  0E22  0DB0               	rlf	??_EUSART_Initialize+6,f
  8349  0E23  0DB1               	rlf	??_EUSART_Initialize+7,f
  8350  0E24  0B89               	decfsz	9,f
  8351  0E25  2E20               	goto	u3945
  8352  0E26  09AE               	comf	??_EUSART_Initialize+4,f
  8353  0E27  09AF               	comf	??_EUSART_Initialize+5,f
  8354  0E28  09B0               	comf	??_EUSART_Initialize+6,f
  8355  0E29  09B1               	comf	??_EUSART_Initialize+7,f
  8356  0E2A  0AAE               	incf	??_EUSART_Initialize+4,f
  8357  0E2B  1903               	skipnz
  8358  0E2C  0AAF               	incf	??_EUSART_Initialize+5,f
  8359  0E2D  1903               	skipnz
  8360  0E2E  0AB0               	incf	??_EUSART_Initialize+6,f
  8361  0E2F  1903               	skipnz
  8362  0E30  0AB1               	incf	??_EUSART_Initialize+7,f
  8363  0E31  3000               	movlw	0
  8364  0E32  072E               	addwf	??_EUSART_Initialize+4,w
  8365  0E33  00F4               	movwf	___aldiv@dividend
  8366  0E34  3024               	movlw	36
  8367  0E35  3D2F               	addwfc	??_EUSART_Initialize+5,w
  8368  0E36  00F5               	movwf	___aldiv@dividend+1
  8369  0E37  30F4               	movlw	244
  8370  0E38  3D30               	addwfc	??_EUSART_Initialize+6,w
  8371  0E39  00F6               	movwf	___aldiv@dividend+2
  8372  0E3A  3000               	movlw	0
  8373  0E3B  3D31               	addwfc	??_EUSART_Initialize+7,w
  8374  0E3C  00F7               	movwf	___aldiv@dividend+3
  8375  0E3D  318C  2454  318D   	fcall	___aldiv
  8376  0E40  0871               	movf	?___aldiv+1,w
  8377  0E41  00FA               	movwf	EUSART_Initialize@x+1
  8378  0E42  0870               	movf	?___aldiv,w
  8379  0E43  00F9               	movwf	EUSART_Initialize@x
  8380                           
  8381                           ;EUSART.c: 38: if(x>255)
  8382  0E44  3001               	movlw	1
  8383  0E45  027A               	subwf	EUSART_Initialize@x+1,w
  8384  0E46  3000               	movlw	0
  8385  0E47  1903               	skipnz
  8386  0E48  0279               	subwf	EUSART_Initialize@x,w
  8387  0E49  1C03               	skipc
  8388  0E4A  2E92               	goto	l2951
  8389                           
  8390                           ;EUSART.c: 39: {
  8391                           ;EUSART.c: 40: x = (16000000 - baudrate*16)/(baudrate*16);
  8392  0E4B  0020               	movlb	0	; select bank0
  8393  0E4C  0826               	movf	EUSART_Initialize@baudrate,w
  8394  0E4D  00AA               	movwf	??_EUSART_Initialize
  8395  0E4E  0827               	movf	EUSART_Initialize@baudrate+1,w
  8396  0E4F  00AB               	movwf	??_EUSART_Initialize+1
  8397  0E50  0828               	movf	EUSART_Initialize@baudrate+2,w
  8398  0E51  00AC               	movwf	??_EUSART_Initialize+2
  8399  0E52  0829               	movf	EUSART_Initialize@baudrate+3,w
  8400  0E53  00AD               	movwf	??_EUSART_Initialize+3
  8401  0E54  3004               	movlw	4
  8402  0E55                     u3965:	
  8403  0E55  35AA               	lslf	??_EUSART_Initialize,f
  8404  0E56  0DAB               	rlf	??_EUSART_Initialize+1,f
  8405  0E57  0DAC               	rlf	??_EUSART_Initialize+2,f
  8406  0E58  0DAD               	rlf	??_EUSART_Initialize+3,f
  8407  0E59  0B89               	decfsz	9,f
  8408  0E5A  2E55               	goto	u3965
  8409  0E5B  082D               	movf	??_EUSART_Initialize+3,w
  8410  0E5C  00F3               	movwf	___aldiv@divisor+3
  8411  0E5D  082C               	movf	??_EUSART_Initialize+2,w
  8412  0E5E  00F2               	movwf	___aldiv@divisor+2
  8413  0E5F  082B               	movf	??_EUSART_Initialize+1,w
  8414  0E60  00F1               	movwf	___aldiv@divisor+1
  8415  0E61  082A               	movf	??_EUSART_Initialize,w
  8416  0E62  00F0               	movwf	___aldiv@divisor
  8417  0E63  0826               	movf	EUSART_Initialize@baudrate,w
  8418  0E64  00AE               	movwf	??_EUSART_Initialize+4
  8419  0E65  0827               	movf	EUSART_Initialize@baudrate+1,w
  8420  0E66  00AF               	movwf	??_EUSART_Initialize+5
  8421  0E67  0828               	movf	EUSART_Initialize@baudrate+2,w
  8422  0E68  00B0               	movwf	??_EUSART_Initialize+6
  8423  0E69  0829               	movf	EUSART_Initialize@baudrate+3,w
  8424  0E6A  00B1               	movwf	??_EUSART_Initialize+7
  8425  0E6B  3004               	movlw	4
  8426  0E6C                     u3975:	
  8427  0E6C  35AE               	lslf	??_EUSART_Initialize+4,f
  8428  0E6D  0DAF               	rlf	??_EUSART_Initialize+5,f
  8429  0E6E  0DB0               	rlf	??_EUSART_Initialize+6,f
  8430  0E6F  0DB1               	rlf	??_EUSART_Initialize+7,f
  8431  0E70  0B89               	decfsz	9,f
  8432  0E71  2E6C               	goto	u3975
  8433  0E72  09AE               	comf	??_EUSART_Initialize+4,f
  8434  0E73  09AF               	comf	??_EUSART_Initialize+5,f
  8435  0E74  09B0               	comf	??_EUSART_Initialize+6,f
  8436  0E75  09B1               	comf	??_EUSART_Initialize+7,f
  8437  0E76  0AAE               	incf	??_EUSART_Initialize+4,f
  8438  0E77  1903               	skipnz
  8439  0E78  0AAF               	incf	??_EUSART_Initialize+5,f
  8440  0E79  1903               	skipnz
  8441  0E7A  0AB0               	incf	??_EUSART_Initialize+6,f
  8442  0E7B  1903               	skipnz
  8443  0E7C  0AB1               	incf	??_EUSART_Initialize+7,f
  8444  0E7D  3000               	movlw	0
  8445  0E7E  072E               	addwf	??_EUSART_Initialize+4,w
  8446  0E7F  00F4               	movwf	___aldiv@dividend
  8447  0E80  3024               	movlw	36
  8448  0E81  3D2F               	addwfc	??_EUSART_Initialize+5,w
  8449  0E82  00F5               	movwf	___aldiv@dividend+1
  8450  0E83  30F4               	movlw	244
  8451  0E84  3D30               	addwfc	??_EUSART_Initialize+6,w
  8452  0E85  00F6               	movwf	___aldiv@dividend+2
  8453  0E86  3000               	movlw	0
  8454  0E87  3D31               	addwfc	??_EUSART_Initialize+7,w
  8455  0E88  00F7               	movwf	___aldiv@dividend+3
  8456  0E89  318C  2454  318D   	fcall	___aldiv
  8457  0E8C  0871               	movf	?___aldiv+1,w
  8458  0E8D  00FA               	movwf	EUSART_Initialize@x+1
  8459  0E8E  0870               	movf	?___aldiv,w
  8460  0E8F  00F9               	movwf	EUSART_Initialize@x
  8461                           
  8462                           ;EUSART.c: 41: BRGH = 1;
  8463  0E90  0023               	movlb	3	; select bank3
  8464  0E91  151E               	bsf	30,2	;volatile
  8465  0E92                     l2951:	
  8466                           
  8467                           ;EUSART.c: 42: }
  8468                           ;EUSART.c: 43: if(x<256)
  8469  0E92  3001               	movlw	1
  8470  0E93  027A               	subwf	EUSART_Initialize@x+1,w
  8471  0E94  3000               	movlw	0
  8472  0E95  1903               	skipnz
  8473  0E96  0279               	subwf	EUSART_Initialize@x,w
  8474  0E97  1803               	skipnc
  8475  0E98  0008               	return
  8476                           
  8477                           ;EUSART.c: 44: {
  8478                           ;EUSART.c: 45: SPBRG = x;
  8479  0E99  0879               	movf	EUSART_Initialize@x,w
  8480  0E9A  0023               	movlb	3	; select bank3
  8481  0E9B  009B               	movwf	27	;volatile
  8482                           
  8483                           ;EUSART.c: 46: SYNC = 0;
  8484  0E9C  121E               	bcf	30,4	;volatile
  8485                           
  8486                           ;EUSART.c: 47: SPEN = 1;
  8487  0E9D  179D               	bsf	29,7	;volatile
  8488                           
  8489                           ;EUSART.c: 48: TRISC7 = 1;
  8490  0E9E  0021               	movlb	1	; select bank1
  8491  0E9F  178E               	bsf	14,7	;volatile
  8492                           
  8493                           ;EUSART.c: 49: TRISC6 = 1;
  8494  0EA0  170E               	bsf	14,6	;volatile
  8495                           
  8496                           ;EUSART.c: 50: CREN = 1;
  8497  0EA1  0023               	movlb	3	; select bank3
  8498  0EA2  161D               	bsf	29,4	;volatile
  8499                           
  8500                           ;EUSART.c: 51: TXEN = 1;
  8501  0EA3  169E               	bsf	30,5	;volatile
  8502                           
  8503                           ;EUSART.c: 52: return 1;
  8504                           ;	Return value of _EUSART_Initialize is never used
  8505  0EA4  0008               	return
  8506  0EA5                     __end_of_EUSART_Initialize:	
  8507                           ;EUSART.c: 53: }
  8508                           ;EUSART.c: 54: return 0;
  8509                           ;	Return value of _EUSART_Initialize is never used
  8510                           
  8511                           
  8512                           	psect	text41
  8513  0C54                     __ptext41:	
  8514 ;; *************** function ___aldiv *****************
  8515 ;; Defined at:
  8516 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  divisor         4    0[COMMON] long 
  8519 ;;  dividend        4    4[COMMON] long 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  quotient        4    2[BANK0 ] long 
  8522 ;;  sign            1    1[BANK0 ] unsigned char 
  8523 ;;  counter         1    0[BANK0 ] unsigned char 
  8524 ;; Return value:  Size  Location     Type
  8525 ;;                  4    0[COMMON] long 
  8526 ;; Registers used:
  8527 ;;		wreg, status,2, status,0
  8528 ;; Tracked objects:
  8529 ;;		On entry : 0/0
  8530 ;;		On exit  : 0/0
  8531 ;;		Unchanged: 0/0
  8532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8533 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;Total ram usage:       15 bytes
  8538 ;; Hardware stack levels used:    1
  8539 ;; This function calls:
  8540 ;;		Nothing
  8541 ;; This function is called by:
  8542 ;;		_EUSART_Initialize
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function ___aldiv
  8548  0C54                     ___aldiv:	
  8549                           
  8550                           ;incstack = 0
  8551                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  8552  0C54  0020               	movlb	0	; select bank0
  8553  0C55  01A1               	clrf	___aldiv@sign
  8554  0C56  1FF3               	btfss	___aldiv@divisor+3,7
  8555  0C57  2C65               	goto	l357
  8556  0C58  09F0               	comf	___aldiv@divisor,f
  8557  0C59  09F1               	comf	___aldiv@divisor+1,f
  8558  0C5A  09F2               	comf	___aldiv@divisor+2,f
  8559  0C5B  09F3               	comf	___aldiv@divisor+3,f
  8560  0C5C  0AF0               	incf	___aldiv@divisor,f
  8561  0C5D  1903               	skipnz
  8562  0C5E  0AF1               	incf	___aldiv@divisor+1,f
  8563  0C5F  1903               	skipnz
  8564  0C60  0AF2               	incf	___aldiv@divisor+2,f
  8565  0C61  1903               	skipnz
  8566  0C62  0AF3               	incf	___aldiv@divisor+3,f
  8567  0C63  01A1               	clrf	___aldiv@sign
  8568  0C64  0AA1               	incf	___aldiv@sign,f
  8569  0C65                     l357:	
  8570  0C65  1FF7               	btfss	___aldiv@dividend+3,7
  8571  0C66  2C76               	goto	l2913
  8572  0C67  09F4               	comf	___aldiv@dividend,f
  8573  0C68  09F5               	comf	___aldiv@dividend+1,f
  8574  0C69  09F6               	comf	___aldiv@dividend+2,f
  8575  0C6A  09F7               	comf	___aldiv@dividend+3,f
  8576  0C6B  0AF4               	incf	___aldiv@dividend,f
  8577  0C6C  1903               	skipnz
  8578  0C6D  0AF5               	incf	___aldiv@dividend+1,f
  8579  0C6E  1903               	skipnz
  8580  0C6F  0AF6               	incf	___aldiv@dividend+2,f
  8581  0C70  1903               	skipnz
  8582  0C71  0AF7               	incf	___aldiv@dividend+3,f
  8583  0C72  3001               	movlw	1
  8584  0C73  00F8               	movwf	??___aldiv
  8585  0C74  0878               	movf	??___aldiv,w
  8586  0C75  06A1               	xorwf	___aldiv@sign,f
  8587  0C76                     l2913:	
  8588  0C76  3000               	movlw	0
  8589  0C77  00A5               	movwf	___aldiv@quotient+3
  8590  0C78  3000               	movlw	0
  8591  0C79  00A4               	movwf	___aldiv@quotient+2
  8592  0C7A  3000               	movlw	0
  8593  0C7B  00A3               	movwf	___aldiv@quotient+1
  8594  0C7C  3000               	movlw	0
  8595  0C7D  00A2               	movwf	___aldiv@quotient
  8596  0C7E  0873               	movf	___aldiv@divisor+3,w
  8597  0C7F  0472               	iorwf	___aldiv@divisor+2,w
  8598  0C80  0471               	iorwf	___aldiv@divisor+1,w
  8599  0C81  0470               	iorwf	___aldiv@divisor,w
  8600  0C82  1903               	skipnz
  8601  0C83  2CBF               	goto	l2935
  8602  0C84  01A0               	clrf	___aldiv@counter
  8603  0C85  0AA0               	incf	___aldiv@counter,f
  8604  0C86                     l2921:	
  8605  0C86  1BF3               	btfsc	___aldiv@divisor+3,7
  8606  0C87  2C94               	goto	l2923
  8607  0C88  3001               	movlw	1
  8608  0C89                     u3865:	
  8609  0C89  35F0               	lslf	___aldiv@divisor,f
  8610  0C8A  0DF1               	rlf	___aldiv@divisor+1,f
  8611  0C8B  0DF2               	rlf	___aldiv@divisor+2,f
  8612  0C8C  0DF3               	rlf	___aldiv@divisor+3,f
  8613  0C8D  0B89               	decfsz	9,f
  8614  0C8E  2C89               	goto	u3865
  8615  0C8F  3001               	movlw	1
  8616  0C90  00F8               	movwf	??___aldiv
  8617  0C91  0878               	movf	??___aldiv,w
  8618  0C92  07A0               	addwf	___aldiv@counter,f
  8619  0C93  2C86               	goto	l2921
  8620  0C94                     l2923:	
  8621  0C94  3001               	movlw	1
  8622  0C95                     u3885:	
  8623  0C95  35A2               	lslf	___aldiv@quotient,f
  8624  0C96  0DA3               	rlf	___aldiv@quotient+1,f
  8625  0C97  0DA4               	rlf	___aldiv@quotient+2,f
  8626  0C98  0DA5               	rlf	___aldiv@quotient+3,f
  8627  0C99  0B89               	decfsz	9,f
  8628  0C9A  2C95               	goto	u3885
  8629  0C9B  0873               	movf	___aldiv@divisor+3,w
  8630  0C9C  0277               	subwf	___aldiv@dividend+3,w
  8631  0C9D  1D03               	skipz
  8632  0C9E  2CA9               	goto	u3895
  8633  0C9F  0872               	movf	___aldiv@divisor+2,w
  8634  0CA0  0276               	subwf	___aldiv@dividend+2,w
  8635  0CA1  1D03               	skipz
  8636  0CA2  2CA9               	goto	u3895
  8637  0CA3  0871               	movf	___aldiv@divisor+1,w
  8638  0CA4  0275               	subwf	___aldiv@dividend+1,w
  8639  0CA5  1D03               	skipz
  8640  0CA6  2CA9               	goto	u3895
  8641  0CA7  0870               	movf	___aldiv@divisor,w
  8642  0CA8  0274               	subwf	___aldiv@dividend,w
  8643  0CA9                     u3895:	
  8644  0CA9  1C03               	skipc
  8645  0CAA  2CB4               	goto	l2931
  8646  0CAB  0870               	movf	___aldiv@divisor,w
  8647  0CAC  02F4               	subwf	___aldiv@dividend,f
  8648  0CAD  0871               	movf	___aldiv@divisor+1,w
  8649  0CAE  3BF5               	subwfb	___aldiv@dividend+1,f
  8650  0CAF  0872               	movf	___aldiv@divisor+2,w
  8651  0CB0  3BF6               	subwfb	___aldiv@dividend+2,f
  8652  0CB1  0873               	movf	___aldiv@divisor+3,w
  8653  0CB2  3BF7               	subwfb	___aldiv@dividend+3,f
  8654  0CB3  1422               	bsf	___aldiv@quotient,0
  8655  0CB4                     l2931:	
  8656  0CB4  3001               	movlw	1
  8657  0CB5                     u3905:	
  8658  0CB5  36F3               	lsrf	___aldiv@divisor+3,f
  8659  0CB6  0CF2               	rrf	___aldiv@divisor+2,f
  8660  0CB7  0CF1               	rrf	___aldiv@divisor+1,f
  8661  0CB8  0CF0               	rrf	___aldiv@divisor,f
  8662  0CB9  0B89               	decfsz	9,f
  8663  0CBA  2CB5               	goto	u3905
  8664  0CBB  3001               	movlw	1
  8665  0CBC  02A0               	subwf	___aldiv@counter,f
  8666  0CBD  1D03               	btfss	3,2
  8667  0CBE  2C94               	goto	l2923
  8668  0CBF                     l2935:	
  8669  0CBF  0821               	movf	___aldiv@sign,w
  8670  0CC0  1903               	btfsc	3,2
  8671  0CC1  2CCD               	goto	l2939
  8672  0CC2  09A2               	comf	___aldiv@quotient,f
  8673  0CC3  09A3               	comf	___aldiv@quotient+1,f
  8674  0CC4  09A4               	comf	___aldiv@quotient+2,f
  8675  0CC5  09A5               	comf	___aldiv@quotient+3,f
  8676  0CC6  0AA2               	incf	___aldiv@quotient,f
  8677  0CC7  1903               	skipnz
  8678  0CC8  0AA3               	incf	___aldiv@quotient+1,f
  8679  0CC9  1903               	skipnz
  8680  0CCA  0AA4               	incf	___aldiv@quotient+2,f
  8681  0CCB  1903               	skipnz
  8682  0CCC  0AA5               	incf	___aldiv@quotient+3,f
  8683  0CCD                     l2939:	
  8684  0CCD  0825               	movf	___aldiv@quotient+3,w
  8685  0CCE  00F3               	movwf	?___aldiv+3
  8686  0CCF  0824               	movf	___aldiv@quotient+2,w
  8687  0CD0  00F2               	movwf	?___aldiv+2
  8688  0CD1  0823               	movf	___aldiv@quotient+1,w
  8689  0CD2  00F1               	movwf	?___aldiv+1
  8690  0CD3  0822               	movf	___aldiv@quotient,w
  8691  0CD4  00F0               	movwf	?___aldiv
  8692  0CD5  0008               	return
  8693  0CD6                     __end_of___aldiv:	
  8694  007E                     btemp	set	126	;btemp
  8695  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    40
    Data        2
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      80
    BANK1            80      5      45
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            68      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 8
		 -> conversionString(BANK1[8]), 

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> Lcd_Write_Float@status(BANK1[2]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), STR_1(CODE[7]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), STR_1(CODE[7]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), STR_1(CODE[7]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), STR_1(CODE[7]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    memset@p1	PTR void  size(1) Largest target is 8
		 -> conversionString(BANK1[8]), 

    memset@p	PTR unsigned char  size(1) Largest target is 8
		 -> conversionString(BANK1[8]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> Lcd_Write_Integer@buf(COMMON[8]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 300
		 -> conversionString(BANK1[8]), NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 300
		 -> conversionString(BANK1[8]), NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strtod@res	PTR PTR const unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_7(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    sp__memset	PTR void  size(1) Largest target is 8
		 -> conversionString(BANK1[8]), 

    terminator	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    data	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    latitude	PTR  size(1) Largest target is 3
		 -> lat(BANK1[3]), 

    longitude	PTR  size(1) Largest target is 3
		 -> lon(BANK1[3]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    Lcd_Write_Float@buf11	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 8
		 -> Lcd_Write_Integer@buf(COMMON[8]), 

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), Lcd_Write_Integer@buf(COMMON[8]), 

    EUSART_Read_Char@Output	PTR unsigned char  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 


Critical Paths under _main in COMMON

    _read_gps->___ftdiv
    _read_gps->___ftmul
    _strstr->_strncmp
    _strncmp->_strlen
    _strtod->___altoft
    _strtod->___ftdiv
    _strtod->___ftmul
    ___ftdiv->___ftpack
    ___altoft->___ftpack
    _ftoa->___ftmul
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___lltoft
    ___ftadd->___ftdiv
    ___ftmul->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _EUSART_Initialize->___aldiv

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Float
    _read_gps->___ftadd
    _atof->_strtod
    _strtod->___ftdiv
    _strtod->___ftmul
    _Lcd_Write_Float->_ftoa
    _ftoa->___ftsub
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_atof
    _EUSART_Initialize->___aldiv

Critical Paths under _main in BANK1

    _main->_Lcd_Write_Float

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   32726
                                              3 BANK1      2     2      0
                  _EUSART_Initialize
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                    _Lcd_Write_Float
                           _initMain
                           _read_gps
 ---------------------------------------------------------------------------------
 (1) _read_gps                                            10    10      0   19872
                                             54 BANK0      7     7      0
                   _EUSART_Read_Char
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                               _atof
                             _memset
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _strstr                                               6     2      4    1443
                                              0 BANK0      6     2      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (3) _strncmp                                              8     2      6     293
                                              6 COMMON     8     2      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _strchr                                               6     2      4     194
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     362
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _atof                                                 3     0      3    9943
                                             38 BANK0      3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (3) _strtod                                              28    25      3    9709
                                             10 BANK0     28    25      3
                           ___altoft
                             ___bmul
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              2     2      0      90
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     198
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2450
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     198
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    1937
                                              8 COMMON     6     2      4
                                              0 BANK0      2     2      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read_Char                                     4     2      2      76
                                              0 COMMON     4     2      2
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMain                                             0     0      0       0
                        _internal_16
 ---------------------------------------------------------------------------------
 (2) _internal_16                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Float                                      8     5      3   11339
                                             74 BANK0      5     2      3
                                              0 BANK1      3     3      0
                   _Lcd_Write_String
                               _ftoa
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   10844
                                             60 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    1896
                                             10 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     265
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    1868
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             10 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3077
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    2904
                                             41 BANK0     13     7      6
                            ___ftdiv (ARG)
                           ___ftpack
                               _atof (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     257
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2602
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1746
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     454
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     322
                                              5 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     486
                                              3 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMMON     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                   14    10      4     721
                                              9 COMMON     2     2      0
                                              6 BANK0     12     8      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
     ___aldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Float
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _ftoa
       ___ftge
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _atof (ARG)
             _strtod
               ___altoft
                 ___ftpack
               ___bmul
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___lmul
               _isdigit
               _isspace
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
   _initMain
     _internal_16
   _read_gps
     _EUSART_Read_Char
       _EUSART_Read
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       _atof (ARG)
         _strtod
           ___altoft
             ___ftpack
           ___bmul
           ___ftdiv
             ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___lmul
           _isdigit
           _isspace
     ___ftdiv
       ___ftpack
     ___ftmul
       ___ftpack
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___bmul
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___lmul
         _isdigit
         _isspace
     _memset
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5      2D       7       56.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      8B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               44      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      8B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Apr 18 11:27:25 2017

              ___altoft@exp 0020                           _c 00A7                           _d 00A6  
                         _i 00A2              ___bmul@product 0072                 __CFG_CP$OFF 0000  
             ___altoft@sign 0021                          l67 17F6         ___wmul@multiplicand 0072  
              ___ftadd@exp1 0055                ___ftadd@exp2 0054                ___ftadd@sign 0053  
          ?_Lcd_Write_Float 006A                         l113 0880                         l115 0886  
                       l117 088B                         l302 08E8                         l119 0890  
                       l434 0612                         l276 0208                         l357 0C65  
                       l279 0227                         l439 05DF                         l560 0053  
                       l552 0038                         l456 06D5                         l801 0892  
                       l651 0D43                         l559 004B                         l583 0109  
                       l479 07C6                         _RD2 007A                         _RD3 007B  
                       _RD4 007C                         _RD5 007D                         _RD6 007E  
                       _RD7 007F                         _lat 00C4                         _lon 00C1  
              __CFG_BORV$LO 0000                         wreg 0009                __CFG_IESO$ON 0000  
              ?_EUSART_Read 0070                __CFG_LVP$OFF 0000                ___ftdiv@cntr 0024  
              ___ftdiv@sign 0029                        l2041 000E                        l2113 09BD  
                      l2203 00D5                        l2131 0834                        l2045 0015  
                      l2221 011B                        l2205 00DF                        l2117 09C7  
                      l2055 003D                        l2047 001F                        l2215 00FB  
                      l2207 00E4                        l2151 0A44                        l2127 082E  
                      l2081 088C                        l2073 0882                        l2057 0045  
                      l2049 0024                        l2313 0F7A                        l2225 012D  
                      l2217 0105                        l2209 00E8                        l2307 0F64  
                      l2235 0148                        l2251 0ED2                        l2163 084C  
                      l2077 0887                        l2341 0FD9                        l2325 0FB5  
                      l2093 081A                        l2149 0A34                        l2245 0EBC  
                      l2165 084D                        l3109 0496                        l2175 0092  
                      l2511 02D4                        l2503 029F                        l2407 17FE  
                      l2337 0FD1                        l2329 0FBD                        l2185 00A8  
                      l2521 02EB                        l2513 02D7                        l2273 0F2C  
                      l2265 0F13                        l2601 0639                        l3057 037A  
                      l3049 0349                        l3161 0C1A                        l2179 0099  
                      l2099 08E2                        l2507 02B7                        l2531 033A  
                      l2285 09FA                        l2197 00C2                        l2365 0BB7  
                      l2445 0198                        l2453 01C6                        l2605 0641  
                      l2541 057A                        l2375 0BE5                        l2367 0BC5  
                      l2391 0B36                        l2527 032F                        l2471 020F  
                      l2463 01D5                        l2439 0188                        l2607 0645  
                      l2551 0594                        l2543 058B                        l2289 0A10  
                      l2465 0204                        l2529 0166                        l2625 06A3  
                      l2561 05A7                        l2553 0598                        l2379 0BF0  
                      l2395 0B4E                        l2467 020A                        l2651 06D9  
                      l2555 059C                        l2811 0ADD                        l2733 0903  
                      l2389 0B28                        l2493 025B                        l2477 0236  
                      l2725 07D8                        l2653 06F9                        l2637 06B7  
                      l2629 06A8                        l2813 0B1C                        l2805 0AFB  
                      l2743 0CEF                        l2399 0B59                        l2487 0255  
                      l2719 07BF                        l2567 05B6                        l2559 05B4  
                      l2921 0C86                        l2913 0C76                        l2761 0D1F  
                      l2657 0713                        l2809 0B13                        l2931 0CB4  
                      l2923 0C94                        l2851 08C8                        l2771 0D46  
                      l2763 0D2D                        l2499 0288                        l2691 076D  
                      l2683 074D                        l2595 062B                        l2693 0772  
                      l2589 0619                        l2935 0CBF                        l2951 0E92  
                      l2775 0D54                        l2783 093B                        l2863 0D8F  
                      l2687 0753                        l2679 0746                        l2769 0D3A  
                      l2785 094B                        l2697 078C                        l2793 091D  
                      l2939 0CCD                        l2795 0929                        l2883 0B98  
                      l2981 0A7B                        l2877 0B63                        l2887 0BA4  
                      l2897 08B0                        STR_1 1033                        STR_2 103A  
                      STR_3 103A                        STR_4 103A                        STR_5 103A  
                      STR_6 103A                        STR_7 1028                        _BRGH 0CF2  
                      _CREN 0CEC                        u2205 005A                        u2125 001A  
                      u3015 0B44                        u2145 0033                        u3025 0B4F  
                      u2305 08EE                        u4005 0A67                        u2165 0040  
                      u3205 02C7                        u2335 09C8                        u4025 0A87  
                      u3065 0999                        u2345 09CF                        u3165 027E  
                      u3325 05D7                        u4207 09AF                        u2535 00C3  
                      u2295 08E9                        u4217 0AA2                        u2625 00FC  
                      u3185 0297                        u2705 0EF4                        u4227 0AAD  
                      u3195 02AF                        u2395 0A39                        u2715 0F14  
                      u4237 0AB9                        u2805 0F86                        u2565 00D6  
                      u3605 0CF6                        u2725 0F23                        u4247 085B  
                      u2815 0F96                        u2735 0F2D                        u4177 0C14  
                      u2835 0FBE                        u2595 00E9                        u3635 0D20  
                      u4187 0C4A                        u4197 09A3                        u2845 0FC4  
                      u2925 0BBA                        u2695 0EE4                        u3905 0CB5  
                      u3665 0D3B                        u2945 0BC6                        u2875 0FDA  
                      u2955 0BDA                        u2885 0FE0                        u2965 0BE6  
                      u3935 0E09                        u3695 0940                        u3865 0C89  
                      u3945 0E20                        _SCS0 04C8                        u2995 0B2B  
                      _SCS1 04C9                        u3885 0C95                        u3965 0E55  
                      u3895 0CA9                        u3975 0E6C                        _SPEN 0CEF  
                      _TXEN 0CF5                        _SYNC 0CF4                __CFG_WRT$OFF 0000  
             __CFG_FCMEN$ON 0000                        _data 00A4           ?_Lcd_Write_String 0070  
                      _atof 081C                        _main 0BF9                        _ftoa 0D5D  
              ___ftpack@arg 0070                ___ftpack@exp 0073                        fsr0h 0005  
                      fsr1h 0007                        indf0 0000                        fsr0l 0004  
                      indf1 0001                        fsr1l 0006                        btemp 007E  
                      start 0002          ??_Lcd_Write_String 0075             __end_of_Lcd_Cmd 0863  
         ___bmul@multiplier 0073                ___ftmul@cntr 0028                ___ftmul@sign 0029  
              ___fttol@exp1 0037                ___fttol@lval 0033             __end_of___aldiv 0CD6  
                     ?_atof 0046                       ?_main 0070                       ?_ftoa 005C  
           __end_of___ftadd 0160               __CFG_WDTE$OFF 0000             __end_of___ftdiv 0F4D  
           __end_of___ftneg 17E1             __end_of___lldiv 0BF9             __end_of___ftmul 1000  
           __end_of___llmod 0B62             __end_of___ftsub 0919             __end_of___fttol 0D5D  
                     _IRCF0 04CB                       _IRCF1 04CC                       _IRCF2 04CD  
                     _IRCF3 04CE                       u413m0 04CC                       u409m0 03F0  
                     _SPBRG 019B                       _PORTD 000F     __size_of_Lcd_Set_Cursor 0040  
                     _TRISD 008F         ___lmul@multiplicand 0074               __CFG_PWRTE$ON 0000  
              ___lltoft@exp 007D             __end_of_dpowers 1028             __end_of_isdigit 081C  
             ___ftpack@sign 0074                       atof@s 0046                       ftoa@f 005C  
                     ftoa@l 0065             __end_of_isspace 084F              __CFG_BOREN$OFF 0000  
                     status 0003                       wtemp0 007E             __end_of_sprintf 033F  
           __end_of_strncmp 0B1F                ?_internal_16 0070            __end_of_Lcd_Init 0ADD  
          __end_of_Lcd_Port 0892              __CFG_MCLRE$OFF 0000             __initialization 07DF  
              __end_of_atof 082C                __end_of_main 0C54                __end_of_ftoa 0DFF  
            __CFG_LPBOR$OFF 0000                      ??_atof 007E                      ??_main 00CA  
                    ??_ftoa 0060               ___fttol@sign1 0032          __size_of_Lcd_Clear 0008  
            __CFG_PLLEN$OFF 0000            __end_of___altoft 0A5B            ___llmod@dividend 0024  
            __CFG_ZCDDIS$ON 0000                      _ANSELD 018F            __end_of___ftpack 006A  
                    _RC1REG 0199            __end_of___lltoft 095F                   ??_Lcd_Cmd 0071  
                    _TX1REG 019A                      _SPLLEN 04CF     __size_of_Lcd_Write_Char 002C  
                    _TRISC6 0476                      _TRISC7 0477                      ___bmul 082C  
                    ___ftge 09E4                      ___lmul 09B5                   ??___aldiv 0078  
                    ___wmul 08E0                   ??___ftadd 004F              __CFG_STVREN$ON 0000  
                 ??___ftdiv 0020                   ??___ftneg 0073                   ??___lldiv 0078  
                 ??___ftmul 0020                   ??___llmod 0028                   ??___ftsub 007E  
                 ??___fttol 002E            __end_of_initMain 0989                      _memset 08AB  
          __end_of_read_gps 056F                      _strchr 0892                      _strlen 0919  
                    _strtod 056F                      _strstr 0B62                      ftoa@cp 0069  
     ___ftmul@f3_as_product 0025                   ??_isdigit 0070           ?_EUSART_Read_Char 0070  
                 ??_isspace 0070            Lcd_Write_Float@f 006A          ??_EUSART_Read_Char 0072  
                 ??_sprintf 0034                   ??_strncmp 007C             Lcd_Set_Cursor@a 0076  
           Lcd_Set_Cursor@b 0073             Lcd_Set_Cursor@y 0078             Lcd_Set_Cursor@z 0077  
      __size_of_EUSART_Read 000C     __end_of__initialization 07FD                  ___altoft@c 0078  
                ___ftadd@f1 0049                  ___ftadd@f2 004C                  ___ftge@ff1 0070  
                ___ftge@ff2 0073           __end_of_Lcd_Clear 17D9                  ___ftdiv@f1 007B  
                ___ftdiv@f2 0078                  ___ftdiv@f3 0025                  ___ftneg@f1 0070  
       ___bmul@multiplicand 0070                  ___ftmul@f1 0078                  ___ftmul@f2 007B  
                ___ftsub@f1 0059                  ___ftsub@f2 0056                  ___fttol@f1 002A  
            __pcstackCOMMON 0070                __pidataBANK0 0005                __pidataBANK1 0004  
                ___lltoft@c 0078              _Lcd_Set_Cursor 0A5B                   ?_Lcd_Init 0070  
                 ?_Lcd_Port 0070                sprintf@width 0041                  __pbssBANK1 00A0  
                __pmaintext 0BF9        __size_of_internal_16 0009                     ?___bmul 0070  
                   ?___ftge 0070                     ?___lmul 0070                     ?___wmul 0070  
           __CFG_PPS1WAY$ON 0000                   ?___altoft 0078                     ?_memset 0070  
            ___lmul@product 0078   __size_of_Lcd_Write_String 001B                   ?___ftpack 0070  
    __end_of_Lcd_Set_Cursor 0A9B                   ?___lltoft 0078                     ?_strchr 0070  
                   ?_strlen 0070                     ?_strtod 002A                     ?_strstr 0020  
                ??_Lcd_Init 0073                     _PPSLOCK 0E0F                  ??_Lcd_Port 0070  
  __size_of_Lcd_Write_Float 0017                   ?_initMain 0070              _Lcd_Write_Char 0989  
                   _Lcd_Cmd 084F                   ?_read_gps 0070                     ___aldiv 0C54  
           __size_of___bmul 0011             __size_of___ftge 003B             __size_of___lmul 002F  
                   ___ftadd 006A                     ___ftdiv 0EA5                     ___ftneg 17D9  
                   ___lldiv 0BA7             __size_of___wmul 001B                     ___ftmul 0F4D  
                   ___llmod 0B1F                     ___ftsub 08FB                     ___fttol 0CD6  
                ??___altoft 007C                  ??___ftpack 0075             __size_of_memset 001A  
           ?_Lcd_Set_Cursor 0073                  ??___lltoft 007C                     __ptext1 033F  
                   __ptext2 0B62                     __ptext3 0ADD                     __ptext4 0919  
                   __ptext5 0892                     __ptext6 08AB                     __ptext7 081C  
                   __ptext8 056F                     __ptext9 083D             __size_of_strchr 0019  
           __size_of_strlen 001E             __size_of_strtod 0270             __size_of_strstr 0045  
                   _dpowers 1000                     _isdigit 080E            ___aldiv@dividend 0074  
                   _isspace 083D                     _sprintf 0160                     clrloop0 0803  
    __end_of_Lcd_Write_Char 09B5                     _strncmp 0ADD        end_of_initialization 07FD  
                   ftoa@buf 00A8                     ftoa@rem 0061                  ??_initMain 0070  
                   memset@c 0070                     memset@n 0072                     memset@p 0075  
                ??_read_gps 0056           _EUSART_Initialize 0DFF             ___lldiv@divisor 0070  
           ___lldiv@counter 007D                  _uartBuffer 22C4          ?_EUSART_Initialize 0026  
          ___aldiv@quotient 0022                   Lcd_Port@a 0070                __pstringtext 1000  
        EUSART_Initialize@x 0079                     strlen@s 0070         ??_EUSART_Initialize 002A  
                   strtod@s 002A                  _terminator 00A0            __CFG_FOSC$INTOSC 0000  
                 _TRISBbits 008D             ?_Lcd_Write_Char 0070           Lcd_Write_String@a 0078  
         Lcd_Write_String@i 0076                   _RXPPSbits 0E24   __end_of_EUSART_Initialize 0EA5  
               ___ftdiv@exp 0028   __size_of_EUSART_Read_Char 000A           ??_Lcd_Write_Float 006D  
                _strtod$511 003D                  _strtod$512 0031                  _strtod$513 0034  
                _strtod$514 0037                  _strtod$515 003A                 ___ftmul@exp 0024  
                 _Lcd_Clear 17D1              __end_of___bmul 083D              __end_of___ftge 0A1F  
            __end_of___lmul 09E4              __end_of___wmul 08FB            _Lcd_Write_String 08C5  
            __end_of_memset 08C5       Lcd_Write_Float@status 00C7              __end_of_strchr 08AB  
            __end_of_strlen 0937              __end_of_strtod 07DF              __end_of_strstr 0BA7  
       start_initialization 07DF               ??_EUSART_Read 0070                  ftoa@status 005F  
         __size_of_Lcd_Init 0042           __size_of_Lcd_Port 0018             ___llmod@divisor 0020  
           ___llmod@counter 0029                  ?_Lcd_Clear 0070                    ??___bmul 0071  
                  ??___ftge 0076                    ??___lmul 0078                    ??___wmul 0074  
               __pdataBANK0 006F                 __pdataBANK1 00CC             Lcd_Write_Char@a 0074  
                  ??_memset 0074             Lcd_Write_Char@y 0073                    ??_strchr 0074  
                  ??_strlen 0072                    ??_strtod 002D                    ??_strstr 0024  
         __size_of___altoft 003C           __size_of___ftpack 0064                 __pbssBIGRAM 22C4  
         __size_of___lltoft 0028                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00C7  __size_of_EUSART_Initialize 00A6                    ?_Lcd_Cmd 0070  
               sprintf@flag 003A                 sprintf@prec 0043         __end_of_EUSART_Read 1800  
             ??_internal_16 0070                _read_gps$870 005A           __size_of_initMain 002A  
         __size_of_read_gps 0230            ??_Lcd_Set_Cursor 0074                    ?___aldiv 0070  
                  ?___ftadd 0049                    ?___ftdiv 0078                    ?___ftneg 0070  
                  ?___lldiv 0070                    ?___ftmul 0078                    ?___llmod 0020  
                  ?___ftsub 0056                    ?___fttol 002A   EUSART_Initialize@baudrate 0026  
                  ?_isdigit 0070                    ?_isspace 0070                    ?_sprintf 002A  
                  ?_strncmp 0076             ___aldiv@divisor 0070            _conversionString 00B9  
           ___aldiv@counter 0020              ___wmul@product 0074                   clear_ram0 0802  
                 _longitude 006F            _EUSART_Read_Char 17EA                    _PIE1bits 0091  
                  Lcd_Cmd@a 0072                    _PIR1bits 0011                 ??_Lcd_Clear 0073  
       __end_of_internal_16 17EA                 strtod@flags 0040                 strtod@expon 0041  
         ___wmul@multiplier 0070            ??_Lcd_Write_Char 0071             _Lcd_Write_Float 0863  
                  _Lcd_Init 0A9B                    _Lcd_Port 087A        Lcd_Write_Float@buf11 00C9  
               _EUSART_Read 17F4           ___lmul@multiplier 0070    __end_of_Lcd_Write_String 08E0  
          __size_of_Lcd_Cmd 0014            __size_of___aldiv 0082            __size_of___ftadd 00F6  
          __size_of___ftdiv 00A8            __size_of___ftneg 0008            __size_of___lldiv 0052  
                  ___altoft 0A1F            __size_of___ftmul 00B3            __size_of___llmod 0043  
          __size_of___ftsub 001E            __size_of___fttol 0087                    ___ftpack 0006  
                  ___lltoft 0937                 _isdigit$591 0070                  _ANSELBbits 018D  
                sprintf@val 003C            __size_of_isdigit 000E            __size_of_isspace 0012  
                  __ptext10 09B5                    __ptext11 0EA5                    __ptext20 0160  
                  __ptext12 082C                    __ptext21 080E                    __ptext13 0A1F  
                  __ptext30 0F4D                    __ptext22 08E0                    __ptext14 17EA  
                  __ptext31 0006                    __ptext23 0B1F                    __ptext15 17F4  
                  __ptext40 0DFF                    __ptext32 09E4                    __ptext24 0BA7  
                  __ptext16 095F                    __ptext41 0C54                    __ptext33 08C5  
                  __ptext25 0937                    __ptext17 17E1                    __ptext34 0989  
                  __ptext26 0CD6                    __ptext18 0863                    __ptext35 0A5B  
                  __ptext27 08FB                    __ptext19 0D5D                    __ptext36 0A9B  
                  __ptext28 006A                    __ptext37 17D1                    __ptext29 17D9  
                  __ptext38 084F                    __ptext39 087A            __size_of_sprintf 01DF  
          __size_of_strncmp 0042                    _initMain 095F                    _latitude 00CC  
             __size_of_atof 0010               __size_of_main 005B               __size_of_ftoa 00A2  
                  _read_gps 033F                  strncmp@len 007A                 _internal_16 17E1  
                _RB2PPSbits 0E9A                  _RC1STAbits 019D                  strtod@eexp 003F  
               _isspace$594 0070     __end_of_Lcd_Write_Float 087A                  _INTCONbits 000B  
                  isdigit@c 0071                    memset@p1 0076          Lcd_Write_Char@temp 0072  
                 sprintf@ap 003B                   sprintf@sp 0040                   strchr@chr 0072  
                 strchr@ptr 0070                    isspace@c 0071            ___lldiv@dividend 0074  
         __CFG_CLKOUTEN$OFF 0000                 _PPSLOCKbits 0E0F                   strncmp@s1 0076  
                 strncmp@s2 0078                   strtod@res 002C          Lcd_Set_Cursor@temp 0079  
    EUSART_Read_Char@Output 0070                    sprintf@c 0045                    sprintf@f 002A  
  __end_of_EUSART_Read_Char 17F4            ___lldiv@quotient 0079                    strlen@cp 0074  
              ___aldiv@sign 0021                    strtod@_u 0042                    strstr@s1 0020  
                  strstr@s2 0022  
